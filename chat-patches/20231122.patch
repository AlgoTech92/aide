diff --git a/src/vs/workbench/contrib/csChat/browser/codeBlockPart.css b/src/vs/workbench/contrib/csChat/browser/codeBlockPart.css
index cfda6c03a44..5c778eb2601 100644
--- a/src/vs/workbench/contrib/csChat/browser/codeBlockPart.css
+++ b/src/vs/workbench/contrib/csChat/browser/codeBlockPart.css
@@ -44,11 +44,12 @@
 	margin: 16px 0;
 }
 
-.interactive-result-code-block .interactive-result-editor .monaco-editor {
+.interactive-result-code-block {
 	border: 1px solid var(--vscode-input-border, transparent);
+	background-color: var(--vscode-interactive-result-editor-background-color);
 }
 
-.interactive-result-code-block .interactive-result-editor .monaco-editor.focused {
+.interactive-result-code-block:has(.monaco-editor.focused) {
 	border-color: var(--vscode-focusBorder, transparent);
 }
 
@@ -57,3 +58,56 @@
 .interactive-result-code-block .monaco-editor .overflow-guard {
 	border-radius: 4px;
 }
+
+.interactive-result-code-block .interactive-result-vulns {
+	font-size: 0.9em;
+	padding: 0px 8px 2px 8px;
+}
+
+.interactive-result-code-block .interactive-result-vulns-header {
+	display: flex;
+	height: 22px;
+}
+
+.interactive-result-code-block .interactive-result-vulns-header,
+.interactive-result-code-block .interactive-result-vulns-list {
+	opacity: 0.8;
+}
+
+.interactive-result-code-block .interactive-result-vulns-list {
+	margin: 0px;
+	padding-bottom: 3px;
+	padding-left: 16px !important; /* Override markdown styles */
+}
+
+.interactive-result-code-block.chat-vulnerabilities-collapsed .interactive-result-vulns-list {
+	display: none;
+}
+
+.interactive-result-code-block .interactive-result-vulns-list .chat-vuln-title {
+	font-weight: bold;
+}
+
+.interactive-result-code-block.no-vulns .interactive-result-vulns {
+	display: none;
+}
+
+.interactive-result-code-block .interactive-result-vulns-header .monaco-button {
+	/* unset Button styles */
+	display: inline-flex;
+	width: 100%;
+	border: none;
+	padding: 0;
+	text-align: initial;
+	justify-content: initial;
+	color: var(--vscode-foreground) !important; /* This is inside .rendered-markdown */
+	user-select: none;
+}
+
+.interactive-result-code-block .interactive-result-vulns-header .monaco-text-button:focus {
+	outline: none;
+}
+
+.interactive-result-code-block .interactive-result-vulns-header .monaco-text-button:focus-visible {
+	outline: 1px solid var(--vscode-focusBorder);
+}
diff --git a/src/vs/workbench/contrib/csChat/browser/codeBlockPart.ts b/src/vs/workbench/contrib/csChat/browser/codeBlockPart.ts
index fd5350bf367..7f55edcb93b 100644
--- a/src/vs/workbench/contrib/csChat/browser/codeBlockPart.ts
+++ b/src/vs/workbench/contrib/csChat/browser/codeBlockPart.ts
@@ -9,6 +9,8 @@ import * as dom from 'vs/base/browser/dom';
 import { Emitter, Event } from 'vs/base/common/event';
 import { Disposable } from 'vs/base/common/lifecycle';
 
+import { Button } from 'vs/base/browser/ui/button/button';
+import { Codicon } from 'vs/base/common/codicons';
 import { EditorExtensionsRegistry } from 'vs/editor/browser/editorExtensions';
 import { CodeEditorWidget } from 'vs/editor/browser/widget/codeEditorWidget';
 import { EDITOR_FONT_DEFAULTS, IEditorOptions } from 'vs/editor/common/config/editorOptions';
@@ -31,14 +33,15 @@ import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
 import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
 import { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';
 import { AccessibilityVerbositySettingId } from 'vs/workbench/contrib/accessibility/browser/accessibilityConfiguration';
+import { IMarkdownVulnerability } from 'vs/workbench/contrib/chat/browser/chatMarkdownDecorationsRenderer';
 import { ChatEditorOptions } from 'vs/workbench/contrib/chat/browser/chatOptions';
+import { IChatResponseViewModel, isResponseVM } from 'vs/workbench/contrib/chat/common/chatViewModel';
 import { MenuPreventer } from 'vs/workbench/contrib/codeEditor/browser/menuPreventer';
 import { SelectionClipboardContributionID } from 'vs/workbench/contrib/codeEditor/browser/selectionClipboard';
 import { getSimpleEditorOptions } from 'vs/workbench/contrib/codeEditor/browser/simpleEditorOptions';
 
 const $ = dom.$;
 
-
 export interface ICodeBlockData {
 	text: string;
 	languageId: string;
@@ -46,6 +49,7 @@ export interface ICodeBlockData {
 	element: unknown;
 	parentContextKeyService?: IContextKeyService;
 	hideToolbar?: boolean;
+	vulns?: IMarkdownVulnerability[];
 }
 
 export interface ICodeBlockActionContext {
@@ -57,7 +61,7 @@ export interface ICodeBlockActionContext {
 
 
 export interface ICodeBlockPart {
-	readonly onDidChangeContentHeight: Event<number>;
+	readonly onDidChangeContentHeight: Event<void>;
 	readonly element: HTMLElement;
 	readonly textModel: ITextModel;
 	layout(width: number): void;
@@ -69,16 +73,20 @@ export interface ICodeBlockPart {
 const defaultCodeblockPadding = 10;
 
 export class CodeBlockPart extends Disposable implements ICodeBlockPart {
-	private readonly _onDidChangeContentHeight = this._register(new Emitter<number>());
+	private readonly _onDidChangeContentHeight = this._register(new Emitter<void>());
 	public readonly onDidChangeContentHeight = this._onDidChangeContentHeight.event;
 
 	private readonly editor: CodeEditorWidget;
 	private readonly toolbar: MenuWorkbenchToolBar;
 	private readonly contextKeyService: IContextKeyService;
 
+	private readonly vulnsButton: Button;
+	private readonly vulnsListElement: HTMLElement;
+
 	public readonly textModel: ITextModel;
 	public readonly element: HTMLElement;
 
+	private currentCodeBlockData: ICodeBlockData | undefined;
 	private currentScrollWidth = 0;
 
 	constructor(
@@ -134,6 +142,32 @@ export class CodeBlockPart extends Disposable implements ICodeBlockPart {
 				shouldForwardArgs: true
 			}
 		}));
+
+		const vulnsContainer = dom.append(this.element, $('.interactive-result-vulns'));
+		const vulnsHeaderElement = dom.append(vulnsContainer, $('.interactive-result-vulns-header', undefined));
+		this.vulnsButton = new Button(vulnsHeaderElement, {
+			buttonBackground: undefined,
+			buttonBorder: undefined,
+			buttonForeground: undefined,
+			buttonHoverBackground: undefined,
+			buttonSecondaryBackground: undefined,
+			buttonSecondaryForeground: undefined,
+			buttonSecondaryHoverBackground: undefined,
+			buttonSeparator: undefined,
+			supportIcons: true
+		});
+
+		this.vulnsListElement = dom.append(vulnsContainer, $('ul.interactive-result-vulns-list'));
+
+		this.vulnsButton.onDidClick(() => {
+			const element = this.currentCodeBlockData!.element as IChatResponseViewModel;
+			element.vulnerabilitiesListExpanded = !element.vulnerabilitiesListExpanded;
+			this.vulnsButton.label = this.getVulnerabilitiesLabel();
+			this.element.classList.toggle('chat-vulnerabilities-collapsed', !element.vulnerabilitiesListExpanded);
+			this._onDidChangeContentHeight.fire();
+			// this.updateAriaLabel(collapseButton.element, referencesLabel, element.usedReferencesExpanded);
+		});
+
 		this._register(this.toolbar.onDidChangeDropdownVisibility(e => {
 			toolbarElement.classList.toggle('force-visibility', e);
 		}));
@@ -155,7 +189,7 @@ export class CodeBlockPart extends Disposable implements ICodeBlockPart {
 		}));
 		this._register(this.editor.onDidContentSizeChange(e => {
 			if (e.contentHeightChanged) {
-				this._onDidChangeContentHeight.fire(e.contentHeight);
+				this._onDidChangeContentHeight.fire();
 			}
 		}));
 		this._register(this.editor.onDidBlurEditorWidget(() => {
@@ -220,6 +254,7 @@ export class CodeBlockPart extends Disposable implements ICodeBlockPart {
 
 
 	render(data: ICodeBlockData, width: number): void {
+		this.currentCodeBlockData = data;
 		if (data.parentContextKeyService) {
 			this.contextKeyService.updateParent(data.parentContextKeyService);
 		}
@@ -250,6 +285,28 @@ export class CodeBlockPart extends Disposable implements ICodeBlockPart {
 		} else {
 			dom.show(this.toolbar.getElement());
 		}
+
+		if (data.vulns?.length && isResponseVM(data.element)) {
+			dom.clearNode(this.vulnsListElement);
+			this.element.classList.remove('no-vulns');
+			this.element.classList.toggle('chat-vulnerabilities-collapsed', !data.element.vulnerabilitiesListExpanded);
+			dom.append(this.vulnsListElement, ...data.vulns.map(v => $('li', undefined, $('span.chat-vuln-title', undefined, v.title), ' ' + v.description)));
+			this.vulnsButton.label = this.getVulnerabilitiesLabel();
+		} else {
+			this.element.classList.add('no-vulns');
+		}
+	}
+
+	private getVulnerabilitiesLabel(): string {
+		if (!this.currentCodeBlockData || !this.currentCodeBlockData.vulns) {
+			return '';
+		}
+
+		const referencesLabel = this.currentCodeBlockData.vulns.length > 1 ?
+			localize('vulnerabilitiesPlural', "{0} vulnerabilities", this.currentCodeBlockData.vulns.length) :
+			localize('vulnerabilitiesSingular', "{0} vulnerability", 1);
+		const icon = (element: IChatResponseViewModel) => element.vulnerabilitiesListExpanded ? Codicon.chevronDown : Codicon.chevronRight;
+		return `${referencesLabel} $(${icon(this.currentCodeBlockData.element as IChatResponseViewModel).id})`;
 	}
 
 	private fixCodeText(text: string, languageId: string): string {
diff --git a/src/vs/workbench/contrib/csChat/browser/csChatListRenderer.ts b/src/vs/workbench/contrib/csChat/browser/csChatListRenderer.ts
index 26b1ab5ebab..dac8c2a0423 100644
--- a/src/vs/workbench/contrib/csChat/browser/csChatListRenderer.ts
+++ b/src/vs/workbench/contrib/csChat/browser/csChatListRenderer.ts
@@ -50,14 +50,14 @@ import { AccessibilityVerbositySettingId } from 'vs/workbench/contrib/accessibil
 import { IAccessibleViewService } from 'vs/workbench/contrib/accessibility/browser/accessibleView';
 import { ChatTreeItem, IChatCodeBlockInfo, IChatFileTreeInfo } from 'vs/workbench/contrib/chat/browser/chat';
 import { ChatFollowups } from 'vs/workbench/contrib/chat/browser/chatFollowups';
-import { convertParsedRequestToMarkdown, reduceInlineContentReferences, walkTreeAndAnnotateReferenceLinks } from 'vs/workbench/contrib/chat/browser/chatMarkdownDecorationsRenderer';
+import { annotateSpecialMarkdownContent, convertParsedRequestToMarkdown, extractVulnerabilitiesFromText, walkTreeAndAnnotateReferenceLinks } from 'vs/workbench/contrib/chat/browser/chatMarkdownDecorationsRenderer';
 import { ChatEditorOptions } from 'vs/workbench/contrib/chat/browser/chatOptions';
 import { CodeBlockPart, ICodeBlockData, ICodeBlockPart } from 'vs/workbench/contrib/chat/browser/codeBlockPart';
 import { IChatAgentMetadata } from 'vs/workbench/contrib/chat/common/chatAgents';
 import { CONTEXT_CHAT_RESPONSE_SUPPORT_ISSUE_REPORTING, CONTEXT_REQUEST, CONTEXT_RESPONSE, CONTEXT_RESPONSE_FILTERED, CONTEXT_RESPONSE_VOTE } from 'vs/workbench/contrib/chat/common/chatContextKeys';
-import { IChatProgressResponseContent } from 'vs/workbench/contrib/chat/common/chatModel';
+import { IChatProgressRenderableResponseContent } from 'vs/workbench/contrib/chat/common/chatModel';
 import { chatAgentLeader, chatSubcommandLeader } from 'vs/workbench/contrib/chat/common/chatParserTypes';
-import { IChatContentInlineReference, IChatContentReference, IChatReplyFollowup, IChatResponseProgressFileTreeData, IChatService, InteractiveSessionVoteDirection } from 'vs/workbench/contrib/chat/common/chatService';
+import { IChatContentReference, IChatReplyFollowup, IChatResponseProgressFileTreeData, IChatService, InteractiveSessionVoteDirection } from 'vs/workbench/contrib/chat/common/chatService';
 import { IChatResponseMarkdownRenderData, IChatResponseRenderData, IChatResponseViewModel, IChatWelcomeMessageViewModel, isRequestVM, isResponseVM, isWelcomeVM } from 'vs/workbench/contrib/chat/common/chatViewModel';
 import { IWordCountResult, getNWords } from 'vs/workbench/contrib/chat/common/chatWordCounter';
 import { createFileIconThemableTreeContainerScope } from 'vs/workbench/contrib/files/browser/views/explorerView';
@@ -331,7 +331,7 @@ export class ChatListItemRenderer extends Disposable implements ITreeRenderer<Ch
 			timer.cancelAndSet(runProgressiveRender, 50, dom.getWindow(templateData.rowContainer));
 			runProgressiveRender(true);
 		} else if (isResponseVM(element)) {
-			const renderableResponse = reduceInlineContentReferences(element.response.value);
+			const renderableResponse = annotateSpecialMarkdownContent(element.response.value);
 			this.basicRenderElement(renderableResponse, element, index, templateData);
 		} else if (isRequestVM(element)) {
 			const markdown = 'kind' in element.message ?
@@ -432,7 +432,7 @@ export class ChatListItemRenderer extends Disposable implements ITreeRenderer<Ch
 		}
 	}
 
-	private basicRenderElement(value: ReadonlyArray<Exclude<IChatProgressResponseContent, IChatContentInlineReference>>, element: ChatTreeItem, index: number, templateData: IChatListItemTemplate) {
+	private basicRenderElement(value: ReadonlyArray<IChatProgressRenderableResponseContent>, element: ChatTreeItem, index: number, templateData: IChatListItemTemplate) {
 		const fillInIncompleteTokens = isResponseVM(element) && (!element.isComplete || element.isCanceled || element.errorDetails?.responseIsFiltered || element.errorDetails?.responseIsIncomplete);
 
 		dom.clearNode(templateData.value);
@@ -535,7 +535,8 @@ export class ChatListItemRenderer extends Disposable implements ITreeRenderer<Ch
 
 		disposables.clear();
 
-		const renderableResponse = reduceInlineContentReferences(element.response.value);
+		const annotatedResult = annotateSpecialMarkdownContent(element.response.value);
+		const renderableResponse = annotatedResult;
 		let isFullyRendered = false;
 		if (element.isCanceled) {
 			this.traceLayout('runProgressiveRender', `canceled, index=${index}`);
@@ -816,8 +817,10 @@ export class ChatListItemRenderer extends Disposable implements ITreeRenderer<Ch
 		const result = this.renderer.render(markdown, {
 			fillInIncompleteTokens,
 			codeBlockRendererSync: (languageId, text) => {
+				const vulns = extractVulnerabilitiesFromText(text);
+
 				const hideToolbar = isResponseVM(element) && element.errorDetails?.responseIsFiltered;
-				const data = { languageId, text, codeBlockIndex: codeBlockIndex++, element, hideToolbar, parentContextKeyService: templateData.contextKeyService };
+				const data = { languageId, text: vulns.newText, codeBlockIndex: codeBlockIndex++, element, hideToolbar, parentContextKeyService: templateData.contextKeyService, vulns: vulns.vulnerabilities };
 				const ref = this.renderCodeBlock(data, disposables);
 
 				// Attach this after updating text/layout of the editor, so it should only be fired when the size updates later (horizontal scrollbar, wrapping)
diff --git a/src/vs/workbench/contrib/csChat/browser/csChatMarkdownDecorationsRenderer.ts b/src/vs/workbench/contrib/csChat/browser/csChatMarkdownDecorationsRenderer.ts
index 0015e1cf339..b630cba32d2 100644
--- a/src/vs/workbench/contrib/csChat/browser/csChatMarkdownDecorationsRenderer.ts
+++ b/src/vs/workbench/contrib/csChat/browser/csChatMarkdownDecorationsRenderer.ts
@@ -8,10 +8,11 @@ import { MarkdownString } from 'vs/base/common/htmlContent';
 import { revive } from 'vs/base/common/marshalling';
 import { basename } from 'vs/base/common/resources';
 import { URI } from 'vs/base/common/uri';
+import { IRange } from 'vs/editor/common/core/range';
 import { Location } from 'vs/editor/common/languages';
-import { IChatProgressResponseContent } from 'vs/workbench/contrib/chat/common/chatModel';
+import { IChatProgressRenderableResponseContent, IChatProgressResponseContent } from 'vs/workbench/contrib/chat/common/chatModel';
 import { ChatRequestTextPart, IParsedChatRequest } from 'vs/workbench/contrib/chat/common/chatParserTypes';
-import { IChatContentInlineReference } from 'vs/workbench/contrib/chat/common/chatService';
+import { IChatAgentMarkdownContentWithVulnerability, IChatContentInlineReference } from 'vs/workbench/contrib/chat/common/chatService';
 
 const variableRefUrl = 'http://_vscodedecoration_';
 
@@ -58,10 +59,39 @@ function renderFileWidget(href: string, a: HTMLAnchorElement): void {
 	a.setAttribute('data-href', location.uri.with({ fragment }).toString());
 }
 
+export interface IMarkdownVulnerability {
+	title: string;
+	description: string;
+	range: IRange;
+}
+
+export function extractVulnerabilitiesFromText(text: string): { newText: string; vulnerabilities: IMarkdownVulnerability[] } {
+	const vulnerabilities: IMarkdownVulnerability[] = [];
+	let newText = text;
+	let match: RegExpExecArray | null;
+	while ((match = /<vscode_annotation title="(.*?)" description="(.*?)">(.*?)<\/vscode_annotation>/ms.exec(newText)) !== null) {
+		const [full, title, description, content] = match;
+		const start = match.index;
+		const textBefore = newText.substring(0, start);
+		const linesBefore = textBefore.split('\n').length - 1;
+		const linesInside = content.split('\n').length - 1;
+
+		const previousNewlineIdx = textBefore.lastIndexOf('\n');
+		const startColumn = start - (previousNewlineIdx + 1) + 1;
+		const endPreviousNewlineIdx = (textBefore + content).lastIndexOf('\n');
+		const endColumn = start + content.length - (endPreviousNewlineIdx + 1) + 1;
+
+		vulnerabilities.push({ title: decodeURIComponent(title), description: decodeURIComponent(description), range: { startLineNumber: linesBefore + 1, startColumn, endLineNumber: linesBefore + linesInside + 1, endColumn } });
+		newText = newText.substring(0, start) + content + newText.substring(start + full.length);
+	}
+
+	return { newText, vulnerabilities };
+}
+
 const contentRefUrl = 'http://_vscodecontentref_'; // must be lowercase for URI
 
-export function reduceInlineContentReferences(response: ReadonlyArray<IChatProgressResponseContent>): ReadonlyArray<Exclude<IChatProgressResponseContent, IChatContentInlineReference>> {
-	const result: Exclude<IChatProgressResponseContent, IChatContentInlineReference>[] = [];
+export function annotateSpecialMarkdownContent(response: ReadonlyArray<IChatProgressResponseContent>): ReadonlyArray<IChatProgressRenderableResponseContent> {
+	const result: Exclude<IChatProgressResponseContent, IChatContentInlineReference | IChatAgentMarkdownContentWithVulnerability>[] = [];
 	for (const item of response) {
 		const previousItem = result[result.length - 1];
 		if (item.kind === 'inlineReference') {
@@ -75,6 +105,13 @@ export function reduceInlineContentReferences(response: ReadonlyArray<IChatProgr
 			}
 		} else if (item.kind === 'markdownContent' && previousItem?.kind === 'markdownContent') {
 			result[result.length - 1] = { content: new MarkdownString(previousItem.content.value + item.content.value, { isTrusted: previousItem.content.isTrusted }), kind: 'markdownContent' };
+		} else if (item.kind === 'markdownVuln') {
+			const markdownText = `<vscode_annotation title="${encodeURIComponent(item.title)}" description="${encodeURIComponent(item.description)}">${item.content.value}</vscode_annotation>`;
+			if (previousItem?.kind === 'markdownContent') {
+				result[result.length - 1] = { content: new MarkdownString(previousItem.content.value + markdownText, { isTrusted: previousItem.content.isTrusted }), kind: 'markdownContent' };
+			} else {
+				result.push({ content: new MarkdownString(markdownText), kind: 'markdownContent' });
+			}
 		} else {
 			result.push(item);
 		}
diff --git a/src/vs/workbench/contrib/csChat/browser/media/csChat.css b/src/vs/workbench/contrib/csChat/browser/media/csChat.css
index bbda4c71f5d..bf7a1b0afdc 100644
--- a/src/vs/workbench/contrib/csChat/browser/media/csChat.css
+++ b/src/vs/workbench/contrib/csChat/browser/media/csChat.css
@@ -276,6 +276,7 @@
 
 .interactive-item-container.interactive-item-compact.no-padding {
 	padding: unset;
+	gap: unset;
 }
 
 .interactive-item-container.interactive-item-compact .header {
@@ -611,5 +612,6 @@
 }
 
 .interactive-item-container .progress-steps .progress-step .codicon-check {
+	font-size: 14px;
 	color: var(--vscode-debugIcon-startForeground);
 }
diff --git a/src/vs/workbench/contrib/csChat/common/csChatModel.ts b/src/vs/workbench/contrib/csChat/common/csChatModel.ts
index d4617660efe..2b8e3e3292a 100644
--- a/src/vs/workbench/contrib/csChat/common/csChatModel.ts
+++ b/src/vs/workbench/contrib/csChat/common/csChatModel.ts
@@ -16,7 +16,7 @@ import { OffsetRange } from 'vs/editor/common/core/offsetRange';
 import { ILogService } from 'vs/platform/log/common/log';
 import { IChatAgentCommand, IChatAgentData, IChatAgentService } from 'vs/workbench/contrib/chat/common/chatAgents';
 import { ChatRequestTextPart, IParsedChatRequest, reviveParsedChatRequest } from 'vs/workbench/contrib/chat/common/chatParserTypes';
-import { IChat, IChatAsyncContent, IChatContent, IChatContentInlineReference, IChatContentReference, IChatFollowup, IChatMarkdownContent, IChatProgress, IChatProgressMessage, IChatReplyFollowup, IChatResponse, IChatResponseErrorDetails, IChatResponseProgressFileTreeData, IChatTreeData, IChatUsedContext, InteractiveSessionVoteDirection, isIUsedContext } from 'vs/workbench/contrib/chat/common/chatService';
+import { IChat, IChatAgentMarkdownContentWithVulnerability, IChatAsyncContent, IChatContent, IChatContentInlineReference, IChatContentReference, IChatFollowup, IChatMarkdownContent, IChatProgress, IChatProgressMessage, IChatReplyFollowup, IChatResponse, IChatResponseErrorDetails, IChatResponseProgressFileTreeData, IChatTreeData, IChatUsedContext, InteractiveSessionVoteDirection, isIUsedContext } from 'vs/workbench/contrib/chat/common/chatService';
 
 export interface IChatRequestModel {
 	readonly id: string;
@@ -29,10 +29,13 @@ export interface IChatRequestModel {
 
 export type IChatProgressResponseContent =
 	| IChatMarkdownContent
+	| IChatAgentMarkdownContentWithVulnerability
 	| IChatTreeData
 	| IChatAsyncContent
 	| IChatContentInlineReference;
 
+export type IChatProgressRenderableResponseContent = Exclude<IChatProgressResponseContent, IChatContentInlineReference | IChatAgentMarkdownContentWithVulnerability>;
+
 export interface IResponse {
 	readonly value: ReadonlyArray<IChatProgressResponseContent>;
 	asString(): string;
@@ -100,7 +103,7 @@ export class Response implements IResponse {
 		return this._responseParts;
 	}
 
-	constructor(value: IMarkdownString | ReadonlyArray<IMarkdownString | IChatResponseProgressFileTreeData | IChatContentInlineReference>) {
+	constructor(value: IMarkdownString | ReadonlyArray<IMarkdownString | IChatResponseProgressFileTreeData | IChatContentInlineReference | IChatAgentMarkdownContentWithVulnerability>) {
 		this._responseParts = asArray(value).map((v) => (isMarkdownString(v) ?
 			{ content: v, kind: 'markdownContent' } satisfies IChatMarkdownContent :
 			'kind' in v ? v : { kind: 'treeData', treeData: v }));
@@ -112,6 +115,11 @@ export class Response implements IResponse {
 		return this._responseRepr;
 	}
 
+	clear(): void {
+		this._responseParts = [];
+		this._updateRepr(true);
+	}
+
 	updateContent(progress: IChatProgressResponseContent | IChatContent, quiet?: boolean): void {
 		if (progress.kind === 'content' || progress.kind === 'markdownContent') {
 			const responsePartLength = this._responseParts.length - 1;
@@ -155,7 +163,7 @@ export class Response implements IResponse {
 				}
 				this._updateRepr(quiet);
 			});
-		} else if (progress.kind === 'treeData' || progress.kind === 'inlineReference') {
+		} else if (progress.kind === 'treeData' || progress.kind === 'inlineReference' || progress.kind === 'markdownVuln') {
 			this._responseParts.push(progress);
 			this._updateRepr(quiet);
 		}
@@ -256,7 +264,7 @@ export class ChatResponseModel extends Disposable implements IChatResponseModel
 	}
 
 	constructor(
-		_response: IMarkdownString | ReadonlyArray<IMarkdownString | IChatResponseProgressFileTreeData | IChatContentInlineReference>,
+		_response: IMarkdownString | ReadonlyArray<IMarkdownString | IChatResponseProgressFileTreeData | IChatContentInlineReference | IChatAgentMarkdownContentWithVulnerability>,
 		public readonly session: ChatModel,
 		agent: IChatAgentData | undefined,
 		public readonly requestId: string,
@@ -307,7 +315,11 @@ export class ChatResponseModel extends Disposable implements IChatResponseModel
 		this._onDidChange.fire();
 	}
 
-	complete(): void {
+	complete(errorDetails?: IChatResponseErrorDetails): void {
+		if (errorDetails?.responseIsRedacted) {
+			this._response.clear();
+		}
+
 		this._isComplete = true;
 		this._onDidChange.fire();
 	}
@@ -352,7 +364,7 @@ export type ISerializableChatAgentData = UriDto<IChatAgentData>;
 
 export interface ISerializableChatRequestData {
 	message: string | IParsedChatRequest;
-	response: ReadonlyArray<IMarkdownString | IChatResponseProgressFileTreeData | IChatContentInlineReference> | undefined;
+	response: ReadonlyArray<IMarkdownString | IChatResponseProgressFileTreeData | IChatContentInlineReference | IChatAgentMarkdownContentWithVulnerability> | undefined;
 	agent?: ISerializableChatAgentData;
 	slashCommand?: IChatAgentCommand;
 	responseErrorDetails: IChatResponseErrorDetails | undefined;
@@ -640,7 +652,10 @@ export class ChatModel extends Disposable implements IChatModel {
 			throw new Error('acceptResponseProgress: Adding progress to a completed response');
 		}
 
-		if (progress.kind === 'content' || progress.kind === 'markdownContent' || progress.kind === 'asyncContent' || progress.kind === 'treeData' || progress.kind === 'inlineReference') {
+		if (progress.kind === 'vulnerability') {
+			// TODO@roblourens ChatModel should just work with strings
+			request.response.updateContent({ kind: 'markdownVuln', content: { value: progress.content }, title: progress.title, description: progress.description }, quiet);
+		} else if (progress.kind === 'content' || progress.kind === 'markdownContent' || progress.kind === 'asyncContent' || progress.kind === 'treeData' || progress.kind === 'inlineReference' || progress.kind === 'markdownVuln') {
 			request.response.updateContent(progress, quiet);
 		} else if (progress.kind === 'usedContext' || progress.kind === 'reference' || progress.kind === 'progressMessage') {
 			request.response.applyProgress(progress);
@@ -683,12 +698,12 @@ export class ChatModel extends Disposable implements IChatModel {
 		request.response.setErrorDetails(rawResponse.errorDetails);
 	}
 
-	completeResponse(request: ChatRequestModel): void {
+	completeResponse(request: ChatRequestModel, errorDetails: IChatResponseErrorDetails | undefined): void {
 		if (!request.response) {
 			throw new Error('Call setResponse before completeResponse');
 		}
 
-		request.response.complete();
+		request.response.complete(errorDetails);
 	}
 
 	setFollowups(request: ChatRequestModel, followups: IChatFollowup[] | undefined): void {
diff --git a/src/vs/workbench/contrib/csChat/common/csChatService.ts b/src/vs/workbench/contrib/csChat/common/csChatService.ts
index fcd5a652619..a5376b97e0e 100644
--- a/src/vs/workbench/contrib/csChat/common/csChatService.ts
+++ b/src/vs/workbench/contrib/csChat/common/csChatService.ts
@@ -36,6 +36,7 @@ export interface IChatResponseErrorDetails {
 	message: string;
 	responseIsIncomplete?: boolean;
 	responseIsFiltered?: boolean;
+	responseIsRedacted?: boolean;
 }
 
 export interface IChatResponse {
@@ -130,9 +131,26 @@ export interface IChatProgressMessage {
 	kind: 'progressMessage';
 }
 
+export interface IChatAgentContentWithVulnerability {
+	content: string;
+	title: string;
+	description: string;
+	kind: 'vulnerability';
+}
+
+// TODO@roblourens Temp until I get MarkdownString out of ChatModel
+export interface IChatAgentMarkdownContentWithVulnerability {
+	content: IMarkdownString;
+	title: string;
+	description: string;
+	kind: 'markdownVuln';
+}
+
 export type IChatProgress =
 	| IChatContent
 	| IChatMarkdownContent
+	| IChatAgentContentWithVulnerability
+	| IChatAgentMarkdownContentWithVulnerability
 	| IChatTreeData
 	| IChatAsyncContent
 	| IChatUsedContext
diff --git a/src/vs/workbench/contrib/csChat/common/csChatServiceImpl.ts b/src/vs/workbench/contrib/csChat/common/csChatServiceImpl.ts
index 9d447d5bbfc..a6775318b6c 100644
--- a/src/vs/workbench/contrib/csChat/common/csChatServiceImpl.ts
+++ b/src/vs/workbench/contrib/csChat/common/csChatServiceImpl.ts
@@ -558,7 +558,7 @@ export class ChatService extends Disposable implements IChatService {
 					rawResponse = { session: model.session! };
 
 				} else {
-					throw new Error(`Can't handle request`);
+					throw new Error(`Cannot handle request`);
 				}
 
 				if (token.isCancellationRequested) {
@@ -590,10 +590,10 @@ export class ChatService extends Disposable implements IChatService {
 					if (agentOrCommandFollowups) {
 						agentOrCommandFollowups.then(followups => {
 							model.setFollowups(request, followups);
-							model.completeResponse(request);
+							model.completeResponse(request, rawResponse?.errorDetails);
 						});
 					} else {
-						model.completeResponse(request);
+						model.completeResponse(request, rawResponse?.errorDetails);
 					}
 				}
 			} finally {
@@ -656,7 +656,7 @@ export class ChatService extends Disposable implements IChatService {
 		if (response.followups !== undefined) {
 			model.setFollowups(request, response.followups);
 		}
-		model.completeResponse(request);
+		model.completeResponse(request, response.errorDetails);
 	}
 
 	cancelCurrentRequestForSession(sessionId: string): void {
diff --git a/src/vs/workbench/contrib/csChat/common/csChatViewModel.ts b/src/vs/workbench/contrib/csChat/common/csChatViewModel.ts
index 6fba224d47f..2ed73840d90 100644
--- a/src/vs/workbench/contrib/csChat/common/csChatViewModel.ts
+++ b/src/vs/workbench/contrib/csChat/common/csChatViewModel.ts
@@ -79,6 +79,7 @@ export interface IChatLiveUpdateData {
 	loadingStartTime: number;
 	lastUpdateTime: number;
 	impliedWordLoadRate: number;
+	lastWordCount: number;
 }
 
 export interface IChatResponseViewModel {
@@ -109,6 +110,7 @@ export interface IChatResponseViewModel {
 	currentRenderedHeight: number | undefined;
 	setVote(vote: InteractiveSessionVoteDirection): void;
 	usedReferencesExpanded?: boolean;
+	vulnerabilitiesListExpanded: boolean;
 }
 
 export class ChatViewModel extends Disposable implements IChatViewModel {
@@ -335,7 +337,6 @@ export class ChatResponseViewModel extends Disposable implements IChatResponseVi
 	currentRenderedHeight: number | undefined;
 
 	private _usedReferencesExpanded: boolean | undefined;
-
 	get usedReferencesExpanded(): boolean | undefined {
 		if (typeof this._usedReferencesExpanded === 'boolean') {
 			return this._usedReferencesExpanded;
@@ -348,6 +349,15 @@ export class ChatResponseViewModel extends Disposable implements IChatResponseVi
 		this._usedReferencesExpanded = v;
 	}
 
+	private _vulnerabilitiesListExpanded: boolean = false;
+	get vulnerabilitiesListExpanded(): boolean {
+		return this._vulnerabilitiesListExpanded;
+	}
+
+	set vulnerabilitiesListExpanded(v: boolean) {
+		this._vulnerabilitiesListExpanded = v;
+	}
+
 	private _contentUpdateTimings: IChatLiveUpdateData | undefined = undefined;
 	get contentUpdateTimings(): IChatLiveUpdateData | undefined {
 		return this._contentUpdateTimings;
@@ -363,7 +373,8 @@ export class ChatResponseViewModel extends Disposable implements IChatResponseVi
 			this._contentUpdateTimings = {
 				loadingStartTime: Date.now(),
 				lastUpdateTime: Date.now(),
-				impliedWordLoadRate: 0
+				impliedWordLoadRate: 0,
+				lastWordCount: 0
 			};
 		}
 
@@ -373,18 +384,14 @@ export class ChatResponseViewModel extends Disposable implements IChatResponseVi
 				const now = Date.now();
 				const wordCount = countWords(_model.response.asString());
 				const timeDiff = now - this._contentUpdateTimings!.loadingStartTime;
-				const impliedWordLoadRate = wordCount / (timeDiff / 1000);
-				const renderedWordCount = this.renderData?.renderedParts.reduce((acc, part) => acc += ('label' in part ? 0 : part.renderedWordCount), 0);
-				if (!this.isComplete) {
-					this.trace('onDidChange', `Update- got ${wordCount} words over ${timeDiff}ms = ${impliedWordLoadRate} words/s. ${renderedWordCount} words are rendered.`);
-					this._contentUpdateTimings = {
-						loadingStartTime: this._contentUpdateTimings!.loadingStartTime,
-						lastUpdateTime: now,
-						impliedWordLoadRate
-					};
-				} else {
-					this.trace(`onDidChange`, `Done- got ${wordCount} words over ${timeDiff}ms = ${impliedWordLoadRate} words/s. ${renderedWordCount} words are rendered.`);
-				}
+				const impliedWordLoadRate = this._contentUpdateTimings.lastWordCount / (timeDiff / 1000);
+				this.trace('onDidChange', `Update- got ${this._contentUpdateTimings.lastWordCount} words over ${timeDiff}ms = ${impliedWordLoadRate} words/s. ${wordCount} words are now available.`);
+				this._contentUpdateTimings = {
+					loadingStartTime: this._contentUpdateTimings!.loadingStartTime,
+					lastUpdateTime: now,
+					impliedWordLoadRate,
+					lastWordCount: wordCount
+				};
 			} else {
 				this.logService.warn('ChatResponseViewModel#onDidChange: got model update but contentUpdateTimings is not initialized');
 			}
