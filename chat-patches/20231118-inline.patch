diff --git a/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChat.contribution.ts b/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChat.contribution.ts
index bf51f1ca521..502d37bbc81 100644
--- a/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChat.contribution.ts
+++ b/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChat.contribution.ts
@@ -47,6 +47,7 @@ registerAction2(InlineChatActions.ContractMessageAction);
 registerAction2(InlineChatActions.ToggleInlineDiff);
 registerAction2(InlineChatActions.FeebackHelpfulCommand);
 registerAction2(InlineChatActions.FeebackUnhelpfulCommand);
+registerAction2(InlineChatActions.ReportIssueForBugCommand);
 registerAction2(InlineChatActions.ApplyPreviewEdits);
 
 registerAction2(InlineChatActions.CopyRecordings);
diff --git a/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChat.css b/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChat.css
index 356105ef6ad..d48e61ff247 100644
--- a/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChat.css
+++ b/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChat.css
@@ -151,7 +151,6 @@
 	color: var(--vscode-chat-slashCommandForeground);
 }
 
-
 .monaco-editor .inline-chat .markdownMessage {
 	padding: 10px 5px;
 }
@@ -194,6 +193,32 @@
 	-webkit-line-clamp: var(--vscode-inline-chat-expanded, 10);
 }
 
+.monaco-editor .inline-chat .followUps {
+	padding: 5px 5px;
+}
+
+.monaco-editor .inline-chat .followUps .interactive-session-followups .monaco-button {
+	display: block;
+	color: var(--vscode-textLink-foreground);
+	font-size: 12px;
+}
+
+.monaco-editor .inline-chat .followUps.hidden {
+	display: none;
+}
+
+.monaco-editor .inline-chat .chatMessage {
+	padding: 8px 3px;
+}
+
+.monaco-editor .inline-chat .chatMessage .chatMessageContent {
+	padding: 2px 2px;
+}
+
+.monaco-editor .inline-chat .chatMessage.hidden {
+	display: none;
+}
+
 .monaco-editor .inline-chat .status .label A {
 	color: var(--vscode-textLink-foreground);
 	cursor: pointer;
@@ -318,7 +343,6 @@
 /* create zone */
 
 .monaco-editor .inline-chat-newfile-widget {
-	padding: 3px 0 6px 0;
 	background-color: var(--vscode-inlineChat-regionHighlight);
 }
 
@@ -326,19 +350,42 @@
 	display: flex;
 	align-items: center;
 	justify-content: space-between;
-	padding: 3px 6px 3px 0;
+}
+
+.monaco-editor .inline-chat-newfile-widget .title .detail {
+	margin-left: 4px;
+}
+
+.monaco-editor .inline-chat-newfile-widget .buttonbar-widget {
+	display: flex;
+	margin-left: auto;
+	margin-right: 8px;
+}
+
+.monaco-editor .inline-chat-newfile-widget .buttonbar-widget > .monaco-button {
+	display: inline-flex;
+	white-space: nowrap;
+	margin-left: 4px;
 }
 
 /* gutter decoration */
 
-.monaco-editor .glyph-margin-widgets .cgmr.codicon-inline-chat {
+.monaco-editor .glyph-margin-widgets .cgmr.codicon-inline-chat-opaque,
+.monaco-editor .glyph-margin-widgets .cgmr.codicon-inline-chat-transparent {
 	display: block;
 	cursor: pointer;
-	opacity: 0.5;
 	transition: opacity .2s ease-in-out;
 }
 
-.monaco-editor .glyph-margin-widgets .cgmr.codicon-inline-chat:hover {
-	opacity: 1;
+.monaco-editor .glyph-margin-widgets .cgmr.codicon-inline-chat-opaque {
+	opacity: 0.5;
+}
+
+.monaco-editor .glyph-margin-widgets .cgmr.codicon-inline-chat-transparent {
+	opacity: 0;
 }
 
+.monaco-editor .glyph-margin-widgets .cgmr.codicon-inline-chat-opaque:hover,
+.monaco-editor .glyph-margin-widgets .cgmr.codicon-inline-chat-transparent:hover {
+	opacity: 1;
+}
diff --git a/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChatActions.ts b/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChatActions.ts
index 8b1a757cf56..4d5563f66f2 100644
--- a/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChatActions.ts
+++ b/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChatActions.ts
@@ -10,7 +10,7 @@ import { EditorAction2 } from 'vs/editor/browser/editorExtensions';
 import { EmbeddedCodeEditorWidget, EmbeddedDiffEditorWidget } from 'vs/editor/browser/widget/embeddedCodeEditorWidget';
 import { EditorContextKeys } from 'vs/editor/common/editorContextKeys';
 import { InlineChatController, InlineChatRunOptions } from 'vs/workbench/contrib/inlineChat/browser/inlineChatController';
-import { CTX_INLINE_CHAT_FOCUSED, CTX_INLINE_CHAT_HAS_ACTIVE_REQUEST, CTX_INLINE_CHAT_HAS_PROVIDER, CTX_INLINE_CHAT_INNER_CURSOR_FIRST, CTX_INLINE_CHAT_INNER_CURSOR_LAST, CTX_INLINE_CHAT_EMPTY, CTX_INLINE_CHAT_OUTER_CURSOR_POSITION, CTX_INLINE_CHAT_VISIBLE, MENU_INLINE_CHAT_WIDGET, MENU_INLINE_CHAT_WIDGET_DISCARD, MENU_INLINE_CHAT_WIDGET_STATUS, CTX_INLINE_CHAT_LAST_FEEDBACK, CTX_INLINE_CHAT_EDIT_MODE, EditMode, CTX_INLINE_CHAT_LAST_RESPONSE_TYPE, MENU_INLINE_CHAT_WIDGET_MARKDOWN_MESSAGE, CTX_INLINE_CHAT_MESSAGE_CROP_STATE, CTX_INLINE_CHAT_DOCUMENT_CHANGED, CTX_INLINE_CHAT_DID_EDIT, CTX_INLINE_CHAT_HAS_STASHED_SESSION, MENU_INLINE_CHAT_WIDGET_FEEDBACK, ACTION_ACCEPT_CHANGES, ACTION_REGENERATE_RESPONSE, InlineChatResponseType, CTX_INLINE_CHAT_RESPONSE_TYPES, InlineChateResponseTypes, ACTION_VIEW_IN_CHAT, CTX_INLINE_CHAT_USER_DID_EDIT, MENU_INLINE_CHAT_WIDGET_TOGGLE, CTX_INLINE_CHAT_INNER_CURSOR_START, CTX_INLINE_CHAT_INNER_CURSOR_END, CTX_INLINE_CHAT_RESPONSE_FOCUSED } from 'vs/workbench/contrib/inlineChat/common/inlineChat';
+import { CTX_INLINE_CHAT_FOCUSED, CTX_INLINE_CHAT_HAS_ACTIVE_REQUEST, CTX_INLINE_CHAT_HAS_PROVIDER, CTX_INLINE_CHAT_INNER_CURSOR_FIRST, CTX_INLINE_CHAT_INNER_CURSOR_LAST, CTX_INLINE_CHAT_EMPTY, CTX_INLINE_CHAT_OUTER_CURSOR_POSITION, CTX_INLINE_CHAT_VISIBLE, MENU_INLINE_CHAT_WIDGET, MENU_INLINE_CHAT_WIDGET_DISCARD, MENU_INLINE_CHAT_WIDGET_STATUS, CTX_INLINE_CHAT_LAST_FEEDBACK, CTX_INLINE_CHAT_EDIT_MODE, EditMode, CTX_INLINE_CHAT_LAST_RESPONSE_TYPE, MENU_INLINE_CHAT_WIDGET_MARKDOWN_MESSAGE, CTX_INLINE_CHAT_MESSAGE_CROP_STATE, CTX_INLINE_CHAT_DOCUMENT_CHANGED, CTX_INLINE_CHAT_DID_EDIT, CTX_INLINE_CHAT_HAS_STASHED_SESSION, MENU_INLINE_CHAT_WIDGET_FEEDBACK, ACTION_ACCEPT_CHANGES, ACTION_REGENERATE_RESPONSE, InlineChatResponseType, CTX_INLINE_CHAT_RESPONSE_TYPES, InlineChateResponseTypes, ACTION_VIEW_IN_CHAT, CTX_INLINE_CHAT_USER_DID_EDIT, MENU_INLINE_CHAT_WIDGET_TOGGLE, CTX_INLINE_CHAT_INNER_CURSOR_START, CTX_INLINE_CHAT_INNER_CURSOR_END, CTX_INLINE_CHAT_RESPONSE_FOCUSED, CTX_INLINE_CHAT_SUPPORT_ISSUE_REPORTING, InlineChatResponseFeedbackKind } from 'vs/workbench/contrib/inlineChat/common/inlineChat';
 import { localize } from 'vs/nls';
 import { IAction2Options, MenuId, MenuRegistry } from 'vs/platform/actions/common/actions';
 import { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';
@@ -29,9 +29,11 @@ import { Disposable } from 'vs/base/common/lifecycle';
 import { CommandsRegistry } from 'vs/platform/commands/common/commands';
 import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
 import { AccessibilityHelpAction } from 'vs/workbench/contrib/accessibility/browser/accessibleViewActions';
+import { registerIcon } from 'vs/platform/theme/common/iconRegistry';
 
 CommandsRegistry.registerCommandAlias('interactiveEditor.start', 'inlineChat.start');
 export const LOCALIZED_START_INLINE_CHAT_STRING = localize('run', 'Start Inline Chat');
+const START_INLINE_CHAT = registerIcon('start-inline-chat', Codicon.sparkle, localize('startInlineChat', 'Icon which spawns the inline chat from the editor toolbar.'));
 
 export class StartSessionAction extends EditorAction2 {
 
@@ -41,12 +43,19 @@ export class StartSessionAction extends EditorAction2 {
 			title: { value: LOCALIZED_START_INLINE_CHAT_STRING, original: 'Start Inline Chat' },
 			category: AbstractInlineChatAction.category,
 			f1: true,
-			precondition: ContextKeyExpr.and(CTX_INLINE_CHAT_HAS_PROVIDER, EditorContextKeys.writable),
+			precondition: ContextKeyExpr.and(CTX_INLINE_CHAT_HAS_PROVIDER, CTX_INLINE_CHAT_VISIBLE.toNegated(), EditorContextKeys.focus),
 			keybinding: {
 				weight: KeybindingWeight.WorkbenchContrib,
 				primary: KeyMod.CtrlCmd | KeyCode.KeyI,
 				secondary: [KeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyCode.KeyI)],
-			}
+			},
+			icon: START_INLINE_CHAT,
+			menu: [{
+				id: MenuId.EditorTitle,
+				when: ContextKeyExpr.and(CTX_INLINE_CHAT_HAS_PROVIDER, CTX_INLINE_CHAT_VISIBLE.toNegated(), EditorContextKeys.focus),
+				group: 'navigation',
+				order: -1000000, // at the very front
+			}],
 		});
 	}
 
@@ -408,7 +417,7 @@ export class FeebackHelpfulCommand extends AbstractInlineChatAction {
 	}
 
 	override runInlineChatCommand(_accessor: ServicesAccessor, ctrl: InlineChatController): void {
-		ctrl.feedbackLast(true);
+		ctrl.feedbackLast(InlineChatResponseFeedbackKind.Helpful);
 	}
 }
 
@@ -430,7 +439,28 @@ export class FeebackUnhelpfulCommand extends AbstractInlineChatAction {
 	}
 
 	override runInlineChatCommand(_accessor: ServicesAccessor, ctrl: InlineChatController): void {
-		ctrl.feedbackLast(false);
+		ctrl.feedbackLast(InlineChatResponseFeedbackKind.Unhelpful);
+	}
+}
+
+export class ReportIssueForBugCommand extends AbstractInlineChatAction {
+	constructor() {
+		super({
+			id: 'inlineChat.reportIssueForBug',
+			title: localize('feedback.reportIssueForBug', 'Report Issue'),
+			icon: Codicon.report,
+			precondition: CTX_INLINE_CHAT_VISIBLE,
+			menu: {
+				id: MENU_INLINE_CHAT_WIDGET_FEEDBACK,
+				when: ContextKeyExpr.and(CTX_INLINE_CHAT_SUPPORT_ISSUE_REPORTING, CTX_INLINE_CHAT_LAST_RESPONSE_TYPE.notEqualsTo(undefined)),
+				group: '2_feedback',
+				order: 3
+			}
+		});
+	}
+
+	override runInlineChatCommand(_accessor: ServicesAccessor, ctrl: InlineChatController): void {
+		ctrl.feedbackLast(InlineChatResponseFeedbackKind.Bug);
 	}
 }
 
diff --git a/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChatController.ts b/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChatController.ts
index ac8682ce0ef..7f2f70def69 100644
--- a/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChatController.ts
+++ b/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChatController.ts
@@ -4,7 +4,7 @@
  *--------------------------------------------------------------------------------------------*/
 
 import * as aria from 'vs/base/browser/ui/aria/aria';
-import { Barrier, Queue, raceCancellationError } from 'vs/base/common/async';
+import { Barrier, Queue, raceCancellation, raceCancellationError } from 'vs/base/common/async';
 import { CancellationTokenSource } from 'vs/base/common/cancellation';
 import { toErrorMessage } from 'vs/base/common/errorMessage';
 import { Emitter, Event } from 'vs/base/common/event';
@@ -24,15 +24,15 @@ import { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/c
 import { IDialogService } from 'vs/platform/dialogs/common/dialogs';
 import { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';
 import { ILogService } from 'vs/platform/log/common/log';
-import { EditResponse, EmptyResponse, ErrorResponse, ExpansionState, IInlineChatSessionService, MarkdownResponse, Session, SessionExchange, SessionPrompt } from 'vs/workbench/contrib/inlineChat/browser/inlineChatSession';
+import { ReplyResponse, EmptyResponse, ErrorResponse, ExpansionState, IInlineChatSessionService, Session, SessionExchange, SessionPrompt } from 'vs/workbench/contrib/inlineChat/browser/inlineChatSession';
 import { EditModeStrategy, LivePreviewStrategy, LiveStrategy, PreviewStrategy, ProgressingEditsOptions } from 'vs/workbench/contrib/inlineChat/browser/inlineChatStrategies';
-import { InlineChatZoneWidget } from 'vs/workbench/contrib/inlineChat/browser/inlineChatWidget';
-import { CTX_INLINE_CHAT_HAS_ACTIVE_REQUEST, CTX_INLINE_CHAT_LAST_FEEDBACK, IInlineChatRequest, IInlineChatResponse, INLINE_CHAT_ID, EditMode, InlineChatResponseFeedbackKind, CTX_INLINE_CHAT_LAST_RESPONSE_TYPE, InlineChatResponseType, CTX_INLINE_CHAT_DID_EDIT, CTX_INLINE_CHAT_HAS_STASHED_SESSION, InlineChateResponseTypes, CTX_INLINE_CHAT_RESPONSE_TYPES, CTX_INLINE_CHAT_USER_DID_EDIT, IInlineChatProgressItem } from 'vs/workbench/contrib/inlineChat/common/inlineChat';
+import { IInlineChatMessageAppender, InlineChatZoneWidget } from 'vs/workbench/contrib/inlineChat/browser/inlineChatWidget';
+import { CTX_INLINE_CHAT_HAS_ACTIVE_REQUEST, CTX_INLINE_CHAT_LAST_FEEDBACK, IInlineChatRequest, IInlineChatResponse, INLINE_CHAT_ID, EditMode, InlineChatResponseFeedbackKind, CTX_INLINE_CHAT_LAST_RESPONSE_TYPE, InlineChatResponseType, CTX_INLINE_CHAT_DID_EDIT, CTX_INLINE_CHAT_HAS_STASHED_SESSION, InlineChateResponseTypes, CTX_INLINE_CHAT_RESPONSE_TYPES, CTX_INLINE_CHAT_USER_DID_EDIT, IInlineChatProgressItem, CTX_INLINE_CHAT_SUPPORT_ISSUE_REPORTING } from 'vs/workbench/contrib/inlineChat/common/inlineChat';
 import { IChatAccessibilityService, IChatWidgetService } from 'vs/workbench/contrib/chat/browser/chat';
 import { IChatService } from 'vs/workbench/contrib/chat/common/chatService';
 import { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
 import { Lazy } from 'vs/base/common/lazy';
-import { AsyncProgress } from 'vs/platform/progress/common/progress';
+import { Progress } from 'vs/platform/progress/common/progress';
 import { generateUuid } from 'vs/base/common/uuid';
 import { TextEdit } from 'vs/editor/common/languages';
 import { ISelection, Selection } from 'vs/editor/common/core/selection';
@@ -44,6 +44,7 @@ import { IModelDeltaDecoration } from 'vs/editor/common/model';
 import { IChatAgentService } from 'vs/workbench/contrib/chat/common/chatAgents';
 import { chatAgentLeader, chatSubcommandLeader } from 'vs/workbench/contrib/chat/common/chatParserTypes';
 import { renderMarkdownAsPlaintext } from 'vs/base/browser/markdownRenderer';
+import { IBulkEditService } from 'vs/editor/browser/services/bulkEditService';
 
 export const enum State {
 	CREATE_SESSION = 'CREATE_SESSION',
@@ -115,9 +116,13 @@ export class InlineChatController implements IEditorContribution {
 	private readonly _ctxDidEdit: IContextKey<boolean>;
 	private readonly _ctxUserDidEdit: IContextKey<boolean>;
 	private readonly _ctxLastFeedbackKind: IContextKey<'helpful' | 'unhelpful' | ''>;
+	private readonly _ctxSupportIssueReporting: IContextKey<boolean>;
 
 	private _messages = this._store.add(new Emitter<Message>());
 
+	private readonly _onWillStartSession = this._store.add(new Emitter<void>());
+	readonly onWillStartSession = this._onWillStartSession.event;
+
 	readonly onDidAcceptInput = Event.filter(this._messages.event, m => m === Message.ACCEPT_INPUT, this._store);
 	readonly onDidCancelInput = Event.filter(this._messages.event, m => m === Message.CANCEL_INPUT || m === Message.CANCEL_SESSION, this._store);
 
@@ -140,6 +145,7 @@ export class InlineChatController implements IEditorContribution {
 		@IKeybindingService private readonly _keybindingService: IKeybindingService,
 		@IChatAccessibilityService private readonly _chatAccessibilityService: IChatAccessibilityService,
 		@IChatAgentService private readonly _chatAgentService: IChatAgentService,
+		@IBulkEditService private readonly _bulkEditService: IBulkEditService,
 	) {
 		this._ctxHasActiveRequest = CTX_INLINE_CHAT_HAS_ACTIVE_REQUEST.bindTo(contextKeyService);
 		this._ctxDidEdit = CTX_INLINE_CHAT_DID_EDIT.bindTo(contextKeyService);
@@ -147,6 +153,7 @@ export class InlineChatController implements IEditorContribution {
 		this._ctxResponseTypes = CTX_INLINE_CHAT_RESPONSE_TYPES.bindTo(contextKeyService);
 		this._ctxLastResponseType = CTX_INLINE_CHAT_LAST_RESPONSE_TYPE.bindTo(contextKeyService);
 		this._ctxLastFeedbackKind = CTX_INLINE_CHAT_LAST_FEEDBACK.bindTo(contextKeyService);
+		this._ctxSupportIssueReporting = CTX_INLINE_CHAT_SUPPORT_ISSUE_REPORTING.bindTo(contextKeyService);
 		this._zone = new Lazy(() => this._store.add(_instaService.createInstance(InlineChatZoneWidget, this._editor)));
 
 		this._store.add(this._editor.onDidChangeModel(async e => {
@@ -218,6 +225,7 @@ export class InlineChatController implements IEditorContribution {
 			if (options.initialSelection) {
 				this._editor.setSelection(options.initialSelection);
 			}
+			this._onWillStartSession.fire();
 			this._currentRun = this._nextState(State.CREATE_SESSION, options);
 			await this._currentRun;
 
@@ -264,7 +272,7 @@ export class InlineChatController implements IEditorContribution {
 			this._zone.value.setContainerMargins();
 		}
 
-		if (this._activeSession && this._activeSession.hasChangedText) {
+		if (this._activeSession && (this._activeSession.hasChangedText || this._activeSession.lastExchange)) {
 			widgetPosition = this._activeSession.wholeRange.value.getStartPosition().delta(-1);
 		}
 		if (this._activeSession) {
@@ -273,8 +281,12 @@ export class InlineChatController implements IEditorContribution {
 		if (this._strategy) {
 			needsMargin = this._strategy.needsMargin();
 		}
-		this._zone.value.setWidgetMargins(widgetPosition, !needsMargin ? 0 : undefined);
-		this._zone.value.show(widgetPosition);
+		if (!this._zone.value.position) {
+			this._zone.value.setWidgetMargins(widgetPosition, !needsMargin ? 0 : undefined);
+			this._zone.value.show(widgetPosition);
+		} else {
+			this._zone.value.updatePositionAndHeight(widgetPosition);
+		}
 	}
 
 	protected async _nextState(state: State, options: InlineChatRunOptions): Promise<void> {
@@ -426,6 +438,9 @@ export class InlineChatController implements IEditorContribution {
 			}
 		}));
 
+		// Update context key
+		this._ctxSupportIssueReporting.set(this._activeSession.provider.supportIssueReporting ?? false);
+
 		if (!this._activeSession.lastExchange) {
 			return State.WAIT_FOR_INPUT;
 		} else if (options.isUnstashed) {
@@ -510,7 +525,7 @@ export class InlineChatController implements IEditorContribution {
 		if (message & Message.RERUN_INPUT && this._activeSession.lastExchange) {
 			const { lastExchange } = this._activeSession;
 			this._activeSession.addInput(lastExchange.prompt.retry());
-			if (lastExchange.response instanceof EditResponse) {
+			if (lastExchange.response instanceof ReplyResponse) {
 				try {
 					this._ignoreModelContentChanged = true;
 					await this._strategy.undoChanges(lastExchange.response.modelAltVersionId);
@@ -591,14 +606,15 @@ export class InlineChatController implements IEditorContribution {
 
 		const modelAltVersionIdNow = this._activeSession.textModelN.getAlternativeVersionId();
 		const progressEdits: TextEdit[][] = [];
-		const markdownContents = new MarkdownString('', { supportThemeIcons: true, supportHtml: true, isTrusted: false });
 
 		const progressiveEditsAvgDuration = new MovingAverage();
 		const progressiveEditsCts = new CancellationTokenSource(requestCts.token);
 		const progressiveEditsClock = StopWatch.create();
 		const progressiveEditsQueue = new Queue();
 
-		const progress = new AsyncProgress<IInlineChatProgressItem>(async data => {
+		let progressiveChatResponse: IInlineChatMessageAppender | undefined;
+
+		const progress = new Progress<IInlineChatProgressItem>(data => {
 			this._log('received chunk', data, request);
 
 			if (requestCts.token.isCancellationRequested) {
@@ -643,21 +659,32 @@ export class InlineChatController implements IEditorContribution {
 				});
 			}
 			if (data.markdownFragment) {
-				markdownContents.appendMarkdown(data.markdownFragment);
-				this._zone.value.widget.updateMarkdownMessage(markdownContents);
+				if (!progressiveChatResponse) {
+					const message = {
+						message: new MarkdownString(data.markdownFragment, { supportThemeIcons: true, supportHtml: true, isTrusted: false }),
+						providerId: this._activeSession!.provider.debugName,
+						requestId: request.requestId,
+					};
+					progressiveChatResponse = this._zone.value.widget.updateChatMessage(message, true);
+				} else {
+					progressiveChatResponse.appendContent(data.markdownFragment);
+				}
 			}
 		});
 
 		let a11yResponse: string | undefined;
 		const a11yVerboseInlineChat = this._configurationService.getValue<boolean>('accessibility.verbosity.inlineChat') === true;
-		this._chatAccessibilityService.acceptRequest();
+		const requestId = this._chatAccessibilityService.acceptRequest();
 
 		const task = this._activeSession.provider.provideResponse(this._activeSession.session, request, progress, requestCts.token);
 		this._log('request started', this._activeSession.provider.debugName, this._activeSession.session, request);
 
-		let response: EditResponse | MarkdownResponse | ErrorResponse | EmptyResponse;
+		let response: ReplyResponse | ErrorResponse | EmptyResponse;
 		let reply: IInlineChatResponse | null | undefined;
 		try {
+			this._zone.value.widget.updateChatMessage(undefined);
+			this._zone.value.widget.updateMarkdownMessage(undefined);
+			this._zone.value.widget.updateFollowUps(undefined);
 			this._zone.value.widget.updateProgress(true);
 			this._zone.value.widget.updateInfo(!this._activeSession.lastExchange ? localize('thinking', "Thinking\u2026") : '');
 			this._ctxHasActiveRequest.set(true);
@@ -667,24 +694,26 @@ export class InlineChatController implements IEditorContribution {
 				// we must wait for all edits that came in via progress to complete
 				await Event.toPromise(progressiveEditsQueue.onDrained);
 			}
-			await progress.drain();
-
-			if (reply?.type === InlineChatResponseType.Message) {
-				markdownContents.appendMarkdown(reply.message.value);
-				response = new MarkdownResponse(this._activeSession.textModelN.uri, reply, markdownContents);
-				a11yResponse = renderMarkdownAsPlaintext(markdownContents);
-			} else if (reply) {
-				const editResponse = new EditResponse(this._activeSession.textModelN.uri, modelAltVersionIdNow, reply, progressEdits);
-				for (let i = progressEdits.length; i < editResponse.allLocalEdits.length; i++) {
-					await this._makeChanges(editResponse.allLocalEdits[i], undefined);
-				}
-				response = editResponse;
-				a11yResponse = this._strategy.checkChanges(editResponse) && a11yVerboseInlineChat
-					? localize('editResponseMessage', "Review proposed changes in the diff editor.")
-					: '';
-			} else {
+			if (progressiveChatResponse) {
+				progressiveChatResponse.cancel();
+			}
+
+			if (!reply) {
 				response = new EmptyResponse();
 				a11yResponse = localize('empty', "No results, please refine your input and try again");
+			} else {
+				const markdownContents = reply.message ?? new MarkdownString('', { supportThemeIcons: true, supportHtml: true, isTrusted: false });
+				const replyResponse = response = this._instaService.createInstance(ReplyResponse, reply, markdownContents, this._activeSession.textModelN.uri, modelAltVersionIdNow, progressEdits, request.requestId);
+
+				for (let i = progressEdits.length; i < replyResponse.allLocalEdits.length; i++) {
+					await this._makeChanges(replyResponse.allLocalEdits[i], undefined);
+				}
+
+				const a11yMessageResponse = renderMarkdownAsPlaintext(replyResponse.mdContent);
+
+				a11yResponse = a11yVerboseInlineChat
+					? a11yMessageResponse ? localize('editResponseMessage2', "{0}, also review proposed changes in the diff editor.", a11yMessageResponse) : localize('editResponseMessage', "Review proposed changes in the diff editor.")
+					: a11yMessageResponse;
 			}
 
 		} catch (e) {
@@ -697,7 +726,7 @@ export class InlineChatController implements IEditorContribution {
 			this._zone.value.widget.updateInfo('');
 			this._zone.value.widget.updateToolbar(true);
 			this._log('request took', requestClock.elapsed(), this._activeSession.provider.debugName);
-			this._chatAccessibilityService.acceptResponse(a11yResponse);
+			this._chatAccessibilityService.acceptResponse(a11yResponse, requestId);
 		}
 
 		progressiveEditsCts.dispose(true);
@@ -705,7 +734,7 @@ export class InlineChatController implements IEditorContribution {
 		msgListener.dispose();
 		typeListener.dispose();
 
-		if (request.live && !(response instanceof EditResponse)) {
+		if (request.live && !(response instanceof ReplyResponse)) {
 			this._strategy?.undoChanges(modelAltVersionIdNow);
 		}
 
@@ -722,19 +751,15 @@ export class InlineChatController implements IEditorContribution {
 		}
 	}
 
-	private async [State.APPLY_RESPONSE](): Promise<State.SHOW_RESPONSE | State.CANCEL> {
+	private async[State.APPLY_RESPONSE](): Promise<State.SHOW_RESPONSE | State.CANCEL> {
 		assertType(this._activeSession);
 		assertType(this._strategy);
 
 		const { response } = this._activeSession.lastExchange!;
-		if (response instanceof EditResponse) {
-			// edit response -> complex...
-			this._zone.value.widget.updateMarkdownMessage(undefined);
-
-			const canContinue = this._strategy.checkChanges(response);
-			if (!canContinue) {
-				return State.CANCEL;
-			}
+		if (response instanceof ReplyResponse && response.workspaceEdit) {
+			// this reply cannot be applied in the normal inline chat UI and needs to be handled off to workspace edit
+			this._bulkEditService.apply(response.workspaceEdit, { showPreview: true });
+			return State.CANCEL;
 		}
 		return State.SHOW_RESPONSE;
 	}
@@ -768,22 +793,20 @@ export class InlineChatController implements IEditorContribution {
 		}
 	}
 
-	private async [State.SHOW_RESPONSE](): Promise<State.WAIT_FOR_INPUT | State.CANCEL> {
+	private async[State.SHOW_RESPONSE](): Promise<State.WAIT_FOR_INPUT | State.CANCEL> {
 		assertType(this._activeSession);
 		assertType(this._strategy);
 
 		const { response } = this._activeSession.lastExchange!;
 
-		this._ctxLastResponseType.set(response instanceof EditResponse || response instanceof MarkdownResponse
-			? response.raw.type
-			: undefined);
+		this._ctxLastResponseType.set(response instanceof ReplyResponse ? response.raw.type : undefined);
 
 		let responseTypes: InlineChateResponseTypes | undefined;
 		for (const { response } of this._activeSession.exchanges) {
 
-			const thisType = response instanceof MarkdownResponse
-				? InlineChateResponseTypes.OnlyMessages : response instanceof EditResponse
-					? InlineChateResponseTypes.OnlyEdits : undefined;
+			const thisType = response instanceof ReplyResponse
+				? response.responseType
+				: undefined;
 
 			if (responseTypes === undefined) {
 				responseTypes = thisType;
@@ -807,36 +830,51 @@ export class InlineChatController implements IEditorContribution {
 				this._zone.value.widget.updateStatus(response.message, { classes: ['error'] });
 			}
 
-		} else if (response instanceof MarkdownResponse) {
-			// clear status, show MD message
-
+		} else if (response instanceof ReplyResponse) {
+			// real response -> complex...
 			this._zone.value.widget.updateStatus('');
-			this._zone.value.widget.updateMarkdownMessage(response.mdContent);
-			this._zone.value.widget.updateToolbar(true);
-			this._activeSession.lastExpansionState = this._zone.value.widget.expansionState;
+			const message = { message: response.mdContent, providerId: this._activeSession.provider.debugName, requestId: response.requestId };
+			this._zone.value.widget.updateChatMessage(message);
 
-		} else if (response instanceof EditResponse) {
-			// edit response -> complex...
-			this._zone.value.widget.updateMarkdownMessage(undefined);
+			//this._zone.value.widget.updateMarkdownMessage(response.mdContent);
+			this._activeSession.lastExpansionState = this._zone.value.widget.expansionState;
 			this._zone.value.widget.updateToolbar(true);
 
-			const canContinue = this._strategy.checkChanges(response);
-			if (!canContinue) {
-				return State.CANCEL;
-			}
 			await this._strategy.renderChanges(response);
+
+			if (this._activeSession.provider.provideFollowups) {
+				const followupCts = new CancellationTokenSource();
+				const msgListener = Event.once(this._messages.event)(() => {
+					followupCts.cancel();
+				});
+				const followupTask = this._activeSession.provider.provideFollowups(this._activeSession.session, response.raw, followupCts.token);
+				this._log('followup request started', this._activeSession.provider.debugName, this._activeSession.session, response.raw);
+				raceCancellation(Promise.resolve(followupTask), followupCts.token).then(followupReply => {
+					if (followupReply && this._activeSession) {
+						this._log('followup request received', this._activeSession.provider.debugName, this._activeSession.session, followupReply);
+						this._zone.value.widget.updateFollowUps(followupReply, followup => {
+							this.updateInput(followup.message);
+							this.acceptInput();
+						});
+					}
+				}).finally(() => {
+					msgListener.dispose();
+					followupCts.dispose();
+				});
+			}
 		}
 		this._showWidget(false);
 
 		return State.WAIT_FOR_INPUT;
 	}
 
-	private async [State.PAUSE]() {
+	private async[State.PAUSE]() {
 
 		this._ctxDidEdit.reset();
 		this._ctxUserDidEdit.reset();
 		this._ctxLastResponseType.reset();
 		this._ctxLastFeedbackKind.reset();
+		this._ctxSupportIssueReporting.reset();
 
 		this._zone.value.hide();
 
@@ -851,7 +889,7 @@ export class InlineChatController implements IEditorContribution {
 		this._activeSession = undefined;
 	}
 
-	private async [State.ACCEPT]() {
+	private async[State.ACCEPT]() {
 		assertType(this._activeSession);
 		assertType(this._strategy);
 		this._sessionStore.clear();
@@ -869,7 +907,7 @@ export class InlineChatController implements IEditorContribution {
 		this[State.PAUSE]();
 	}
 
-	private async [State.CANCEL]() {
+	private async[State.CANCEL]() {
 		assertType(this._activeSession);
 		assertType(this._strategy);
 		this._sessionStore.clear();
@@ -895,10 +933,6 @@ export class InlineChatController implements IEditorContribution {
 		}
 	}
 
-	private static isEditOrMarkdownResponse(response: EditResponse | MarkdownResponse | EmptyResponse | ErrorResponse | undefined): response is EditResponse | MarkdownResponse {
-		return response instanceof EditResponse || response instanceof MarkdownResponse;
-	}
-
 	// ---- controller API
 
 	acceptInput(): void {
@@ -956,7 +990,7 @@ export class InlineChatController implements IEditorContribution {
 	}
 
 	viewInChat() {
-		if (this._activeSession?.lastExchange?.response instanceof MarkdownResponse) {
+		if (this._activeSession?.lastExchange?.response instanceof ReplyResponse) {
 			this._instaService.invokeFunction(showMessageResponse, this._activeSession.lastExchange.prompt.value, this._activeSession.lastExchange.response.mdContent.value);
 		}
 	}
@@ -969,11 +1003,19 @@ export class InlineChatController implements IEditorContribution {
 		}
 	}
 
-	feedbackLast(helpful: boolean) {
-		if (this._activeSession?.lastExchange && InlineChatController.isEditOrMarkdownResponse(this._activeSession.lastExchange.response)) {
-			const kind = helpful ? InlineChatResponseFeedbackKind.Helpful : InlineChatResponseFeedbackKind.Unhelpful;
+	feedbackLast(kind: InlineChatResponseFeedbackKind) {
+		if (this._activeSession?.lastExchange && this._activeSession.lastExchange.response instanceof ReplyResponse) {
 			this._activeSession.provider.handleInlineChatResponseFeedback?.(this._activeSession.session, this._activeSession.lastExchange.response.raw, kind);
-			this._ctxLastFeedbackKind.set(helpful ? 'helpful' : 'unhelpful');
+			switch (kind) {
+				case InlineChatResponseFeedbackKind.Helpful:
+					this._ctxLastFeedbackKind.set('helpful');
+					break;
+				case InlineChatResponseFeedbackKind.Unhelpful:
+					this._ctxLastFeedbackKind.set('unhelpful');
+					break;
+				default:
+					break;
+			}
 			this._zone.value.widget.updateStatus('Thank you for your feedback!', { resetAfter: 1250 });
 		}
 	}
@@ -985,7 +1027,7 @@ export class InlineChatController implements IEditorContribution {
 	}
 
 	acceptSession(): void {
-		if (this._activeSession?.lastExchange && InlineChatController.isEditOrMarkdownResponse(this._activeSession.lastExchange.response)) {
+		if (this._activeSession?.lastExchange && this._activeSession.lastExchange.response instanceof ReplyResponse) {
 			this._activeSession.provider.handleInlineChatResponseFeedback?.(this._activeSession.session, this._activeSession.lastExchange.response.raw, InlineChatResponseFeedbackKind.Accepted);
 		}
 		this._messages.fire(Message.ACCEPT_SESSION);
@@ -999,7 +1041,7 @@ export class InlineChatController implements IEditorContribution {
 			const diff = await this._editorWorkerService.computeDiff(this._activeSession.textModel0.uri, this._activeSession.textModelN.uri, { ignoreTrimWhitespace: false, maxComputationTimeMs: 5000, computeMoves: false }, 'advanced');
 			result = this._activeSession.asChangedText(diff?.changes ?? []);
 
-			if (this._activeSession.lastExchange && InlineChatController.isEditOrMarkdownResponse(this._activeSession.lastExchange.response)) {
+			if (this._activeSession.lastExchange && this._activeSession.lastExchange.response instanceof ReplyResponse) {
 				this._activeSession.provider.handleInlineChatResponseFeedback?.(this._activeSession.session, this._activeSession.lastExchange.response.raw, InlineChatResponseFeedbackKind.Undone);
 			}
 		}
diff --git a/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChatDecorations.ts b/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChatDecorations.ts
index 53ecd4bd9ae..b69a5c233bd 100644
--- a/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChatDecorations.ts
+++ b/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChatDecorations.ts
@@ -7,7 +7,7 @@ import { Codicon } from 'vs/base/common/codicons';
 import { ThemeIcon } from 'vs/base/common/themables';
 import { IActiveCodeEditor, ICodeEditor, IEditorMouseEvent } from 'vs/editor/browser/editorBrowser';
 import { IEditorContribution } from 'vs/editor/common/editorCommon';
-import { GlyphMarginLane, IModelDecorationsChangeAccessor, TrackedRangeStickiness } from 'vs/editor/common/model';
+import { GlyphMarginLane, IModelDecorationOptions, IModelDecorationsChangeAccessor, TrackedRangeStickiness } from 'vs/editor/common/model';
 import { ModelDecorationOptions } from 'vs/editor/common/model/textModel';
 import { localize } from 'vs/nls';
 import { registerIcon } from 'vs/platform/theme/common/iconRegistry';
@@ -16,7 +16,7 @@ import { IConfigurationService, IConfigurationChangeEvent } from 'vs/platform/co
 import { DisposableStore, Disposable } from 'vs/base/common/lifecycle';
 import { GutterActionsRegistry } from 'vs/workbench/contrib/codeEditor/browser/editorLineNumberMenu';
 import { Action } from 'vs/base/common/actions';
-import { IInlineChatService } from 'vs/workbench/contrib/inlineChat/common/inlineChat';
+import { IInlineChatService, ShowGutterIcon } from 'vs/workbench/contrib/inlineChat/common/inlineChat';
 import { RunOnceScheduler } from 'vs/base/common/async';
 import { Iterable } from 'vs/base/common/iterator';
 import { Range } from 'vs/editor/common/core/range';
@@ -24,61 +24,112 @@ import { IInlineChatSessionService } from 'vs/workbench/contrib/inlineChat/brows
 import { MarkdownString } from 'vs/base/common/htmlContent';
 import { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
 import { LOCALIZED_START_INLINE_CHAT_STRING } from 'vs/workbench/contrib/inlineChat/browser/inlineChatActions';
+import { IBreakpoint, IDebugService } from 'vs/workbench/contrib/debug/common/debug';
+import { IPreferencesService } from 'vs/workbench/services/preferences/common/preferences';
+import { URI } from 'vs/base/common/uri';
 
-const GUTTER_INLINE_CHAT_ICON = registerIcon('inline-chat', Codicon.sparkle, localize('startInlineChatIcon', 'Icon which spawns the inline chat from the gutter'));
+const GUTTER_INLINE_CHAT_OPAQUE_ICON = registerIcon('inline-chat-opaque', Codicon.sparkle, localize('startInlineChatOpaqueIcon', 'Icon which spawns the inline chat from the gutter. It is half opaque by default and becomes completely opaque on hover.'));
+const GUTTER_INLINE_CHAT_TRANSPARENT_ICON = registerIcon('inline-chat-transparent', Codicon.sparkle, localize('startInlineChatTransparentIcon', 'Icon which spawns the inline chat from the gutter. It is transparent by default and becomes opaque on hover.'));
 
 export class InlineChatDecorationsContribution extends Disposable implements IEditorContribution {
 
+	private _currentBreakpoints: readonly IBreakpoint[] = [];
 	private _gutterDecorationID: string | undefined;
+	private _inlineChatKeybinding: string | undefined;
+	private _hasInlineChatSession: boolean = false;
 	private readonly _localToDispose = new DisposableStore();
-	private readonly _gutterDecoration: ModelDecorationOptions;
+	private readonly _gutterDecorationOpaque: IModelDecorationOptions;
+	private readonly _gutterDecorationTransparent: IModelDecorationOptions;
 
 	public static readonly GUTTER_SETTING_ID = 'inlineChat.showGutterIcon';
-	private static readonly GUTTER_ICON_CLASSNAME = 'codicon-inline-chat';
+	private static readonly GUTTER_ICON_OPAQUE_CLASSNAME = 'codicon-inline-chat-opaque';
+	private static readonly GUTTER_ICON_TRANSPARENT_CLASSNAME = 'codicon-inline-chat-transparent';
 
 	constructor(
 		private readonly _editor: ICodeEditor,
 		@IInlineChatService private readonly _inlineChatService: IInlineChatService,
 		@IInlineChatSessionService private readonly _inlineChatSessionService: IInlineChatSessionService,
 		@IConfigurationService private readonly _configurationService: IConfigurationService,
-		@IKeybindingService readonly _keybindingService: IKeybindingService,
+		@IKeybindingService private readonly _keybindingService: IKeybindingService,
+		@IDebugService private readonly _debugService: IDebugService
 	) {
 		super();
-		const keybindings = _keybindingService.lookupKeybinding('inlineChat.start')?.getLabel();
-		this._gutterDecoration = ModelDecorationOptions.register({
-			description: 'inline-chat-decoration',
-			glyphMarginClassName: ThemeIcon.asClassName(GUTTER_INLINE_CHAT_ICON),
-			glyphMarginHoverMessage: new MarkdownString(LOCALIZED_START_INLINE_CHAT_STRING + (keybindings ? ` [${keybindings}]` : '')),
-			glyphMargin: { position: GlyphMarginLane.Left },
-			stickiness: TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,
-		});
+		this._gutterDecorationTransparent = this._registerGutterDecoration(true);
+		this._gutterDecorationOpaque = this._registerGutterDecoration(false);
 		this._register(this._configurationService.onDidChangeConfiguration((e: IConfigurationChangeEvent) => {
 			if (!e.affectsConfiguration(InlineChatDecorationsContribution.GUTTER_SETTING_ID)) {
 				return;
 			}
 			this._onEnablementOrModelChanged();
 		}));
+		this._register(this._inlineChatSessionService.onWillStartSession((e) => {
+			if (e === this._editor) {
+				this._hasInlineChatSession = true;
+				this._onEnablementOrModelChanged();
+			}
+		}));
+		this._register(this._inlineChatSessionService.onDidEndSession((e) => {
+			if (e === this._editor) {
+				this._hasInlineChatSession = false;
+				this._onEnablementOrModelChanged();
+			}
+		}));
 		this._register(this._inlineChatService.onDidChangeProviders(() => this._onEnablementOrModelChanged()));
 		this._register(this._editor.onDidChangeModel(() => this._onEnablementOrModelChanged()));
+		this._register(this._keybindingService.onDidUpdateKeybindings(() => {
+			this._updateDecorationHover();
+			this._onEnablementOrModelChanged();
+		}));
+		this._updateDecorationHover();
 		this._onEnablementOrModelChanged();
 	}
 
+	private _registerGutterDecoration(isTransparent: boolean): ModelDecorationOptions {
+		return ModelDecorationOptions.register({
+			description: 'inline-chat-decoration',
+			glyphMarginClassName: ThemeIcon.asClassName(isTransparent ? GUTTER_INLINE_CHAT_TRANSPARENT_ICON : GUTTER_INLINE_CHAT_OPAQUE_ICON),
+			glyphMargin: { position: GlyphMarginLane.Left },
+			stickiness: TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,
+		});
+	}
+
+	private _updateDecorationHover(): void {
+		const keybinding = this._keybindingService.lookupKeybinding('inlineChat.start')?.getLabel() ?? undefined;
+		if (this._inlineChatKeybinding === keybinding) {
+			return;
+		}
+		this._inlineChatKeybinding = keybinding;
+		const hoverMessage = new MarkdownString(keybinding ? localize('runWithKeybinding', 'Start Inline Chat [{0}]', keybinding) : LOCALIZED_START_INLINE_CHAT_STRING);
+		this._gutterDecorationTransparent.glyphMarginHoverMessage = hoverMessage;
+		this._gutterDecorationOpaque.glyphMarginHoverMessage = hoverMessage;
+	}
+
+	private _updateCurrentBreakpoints(uri: URI) {
+		this._currentBreakpoints = this._debugService.getModel().getBreakpoints({ uri });
+	}
+
 	private _onEnablementOrModelChanged(): void {
 		// cancels the scheduler, removes editor listeners / removes decoration
 		this._localToDispose.clear();
-		if (!this._editor.hasModel() || !this._isSettingEnabled() || !this._hasProvider()) {
+		if (!this._editor.hasModel() || this._hasInlineChatSession || this._showGutterIconMode() === ShowGutterIcon.Never || !this._hasProvider()) {
 			return;
 		}
 		const editor = this._editor;
 		const decorationUpdateScheduler = new RunOnceScheduler(() => this._onSelectionOrContentChanged(editor), 100);
 		this._localToDispose.add(decorationUpdateScheduler);
+		this._localToDispose.add(this._debugService.getModel().onDidChangeBreakpoints(() => {
+			this._updateCurrentBreakpoints(editor.getModel().uri);
+			decorationUpdateScheduler.schedule();
+		}));
 		this._localToDispose.add(this._editor.onDidChangeCursorSelection(() => decorationUpdateScheduler.schedule()));
 		this._localToDispose.add(this._editor.onDidChangeModelContent(() => decorationUpdateScheduler.schedule()));
-		const onInlineChatSessionChanged = (e: ICodeEditor) => (e === editor) && decorationUpdateScheduler.schedule();
-		this._localToDispose.add(this._inlineChatSessionService.onWillStartSession(onInlineChatSessionChanged));
-		this._localToDispose.add(this._inlineChatSessionService.onDidEndSession(onInlineChatSessionChanged));
 		this._localToDispose.add(this._editor.onMouseDown(async (e: IEditorMouseEvent) => {
-			if (!e.target.element?.classList.contains(InlineChatDecorationsContribution.GUTTER_ICON_CLASSNAME)) {
+			const showGutterIconMode = this._showGutterIconMode();
+			const gutterDecorationClassName = showGutterIconMode === ShowGutterIcon.Always ?
+				InlineChatDecorationsContribution.GUTTER_ICON_OPAQUE_CLASSNAME :
+				(showGutterIconMode === ShowGutterIcon.MouseOver ?
+					InlineChatDecorationsContribution.GUTTER_ICON_TRANSPARENT_CLASSNAME : undefined);
+			if (!gutterDecorationClassName || !e.target.element?.classList.contains(gutterDecorationClassName)) {
 				return;
 			}
 			InlineChatController.get(this._editor)?.run();
@@ -90,20 +141,41 @@ export class InlineChatDecorationsContribution extends Disposable implements IEd
 				}
 			}
 		});
+		this._updateCurrentBreakpoints(editor.getModel().uri);
 		decorationUpdateScheduler.schedule();
 	}
 
 	private _onSelectionOrContentChanged(editor: IActiveCodeEditor): void {
 		const selection = editor.getSelection();
-		const isInlineChatVisible = this._inlineChatSessionService.getSession(editor, editor.getModel().uri);
-		const isEnabled = selection.isEmpty() && /^\s*$/g.test(editor.getModel().getLineContent(selection.startLineNumber)) && !isInlineChatVisible;
+		const startLineNumber = selection.startLineNumber;
+		const model = editor.getModel();
+
+		let isEnabled = false;
+		const hasBreakpoint = this._currentBreakpoints.some(bp => bp.lineNumber === startLineNumber);
+		if (!hasBreakpoint) {
+			const selectionIsEmpty = selection.isEmpty();
+			if (selectionIsEmpty) {
+				if (/^\s*$/g.test(model.getLineContent(startLineNumber))) {
+					isEnabled = true;
+				}
+			} else {
+				const startPosition = selection.getStartPosition();
+				const endPosition = selection.getEndPosition();
+				const startWord = model.getWordAtPosition(startPosition);
+				const endWord = model.getWordAtPosition(endPosition);
+				const isFirstWordCoveredOrNull = !!startWord ? startPosition.column <= startWord.startColumn : true;
+				const isLastWordCoveredOrNull = !!endWord ? endPosition.column >= endWord.endColumn : true;
+				isEnabled = isFirstWordCoveredOrNull && isLastWordCoveredOrNull;
+			}
+		}
+
 		if (isEnabled) {
 			if (this._gutterDecorationID === undefined) {
-				this._addGutterDecoration(selection.startLineNumber);
+				this._addGutterDecoration(startLineNumber);
 			} else {
-				const decorationRange = editor.getModel().getDecorationRange(this._gutterDecorationID);
-				if (decorationRange?.startLineNumber !== selection.startLineNumber) {
-					this._updateGutterDecoration(this._gutterDecorationID, selection.startLineNumber);
+				const decorationRange = model.getDecorationRange(this._gutterDecorationID);
+				if (decorationRange?.startLineNumber !== startLineNumber) {
+					this._updateGutterDecoration(this._gutterDecorationID, startLineNumber);
 				}
 			}
 		} else if (this._gutterDecorationID) {
@@ -111,8 +183,8 @@ export class InlineChatDecorationsContribution extends Disposable implements IEd
 		}
 	}
 
-	private _isSettingEnabled(): boolean {
-		return this._configurationService.getValue<boolean>(InlineChatDecorationsContribution.GUTTER_SETTING_ID);
+	private _showGutterIconMode(): ShowGutterIcon {
+		return this._configurationService.getValue<ShowGutterIcon>(InlineChatDecorationsContribution.GUTTER_SETTING_ID);
 	}
 
 	private _hasProvider(): boolean {
@@ -121,7 +193,11 @@ export class InlineChatDecorationsContribution extends Disposable implements IEd
 
 	private _addGutterDecoration(lineNumber: number) {
 		this._editor.changeDecorations((accessor: IModelDecorationsChangeAccessor) => {
-			this._gutterDecorationID = accessor.addDecoration(new Range(lineNumber, 0, lineNumber, 0), this._gutterDecoration);
+			const showGutterIconMode = this._showGutterIconMode();
+			if (showGutterIconMode === ShowGutterIcon.Never) {
+				return;
+			}
+			this._gutterDecorationID = accessor.addDecoration(new Range(lineNumber, 0, lineNumber, 0), showGutterIconMode === ShowGutterIcon.Always ? this._gutterDecorationOpaque : this._gutterDecorationTransparent);
 		});
 	}
 
@@ -145,12 +221,17 @@ export class InlineChatDecorationsContribution extends Disposable implements IEd
 }
 
 GutterActionsRegistry.registerGutterActionsGenerator(({ lineNumber, editor, accessor }, result) => {
-	const configurationService = accessor.get(IConfigurationService);
+	const inlineChatService = accessor.get(IInlineChatService);
+	const noProviders = Iterable.isEmpty(inlineChatService.getAllProvider());
+	if (noProviders) {
+		return;
+	}
+	const preferencesService = accessor.get(IPreferencesService);
 	result.push(new Action(
-		'inlineChat.toggleShowGutterIcon',
-		localize('toggleShowGutterIcon', "Toggle Inline Chat Icon"),
+		'inlineChat.configureShowGutterIcon',
+		localize('configureShowGutterIcon', "Configure Inline Chat Icon"),
 		undefined,
 		true,
-		() => { configurationService.updateValue(InlineChatDecorationsContribution.GUTTER_SETTING_ID, !configurationService.getValue<boolean>(InlineChatDecorationsContribution.GUTTER_SETTING_ID)); }
+		() => { preferencesService.openUserSettings({ query: 'inlineChat.showGutterIcon' }); }
 	));
 });
diff --git a/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChatLivePreviewWidget.ts b/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChatLivePreviewWidget.ts
index c1081af9cb1..c9b2ce8f926 100644
--- a/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChatLivePreviewWidget.ts
+++ b/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChatLivePreviewWidget.ts
@@ -3,10 +3,10 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { Dimension, h } from 'vs/base/browser/dom';
-import { MutableDisposable } from 'vs/base/common/lifecycle';
+import { Dimension, getWindow, h, runAtThisOrScheduleAtNextAnimationFrame } from 'vs/base/browser/dom';
+import { DisposableStore, MutableDisposable } from 'vs/base/common/lifecycle';
 import { assertType } from 'vs/base/common/types';
-import { ICodeEditor, IDiffEditor } from 'vs/editor/browser/editorBrowser';
+import { ICodeEditor } from 'vs/editor/browser/editorBrowser';
 import { EmbeddedCodeEditorWidget, EmbeddedDiffEditorWidget } from 'vs/editor/browser/widget/embeddedCodeEditorWidget';
 import { EditorOption } from 'vs/editor/common/config/editorOptions';
 import { Range } from 'vs/editor/common/core/range';
@@ -21,20 +21,29 @@ import { LineRange } from 'vs/editor/common/core/lineRange';
 import { LineRangeMapping } from 'vs/editor/common/diff/rangeMapping';
 import { Position } from 'vs/editor/common/core/position';
 import { EditorExtensionsRegistry } from 'vs/editor/browser/editorExtensions';
-import { IEditorDecorationsCollection, ScrollType } from 'vs/editor/common/editorCommon';
+import { IEditorDecorationsCollection } from 'vs/editor/common/editorCommon';
 import { ILogService } from 'vs/platform/log/common/log';
 import { lineRangeAsRange, invertLineRange } from 'vs/workbench/contrib/inlineChat/browser/utils';
 import { ResourceLabel } from 'vs/workbench/browser/labels';
-import { URI } from 'vs/base/common/uri';
-import { TextEdit } from 'vs/editor/common/languages';
 import { FileKind } from 'vs/platform/files/common/files';
-import { IModelService } from 'vs/editor/common/services/model';
-import { EditOperation } from 'vs/editor/common/core/editOperation';
 import { Session } from 'vs/workbench/contrib/inlineChat/browser/inlineChatSession';
-import { ILanguageService } from 'vs/editor/common/languages/language';
 import { FoldingController } from 'vs/editor/contrib/folding/browser/folding';
 import { IAccessibilityService } from 'vs/platform/accessibility/common/accessibility';
 import { generateUuid } from 'vs/base/common/uuid';
+import { DiffEditorWidget } from 'vs/editor/browser/widget/diffEditor/diffEditorWidget';
+import { ITextModelService } from 'vs/editor/common/services/resolverService';
+import { ButtonBar, IButton } from 'vs/base/browser/ui/button/button';
+import { defaultButtonStyles } from 'vs/platform/theme/browser/defaultStyles';
+import { SaveReason, SideBySideEditor } from 'vs/workbench/common/editor';
+import { IEditorService } from 'vs/workbench/services/editor/common/editorService';
+import { IContextMenuService } from 'vs/platform/contextview/browser/contextView';
+import { IAction, toAction } from 'vs/base/common/actions';
+import { IUntitledTextEditorModel } from 'vs/workbench/services/untitled/common/untitledTextEditorModel';
+import { renderIcon } from 'vs/base/browser/ui/iconLabel/iconLabels';
+import { Codicon } from 'vs/base/common/codicons';
+import { TAB_ACTIVE_MODIFIED_BORDER } from 'vs/workbench/common/theme';
+import { localize } from 'vs/nls';
+import { Event } from 'vs/base/common/event';
 
 export class InlineChatLivePreviewWidget extends ZoneWidget {
 
@@ -43,7 +52,7 @@ export class InlineChatLivePreviewWidget extends ZoneWidget {
 	private readonly _elements = h('div.inline-chat-diff-widget@domNode');
 
 	private readonly _decorationCollection: IEditorDecorationsCollection;
-	private readonly _diffEditor: IDiffEditor;
+	private readonly _diffEditor: DiffEditorWidget;
 
 	private _dim: Dimension | undefined;
 	private _isVisible: boolean = false;
@@ -57,7 +66,7 @@ export class InlineChatLivePreviewWidget extends ZoneWidget {
 		@ILogService private readonly _logService: ILogService,
 		@IAccessibilityService private readonly accessibilityService: IAccessibilityService,
 	) {
-		super(editor, { showArrow: false, showFrame: false, isResizeable: false, isAccessible: true, allowUnlimitedHeight: true, showInHiddenAreas: true, ordinal: 10000 + 1 });
+		super(editor, { showArrow: false, showFrame: false, isResizeable: false, isAccessible: true, allowUnlimitedHeight: true, showInHiddenAreas: true, keepEditorSelection: true, ordinal: 10000 + 1 });
 		super.create();
 		assertType(editor.hasModel());
 
@@ -99,6 +108,19 @@ export class InlineChatLivePreviewWidget extends ZoneWidget {
 
 		if (onDidChangeDiff) {
 			this._disposables.add(this._diffEditor.onDidUpdateDiff(() => { onDidChangeDiff(); }));
+
+			const render = this._disposables.add(new MutableDisposable());
+			this._disposables.add(this._diffEditor.onDidContentSizeChange(e => {
+				if (!this._isVisible || !e.contentHeightChanged) {
+					return;
+				}
+				render.value = runAtThisOrScheduleAtNextAnimationFrame(getWindow(this._diffEditor.getContainerDomNode()), () => {
+					const lineHeight = this.editor.getOption(EditorOption.lineHeight);
+					const heightInLines = e.contentHeight / lineHeight;
+					this._logService.debug(`[IE] relaying with ${heightInLines} lines height`);
+					this._relayout(heightInLines);
+				});
+			}));
 		}
 
 
@@ -203,7 +225,7 @@ export class InlineChatLivePreviewWidget extends ZoneWidget {
 		this._hideEditorRanges(this._diffEditor.getOriginalEditor(), ranges.originalDiffHidden);
 		this._hideEditorRanges(this._diffEditor.getModifiedEditor(), ranges.modifiedDiffHidden);
 
-		this._diffEditor.revealLine(ranges.modifiedHidden.startLineNumber, ScrollType.Immediate);
+		// this._diffEditor.revealLine(ranges.modifiedHidden.startLineNumber, ScrollType.Immediate);
 
 		const lineCountModified = ranges.modifiedHidden.length;
 		const lineCountOriginal = ranges.originalHidden.length;
@@ -211,7 +233,7 @@ export class InlineChatLivePreviewWidget extends ZoneWidget {
 		const heightInLines = Math.max(lineCountModified, lineCountOriginal);
 
 		super.show(ranges.anchor, heightInLines);
-		this._logService.debug(`[IE] diff SHOWING at ${ranges.anchor} with ${heightInLines} lines height`);
+		this._logService.debug(`[IE] diff SHOWING at ${ranges.anchor} with ${heightInLines} (approx) lines height`);
 	}
 
 	private _cleanupFullDiff() {
@@ -219,6 +241,7 @@ export class InlineChatLivePreviewWidget extends ZoneWidget {
 		this._diffEditor.getOriginalEditor().setHiddenAreas([], this._hideId);
 		this._diffEditor.getModifiedEditor().setHiddenAreas([], this._hideId);
 		super.hide();
+		this._isVisible = false;
 	}
 
 	private _computeHiddenRanges(model: ITextModel, changes: readonly LineRangeMapping[]) {
@@ -293,6 +316,8 @@ export class InlineChatLivePreviewWidget extends ZoneWidget {
 
 export class InlineChatFileCreatePreviewWidget extends ZoneWidget {
 
+	private static TitleHeight = 35;
+
 	private readonly _elements = h('div.inline-chat-newfile-widget@domNode', [
 		h('div.title@title', [
 			h('span.name.show-file-icons@name'),
@@ -303,21 +328,31 @@ export class InlineChatFileCreatePreviewWidget extends ZoneWidget {
 
 	private readonly _name: ResourceLabel;
 	private readonly _previewEditor: ICodeEditor;
-	private readonly _previewModel = new MutableDisposable();
+	private readonly _previewStore = new MutableDisposable();
+	private readonly _buttonBar: ButtonBarWidget;
 	private _dim: Dimension | undefined;
 
 	constructor(
 		parentEditor: ICodeEditor,
 		@IInstantiationService instaService: IInstantiationService,
-		@ILanguageService private readonly _languageService: ILanguageService,
-		@IModelService private readonly _modelService: IModelService,
 		@IThemeService themeService: IThemeService,
-
+		@ITextModelService private readonly _textModelResolverService: ITextModelService,
+		@IEditorService private readonly _editorService: IEditorService,
 	) {
-		super(parentEditor, { showArrow: false, showFrame: false, isResizeable: false, isAccessible: true, showInHiddenAreas: true, ordinal: 10000 + 2 });
+		super(parentEditor, {
+			showArrow: false,
+			showFrame: true,
+			frameColor: colorRegistry.asCssVariable(TAB_ACTIVE_MODIFIED_BORDER),
+			frameWidth: 1,
+			isResizeable: true,
+			isAccessible: true,
+			showInHiddenAreas: true,
+			ordinal: 10000 + 2
+		});
 		super.create();
 
 		this._name = instaService.createInstance(ResourceLabel, this._elements.name, { supportIcons: true });
+		this._elements.detail.appendChild(renderIcon(Codicon.circleFilled));
 
 		const contributions = EditorExtensionsRegistry
 			.getEditorContributions()
@@ -326,7 +361,6 @@ export class InlineChatFileCreatePreviewWidget extends ZoneWidget {
 		this._previewEditor = instaService.createInstance(EmbeddedCodeEditorWidget, this._elements.editor, {
 			scrollBeyondLastLine: false,
 			stickyScroll: { enabled: false },
-			readOnly: true,
 			minimap: { enabled: false },
 			scrollbar: { alwaysConsumeMouseWheel: false, useShadows: true, ignoreHorizontalScrollbarInContentHeight: true, },
 		}, { isSimpleWidget: true, contributions }, parentEditor);
@@ -347,12 +381,16 @@ export class InlineChatFileCreatePreviewWidget extends ZoneWidget {
 		};
 		doStyle();
 		this._disposables.add(themeService.onDidColorThemeChange(doStyle));
+
+		this._buttonBar = instaService.createInstance(ButtonBarWidget);
+		this._elements.title.appendChild(this._buttonBar.domNode);
 	}
 
 	override dispose(): void {
 		this._name.dispose();
+		this._buttonBar.dispose();
 		this._previewEditor.dispose();
-		this._previewModel.dispose();
+		this._previewStore.dispose();
 		super.dispose();
 	}
 
@@ -364,25 +402,64 @@ export class InlineChatFileCreatePreviewWidget extends ZoneWidget {
 		throw new Error('Use showFileCreation');
 	}
 
-	showCreation(where: Range, uri: URI, edits: TextEdit[]): void {
+	async showCreation(where: Position, untitledTextModel: IUntitledTextEditorModel): Promise<void> {
 
-		this._name.element.setFile(uri, { fileKind: FileKind.FILE });
+		const store = new DisposableStore();
+		this._previewStore.value = store;
 
-		const langSelection = this._languageService.createByFilepathOrFirstLine(uri, undefined);
-		const model = this._modelService.createModel('', langSelection, undefined, true);
-		model.applyEdits(edits.map(edit => EditOperation.replace(Range.lift(edit.range), edit.text)));
-		this._previewModel.value = model;
+		this._name.element.setFile(untitledTextModel.resource, {
+			fileKind: FileKind.FILE,
+			fileDecorations: { badges: true, colors: true }
+		});
+
+		const actionSave = toAction({
+			id: '1',
+			label: localize('save', "Create"),
+			run: () => untitledTextModel.save({ reason: SaveReason.EXPLICIT })
+		});
+		const actionSaveAs = toAction({
+			id: '2',
+			label: localize('saveAs', "Create As"),
+			run: async () => {
+				const ids = this._editorService.findEditors(untitledTextModel.resource, { supportSideBySide: SideBySideEditor.ANY });
+				await this._editorService.save(ids.slice(), { saveAs: true, reason: SaveReason.EXPLICIT });
+			}
+		});
+
+		this._buttonBar.update([
+			[actionSave, actionSaveAs],
+			[(toAction({ id: '3', label: localize('discard', "Discard"), run: () => untitledTextModel.revert() }))]
+		]);
+
+		store.add(Event.any(
+			untitledTextModel.onDidRevert,
+			untitledTextModel.onDidSave,
+			untitledTextModel.onDidChangeDirty,
+			untitledTextModel.onWillDispose
+		)(() => this.hide()));
+
+		await untitledTextModel.resolve();
+
+		const ref = await this._textModelResolverService.createModelReference(untitledTextModel.resource);
+		store.add(ref);
+
+		const model = ref.object.textEditorModel;
 		this._previewEditor.setModel(model);
 
 		const lineHeight = this.editor.getOption(EditorOption.lineHeight);
-		this._elements.title.style.height = `${lineHeight}px`;
-		const maxLines = Math.max(4, Math.floor((this.editor.getLayoutInfo().height / lineHeight) / .33));
 
+		this._elements.title.style.height = `${InlineChatFileCreatePreviewWidget.TitleHeight}px`;
+		const titleHightInLines = InlineChatFileCreatePreviewWidget.TitleHeight / lineHeight;
+
+		const maxLines = Math.max(4, Math.floor((this.editor.getLayoutInfo().height / lineHeight) * .33));
 		const lines = Math.min(maxLines, model.getLineCount());
-		const lineHeightPadding = (lineHeight / 12) /* padding-top/bottom*/;
 
+		super.show(where, titleHightInLines + lines);
+	}
 
-		super.show(where, lines + 1 + lineHeightPadding);
+	override hide(): void {
+		this._previewStore.clear();
+		super.hide();
 	}
 
 	// --- layout
@@ -405,8 +482,56 @@ export class InlineChatFileCreatePreviewWidget extends ZoneWidget {
 		const newDim = new Dimension(widthInPixel, heightInPixel);
 		if (!Dimension.equals(this._dim, newDim)) {
 			this._dim = newDim;
-			const oneLineHeightInPx = this.editor.getOption(EditorOption.lineHeight);
-			this._previewEditor.layout(this._dim.with(undefined, this._dim.height - oneLineHeightInPx /* title */));
+			this._previewEditor.layout(this._dim.with(undefined, this._dim.height - InlineChatFileCreatePreviewWidget.TitleHeight));
 		}
 	}
 }
+
+
+class ButtonBarWidget {
+
+	private readonly _domNode = h('div.buttonbar-widget');
+	private readonly _buttonBar: ButtonBar;
+	private readonly _store = new DisposableStore();
+
+	constructor(
+		@IContextMenuService private _contextMenuService: IContextMenuService,
+	) {
+		this._buttonBar = new ButtonBar(this.domNode);
+
+	}
+
+	update(allActions: IAction[][]): void {
+		this._buttonBar.clear();
+		let secondary = false;
+		for (const actions of allActions) {
+			let btn: IButton;
+			const [first, ...rest] = actions;
+			if (!first) {
+				continue;
+			} else if (rest.length === 0) {
+				// single action
+				btn = this._buttonBar.addButton({ ...defaultButtonStyles, secondary });
+			} else {
+				btn = this._buttonBar.addButtonWithDropdown({
+					...defaultButtonStyles,
+					addPrimaryActionToDropdown: false,
+					actions: rest,
+					contextMenuProvider: this._contextMenuService
+				});
+			}
+			btn.label = first.label;
+			this._store.add(btn.onDidClick(() => first.run()));
+			secondary = true;
+		}
+	}
+
+	dispose(): void {
+		this._buttonBar.dispose();
+		this._store.dispose();
+	}
+
+	get domNode() {
+		return this._domNode.root;
+	}
+}
diff --git a/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChatSession.ts b/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChatSession.ts
index 891b3c02da2..8dd5e4ffca7 100644
--- a/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChatSession.ts
+++ b/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChatSession.ts
@@ -3,13 +3,12 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { isEqual } from 'vs/base/common/resources';
 import { URI } from 'vs/base/common/uri';
 import { Emitter, Event } from 'vs/base/common/event';
 import { ResourceEdit, ResourceFileEdit, ResourceTextEdit } from 'vs/editor/browser/services/bulkEditService';
-import { TextEdit } from 'vs/editor/common/languages';
+import { IWorkspaceTextEdit, TextEdit, WorkspaceEdit } from 'vs/editor/common/languages';
 import { IModelDeltaDecoration, ITextModel } from 'vs/editor/common/model';
-import { EditMode, IInlineChatSessionProvider, IInlineChatSession, IInlineChatBulkEditResponse, IInlineChatEditResponse, IInlineChatMessageResponse, IInlineChatResponse, IInlineChatService } from 'vs/workbench/contrib/inlineChat/common/inlineChat';
+import { EditMode, IInlineChatSessionProvider, IInlineChatSession, IInlineChatBulkEditResponse, IInlineChatEditResponse, IInlineChatMessageResponse, IInlineChatResponse, IInlineChatService, InlineChatResponseType, InlineChateResponseTypes } from 'vs/workbench/contrib/inlineChat/common/inlineChat';
 import { IRange, Range } from 'vs/editor/common/core/range';
 import { IActiveCodeEditor, ICodeEditor } from 'vs/editor/browser/editorBrowser';
 import { createDecorator } from 'vs/platform/instantiation/common/instantiation';
@@ -23,10 +22,16 @@ import { CancellationToken } from 'vs/base/common/cancellation';
 import { Iterable } from 'vs/base/common/iterator';
 import { toErrorMessage } from 'vs/base/common/errorMessage';
 import { isCancellationError } from 'vs/base/common/errors';
-import { ISingleEditOperation } from 'vs/editor/common/core/editOperation';
+import { EditOperation, ISingleEditOperation } from 'vs/editor/common/core/editOperation';
 import { raceCancellation } from 'vs/base/common/async';
 import { LineRangeMapping } from 'vs/editor/common/diff/rangeMapping';
 import { IMarkdownString } from 'vs/base/common/htmlContent';
+import { IUntitledTextEditorModel } from 'vs/workbench/services/untitled/common/untitledTextEditorModel';
+import { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';
+import { ILanguageService } from 'vs/editor/common/languages/language';
+import { ResourceMap } from 'vs/base/common/map';
+import { Schemas } from 'vs/base/common/network';
+import { isEqual } from 'vs/base/common/resources';
 
 export type Recording = {
 	when: Date;
@@ -226,7 +231,7 @@ export class Session {
 		};
 		for (const exchange of this._exchange) {
 			const response = exchange.response;
-			if (response instanceof MarkdownResponse || response instanceof EditResponse) {
+			if (response instanceof ReplyResponse) {
 				result.exchanges.push({ prompt: exchange.prompt.value, res: response.raw });
 			}
 		}
@@ -258,7 +263,7 @@ export class SessionExchange {
 
 	constructor(
 		readonly prompt: SessionPrompt,
-		readonly response: MarkdownResponse | EditResponse | EmptyResponse | ErrorResponse
+		readonly response: ReplyResponse | EmptyResponse | ErrorResponse
 	) { }
 }
 
@@ -279,77 +284,97 @@ export class ErrorResponse {
 	}
 }
 
-export class MarkdownResponse {
-	constructor(
-		readonly localUri: URI,
-		readonly raw: IInlineChatMessageResponse,
-		readonly mdContent: IMarkdownString,
-	) { }
-}
-
-export class EditResponse {
+export class ReplyResponse {
 
 	readonly allLocalEdits: TextEdit[][] = [];
-	readonly singleCreateFileEdit: { uri: URI; edits: Promise<TextEdit>[] } | undefined;
-	readonly workspaceEdits: ResourceEdit[] | undefined;
-	readonly workspaceEditsIncludeLocalEdits: boolean = false;
+	readonly untitledTextModel: IUntitledTextEditorModel | undefined;
+	readonly workspaceEdit: WorkspaceEdit | undefined;
+
+	readonly responseType: InlineChateResponseTypes;
 
 	constructor(
+		readonly raw: IInlineChatBulkEditResponse | IInlineChatEditResponse | IInlineChatMessageResponse,
+		readonly mdContent: IMarkdownString,
 		localUri: URI,
 		readonly modelAltVersionId: number,
-		readonly raw: IInlineChatBulkEditResponse | IInlineChatEditResponse,
 		progressEdits: TextEdit[][],
+		readonly requestId: string,
+		@ITextFileService private readonly _textFileService: ITextFileService,
+		@ILanguageService private readonly _languageService: ILanguageService,
 	) {
 
-		this.allLocalEdits.push(...progressEdits);
+		const editsMap = new ResourceMap<TextEdit[][]>();
 
-		if (raw.type === 'editorEdit') {
+		editsMap.set(localUri, [...progressEdits]);
+
+		if (raw.type === InlineChatResponseType.EditorEdit) {
 			//
-			this.allLocalEdits.push(raw.edits);
-			this.singleCreateFileEdit = undefined;
-			this.workspaceEdits = undefined;
+			editsMap.get(localUri)!.push(raw.edits);
 
-		} else {
+
+		} else if (raw.type === InlineChatResponseType.BulkEdit) {
 			//
 			const edits = ResourceEdit.convert(raw.edits);
-			this.workspaceEdits = edits;
-
-			let isComplexEdit = false;
-			const localEdits: TextEdit[] = [];
 
 			for (const edit of edits) {
 				if (edit instanceof ResourceFileEdit) {
-					if (!isComplexEdit && edit.newResource && !edit.oldResource) {
-						// file create
-						if (this.singleCreateFileEdit) {
-							isComplexEdit = true;
-							this.singleCreateFileEdit = undefined;
-						} else {
-							this.singleCreateFileEdit = { uri: edit.newResource, edits: [] };
-							if (edit.options.contents) {
-								this.singleCreateFileEdit.edits.push(edit.options.contents.then(x => ({ range: new Range(1, 1, 1, 1), text: x.toString() })));
-							}
+					if (edit.newResource && !edit.oldResource) {
+						editsMap.set(edit.newResource, []);
+						if (edit.options.contents) {
+							console.warn('CONTENT not supported');
 						}
 					}
 				} else if (edit instanceof ResourceTextEdit) {
 					//
-					if (isEqual(edit.resource, localUri)) {
-						localEdits.push(edit.textEdit);
-						this.workspaceEditsIncludeLocalEdits = true;
-
-					} else if (isEqual(this.singleCreateFileEdit?.uri, edit.resource)) {
-						this.singleCreateFileEdit!.edits.push(Promise.resolve(edit.textEdit));
+					const array = editsMap.get(edit.resource);
+					if (array) {
+						array.push([edit.textEdit]);
 					} else {
-						isComplexEdit = true;
+						editsMap.set(edit.resource, [[edit.textEdit]]);
 					}
 				}
 			}
-			if (localEdits.length > 0) {
-				this.allLocalEdits.push(localEdits);
+		}
+
+		if (editsMap.size === 0) {
+			this.responseType = InlineChateResponseTypes.OnlyMessages;
+		} else if (editsMap.size === 1 && editsMap.has(localUri)) {
+			this.responseType = InlineChateResponseTypes.OnlyEdits;
+		} else {
+			this.responseType = InlineChateResponseTypes.Mixed;
+		}
+
+		let needsWorkspaceEdit = false;
+
+		for (const [uri, edits] of editsMap) {
+
+			needsWorkspaceEdit = needsWorkspaceEdit || (uri.scheme !== Schemas.untitled && !isEqual(uri, localUri));
+
+			if (uri.scheme === Schemas.untitled && !this.untitledTextModel) { //TODO@jrieken the first untitled model WINS
+				const langSelection = this._languageService.createByFilepathOrFirstLine(uri, undefined);
+				const untitledTextModel = this._textFileService.untitled.create({
+					associatedResource: uri,
+					languageId: langSelection.languageId
+				});
+				this.untitledTextModel = untitledTextModel;
+
+				untitledTextModel.resolve().then(async () => {
+					const model = untitledTextModel.textEditorModel!;
+					model.applyEdits(edits.flat().map(edit => EditOperation.replace(Range.lift(edit.range), edit.text)));
+				});
 			}
-			if (isComplexEdit) {
-				this.singleCreateFileEdit = undefined;
+		}
+
+		this.allLocalEdits = editsMap.get(localUri) ?? [];
+
+		if (needsWorkspaceEdit) {
+			const workspaceEdits: IWorkspaceTextEdit[] = [];
+			for (const [uri, edits] of editsMap) {
+				for (const edit of edits.flat()) {
+					workspaceEdits.push({ resource: uri, textEdit: edit, versionId: undefined });
+				}
 			}
+			this.workspaceEdit = { edits: workspaceEdits };
 		}
 	}
 }
diff --git a/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChatStrategies.ts b/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChatStrategies.ts
index 31359f738a2..9e77b97ff69 100644
--- a/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChatStrategies.ts
+++ b/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChatStrategies.ts
@@ -3,6 +3,8 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
+import { disposableWindowInterval } from 'vs/base/browser/dom';
+import { $window } from 'vs/base/browser/window';
 import { equals, tail } from 'vs/base/common/arrays';
 import { AsyncIterableObject, AsyncIterableSource } from 'vs/base/common/async';
 import { CancellationToken } from 'vs/base/common/cancellation';
@@ -23,21 +25,19 @@ import { IEditorWorkerService } from 'vs/editor/common/services/editorWorker';
 import { localize } from 'vs/nls';
 import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
 import { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
-import { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';
+import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
 import { IStorageService } from 'vs/platform/storage/common/storage';
+import { SaveReason } from 'vs/workbench/common/editor';
 import { countWords, getNWords } from 'vs/workbench/contrib/chat/common/chatWordCounter';
 import { InlineChatFileCreatePreviewWidget, InlineChatLivePreviewWidget } from 'vs/workbench/contrib/inlineChat/browser/inlineChatLivePreviewWidget';
-import { EditResponse, Session } from 'vs/workbench/contrib/inlineChat/browser/inlineChatSession';
+import { ReplyResponse, Session } from 'vs/workbench/contrib/inlineChat/browser/inlineChatSession';
 import { InlineChatWidget } from 'vs/workbench/contrib/inlineChat/browser/inlineChatWidget';
 import { CTX_INLINE_CHAT_DOCUMENT_CHANGED } from 'vs/workbench/contrib/inlineChat/common/inlineChat';
-import { IEditorService, SIDE_GROUP } from 'vs/workbench/services/editor/common/editorService';
 
 export abstract class EditModeStrategy {
 
 	abstract dispose(): void;
 
-	abstract checkChanges(response: EditResponse): boolean;
-
 	abstract apply(): Promise<void>;
 
 	abstract cancel(): Promise<void>;
@@ -48,7 +48,7 @@ export abstract class EditModeStrategy {
 
 	abstract undoChanges(altVersionId: number): Promise<void>;
 
-	abstract renderChanges(response: EditResponse): Promise<void>;
+	abstract renderChanges(response: ReplyResponse): Promise<void>;
 
 	abstract hasFocus(): boolean;
 
@@ -64,8 +64,6 @@ export class PreviewStrategy extends EditModeStrategy {
 		private readonly _session: Session,
 		private readonly _widget: InlineChatWidget,
 		@IContextKeyService contextKeyService: IContextKeyService,
-		@IBulkEditService private readonly _bulkEditService: IBulkEditService,
-		@IInstantiationService private readonly _instaService: IInstantiationService,
 	) {
 		super();
 
@@ -82,37 +80,25 @@ export class PreviewStrategy extends EditModeStrategy {
 		this._ctxDocumentChanged.reset();
 	}
 
-	checkChanges(response: EditResponse): boolean {
-		if (!response.workspaceEdits || response.singleCreateFileEdit) {
-			// preview stategy can handle simple workspace edit (single file create)
-			return true;
-		}
-		this._bulkEditService.apply(response.workspaceEdits, { showPreview: true });
-		return false;
-	}
-
 	async apply() {
 
-		if (!(this._session.lastExchange?.response instanceof EditResponse)) {
+		if (!(this._session.lastExchange?.response instanceof ReplyResponse)) {
 			return;
 		}
 		const editResponse = this._session.lastExchange?.response;
-		if (editResponse.workspaceEdits) {
-			await this._bulkEditService.apply(editResponse.workspaceEdits);
-			this._instaService.invokeFunction(showSingleCreateFile, editResponse);
-
+		const { textModelN: modelN } = this._session;
 
-		} else if (!editResponse.workspaceEditsIncludeLocalEdits) {
-
-			const { textModelN: modelN } = this._session;
-
-			if (modelN.equalsTextBuffer(this._session.textModel0.getTextBuffer())) {
-				modelN.pushStackElement();
-				for (const edits of editResponse.allLocalEdits) {
-					modelN.pushEditOperations(null, edits.map(TextEdit.asEditOperation), () => null);
-				}
-				modelN.pushStackElement();
+		if (modelN.equalsTextBuffer(this._session.textModel0.getTextBuffer())) {
+			modelN.pushStackElement();
+			for (const edits of editResponse.allLocalEdits) {
+				modelN.pushEditOperations(null, edits.map(TextEdit.asEditOperation), () => null);
 			}
+			modelN.pushStackElement();
+		}
+
+		const { untitledTextModel } = this._session.lastExchange.response;
+		if (untitledTextModel && !untitledTextModel.isDisposed() && untitledTextModel.isDirty()) {
+			await untitledTextModel.save({ reason: SaveReason.EXPLICIT });
 		}
 	}
 
@@ -132,7 +118,7 @@ export class PreviewStrategy extends EditModeStrategy {
 		// nothing to do
 	}
 
-	override async renderChanges(response: EditResponse): Promise<void> {
+	override async renderChanges(response: ReplyResponse): Promise<void> {
 		if (response.allLocalEdits.length > 0) {
 			const allEditOperation = response.allLocalEdits.map(edits => edits.map(TextEdit.asEditOperation));
 			await this._widget.showEditsPreview(this._session.textModel0, this._session.textModelN, allEditOperation);
@@ -140,8 +126,8 @@ export class PreviewStrategy extends EditModeStrategy {
 			this._widget.hideEditsPreview();
 		}
 
-		if (response.singleCreateFileEdit) {
-			this._widget.showCreatePreview(response.singleCreateFileEdit.uri, await Promise.all(response.singleCreateFileEdit.edits));
+		if (response.untitledTextModel) {
+			this._widget.showCreatePreview(response.untitledTextModel);
 		} else {
 			this._widget.hideCreatePreview();
 		}
@@ -235,7 +221,6 @@ export class LiveStrategy extends EditModeStrategy {
 	private readonly _inlineDiffDecorations: InlineDiffDecorations;
 	private readonly _store: DisposableStore = new DisposableStore();
 
-	private _lastResponse?: EditResponse;
 	private _editCount: number = 0;
 
 	constructor(
@@ -271,26 +256,16 @@ export class LiveStrategy extends EditModeStrategy {
 		this._inlineDiffDecorations.visible = this._diffEnabled;
 	}
 
-	checkChanges(response: EditResponse): boolean {
-		this._lastResponse = response;
-		if (response.singleCreateFileEdit) {
-			// preview stategy can handle simple workspace edit (single file create)
-			return true;
-		}
-		if (response.workspaceEdits) {
-			this._bulkEditService.apply(response.workspaceEdits, { showPreview: true });
-			return false;
-		}
-		return true;
-	}
-
 	async apply() {
 		if (this._editCount > 0) {
 			this._editor.pushUndoStop();
 		}
-		if (this._lastResponse?.workspaceEdits) {
-			await this._bulkEditService.apply(this._lastResponse.workspaceEdits);
-			this._instaService.invokeFunction(showSingleCreateFile, this._lastResponse);
+		if (!(this._session.lastExchange?.response instanceof ReplyResponse)) {
+			return;
+		}
+		const { untitledTextModel } = this._session.lastExchange.response;
+		if (untitledTextModel && !untitledTextModel.isDisposed() && untitledTextModel.isDirty()) {
+			await untitledTextModel.save({ reason: SaveReason.EXPLICIT });
 		}
 	}
 
@@ -341,13 +316,13 @@ export class LiveStrategy extends EditModeStrategy {
 		}
 	}
 
-	override async renderChanges(response: EditResponse) {
+	override async renderChanges(response: ReplyResponse) {
 		const diff = await this._editorWorkerService.computeDiff(this._session.textModel0.uri, this._session.textModelN.uri, { ignoreTrimWhitespace: false, maxComputationTimeMs: 5000, computeMoves: false }, 'advanced');
 		this._updateSummaryMessage(diff?.changes ?? []);
 		this._inlineDiffDecorations.update();
 
-		if (response.singleCreateFileEdit) {
-			this._widget.showCreatePreview(response.singleCreateFileEdit.uri, await Promise.all(response.singleCreateFileEdit.edits));
+		if (response.untitledTextModel) {
+			this._widget.showCreatePreview(response.untitledTextModel);
 		} else {
 			this._widget.hideCreatePreview();
 		}
@@ -421,7 +396,6 @@ export class LivePreviewStrategy extends LiveStrategy {
 		if (!diff || diff.changes.length === 0) {
 			for (const zone of this._diffZonePool) {
 				zone.hide();
-				zone.dispose();
 			}
 			return;
 		}
@@ -509,12 +483,12 @@ export class LivePreviewStrategy extends LiveStrategy {
 		await this._updateDiffZones();
 	}
 
-	override async renderChanges(response: EditResponse) {
+	override async renderChanges(response: ReplyResponse) {
 
 		await this._updateDiffZones();
 
-		if (response.singleCreateFileEdit) {
-			this._previewZone.value.showCreation(this._session.wholeRange.value.collapseToStart(), response.singleCreateFileEdit.uri, await Promise.all(response.singleCreateFileEdit.edits));
+		if (response.untitledTextModel && !response.untitledTextModel.isDisposed()) {
+			this._previewZone.value.showCreation(this._session.wholeRange.value.getStartPosition().delta(-1), response.untitledTextModel);
 		} else {
 			this._previewZone.value.hide();
 		}
@@ -525,13 +499,6 @@ export class LivePreviewStrategy extends LiveStrategy {
 	}
 }
 
-function showSingleCreateFile(accessor: ServicesAccessor, edit: EditResponse) {
-	const editorService = accessor.get(IEditorService);
-	if (edit.singleCreateFileEdit) {
-		editorService.openEditor({ resource: edit.singleCreateFileEdit.uri }, SIDE_GROUP);
-	}
-}
-
 export interface AsyncTextEdit {
 	readonly range: IRange;
 	readonly newText: AsyncIterable<string>;
@@ -583,13 +550,13 @@ export function asProgressiveEdit(edit: IIdentifiedSingleEditOperation, wordsPer
 	let newText = edit.text ?? '';
 	// const wordCount = countWords(newText);
 
-	const handle = setInterval(() => {
+	const handle = disposableWindowInterval($window, () => {
 
 		const r = getNWords(newText, 1);
 		stream.emitOne(r.value);
 		newText = newText.substring(r.value.length);
 		if (r.isFullString) {
-			clearInterval(handle);
+			handle.dispose();
 			stream.resolve();
 			d.dispose();
 		}
@@ -598,7 +565,7 @@ export function asProgressiveEdit(edit: IIdentifiedSingleEditOperation, wordsPer
 
 	// cancel ASAP
 	const d = token.onCancellationRequested(() => {
-		clearTimeout(handle);
+		handle.dispose();
 		stream.resolve();
 		d.dispose();
 	});
diff --git a/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChatWidget.ts b/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChatWidget.ts
index cc825b900db..986178c283a 100644
--- a/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChatWidget.ts
+++ b/src/vs/workbench/contrib/inlineCSChat/browser/inlineCSChatWidget.ts
@@ -14,7 +14,7 @@ import { IInstantiationService } from 'vs/platform/instantiation/common/instanti
 import { ZoneWidget } from 'vs/editor/contrib/zoneWidget/browser/zoneWidget';
 import { CTX_INLINE_CHAT_FOCUSED, CTX_INLINE_CHAT_EMPTY, CTX_INLINE_CHAT_OUTER_CURSOR_POSITION, CTX_INLINE_CHAT_VISIBLE, MENU_INLINE_CHAT_WIDGET, MENU_INLINE_CHAT_WIDGET_STATUS, MENU_INLINE_CHAT_WIDGET_MARKDOWN_MESSAGE, CTX_INLINE_CHAT_MESSAGE_CROP_STATE, IInlineChatSlashCommand, MENU_INLINE_CHAT_WIDGET_FEEDBACK, ACTION_REGENERATE_RESPONSE, ACTION_VIEW_IN_CHAT, MENU_INLINE_CHAT_WIDGET_TOGGLE, CTX_INLINE_CHAT_INNER_CURSOR_FIRST, CTX_INLINE_CHAT_INNER_CURSOR_LAST, CTX_INLINE_CHAT_INNER_CURSOR_START, CTX_INLINE_CHAT_INNER_CURSOR_END, CTX_INLINE_CHAT_RESPONSE_FOCUSED } from 'vs/workbench/contrib/inlineChat/common/inlineChat';
 import { IModelDeltaDecoration, ITextModel } from 'vs/editor/common/model';
-import { EventType, Dimension, addDisposableListener, getActiveElement, getTotalHeight, getTotalWidth, h, reset } from 'vs/base/browser/dom';
+import { EventType, Dimension, addDisposableListener, getActiveElement, getTotalHeight, getTotalWidth, h, reset, getWindow } from 'vs/base/browser/dom';
 import { Emitter, Event, MicrotaskEmitter } from 'vs/base/common/event';
 import { IEditorConstructionOptions } from 'vs/editor/browser/config/editorConfiguration';
 import { ICodeEditorWidgetOptions } from 'vs/editor/browser/widget/codeEditorWidget';
@@ -28,9 +28,9 @@ import { ProgressBar } from 'vs/base/browser/ui/progressbar/progressbar';
 import { SuggestController } from 'vs/editor/contrib/suggest/browser/suggestController';
 import { Position } from 'vs/editor/common/core/position';
 import { DEFAULT_FONT_FAMILY } from 'vs/workbench/browser/style';
-import { CompletionItem, CompletionItemInsertTextRule, CompletionItemKind, CompletionItemProvider, CompletionList, ProviderResult, TextEdit } from 'vs/editor/common/languages';
-import { EditOperation, ISingleEditOperation } from 'vs/editor/common/core/editOperation';
-import { ILanguageSelection, ILanguageService } from 'vs/editor/common/languages/language';
+import { CompletionItem, CompletionItemInsertTextRule, CompletionItemKind, CompletionItemProvider, CompletionList, ProviderResult } from 'vs/editor/common/languages';
+import { ISingleEditOperation } from 'vs/editor/common/core/editOperation';
+import { ILanguageSelection } from 'vs/editor/common/languages/language';
 import { ResourceLabel } from 'vs/workbench/browser/labels';
 import { FileKind } from 'vs/platform/files/common/files';
 import { ILanguageFeaturesService } from 'vs/editor/common/services/languageFeatures';
@@ -54,7 +54,7 @@ import { StandardMouseEvent } from 'vs/base/browser/mouseEvent';
 import { AccessibilityCommandId } from 'vs/workbench/contrib/accessibility/common/accessibilityCommands';
 import { assertType } from 'vs/base/common/types';
 import { renderFormattedText } from 'vs/base/browser/formattedTextRenderer';
-import { IMarkdownString } from 'vs/base/common/htmlContent';
+import { IMarkdownString, MarkdownString } from 'vs/base/common/htmlContent';
 import { MarkdownRenderer } from 'vs/editor/contrib/markdownRenderer/browser/markdownRenderer';
 import { ChatEditorOptions } from 'vs/workbench/contrib/chat/browser/chatOptions';
 import { MenuId } from 'vs/platform/actions/common/actions';
@@ -62,10 +62,18 @@ import { editorForeground, inputBackground, editorBackground } from 'vs/platform
 import { CodeBlockPart } from 'vs/workbench/contrib/chat/browser/codeBlockPart';
 import { Lazy } from 'vs/base/common/lazy';
 import { IEditorWorkerService } from 'vs/editor/common/services/editorWorker';
+import { ChatResponseViewModel } from 'vs/workbench/contrib/chat/common/chatViewModel';
+import { ChatModel, ChatResponseModel } from 'vs/workbench/contrib/chat/common/chatModel';
+import { ILogService } from 'vs/platform/log/common/log';
+import { ChatListItemRenderer, IChatListItemRendererOptions, IChatRendererDelegate } from 'vs/workbench/contrib/chat/browser/chatListRenderer'; import { IUntitledTextEditorModel } from 'vs/workbench/services/untitled/common/untitledTextEditorModel';
+import { ITextModelService } from 'vs/editor/common/services/resolverService';
+import { IChatReplyFollowup } from 'vs/workbench/contrib/chat/common/chatService';
+import { IChatAgentService } from 'vs/workbench/contrib/chat/common/chatAgents';
+import { ChatFollowups } from 'vs/workbench/contrib/chat/browser/chatFollowups';
 
 const defaultAriaLabel = localize('aria-label', "Inline Chat Input");
 
-const _inputEditorOptions: IEditorConstructionOptions = {
+export const _inputEditorOptions: IEditorConstructionOptions = {
 	padding: { top: 2, bottom: 2 },
 	overviewRulerLanes: 0,
 	glyphMargin: false,
@@ -129,6 +137,24 @@ export interface InlineChatWidgetViewState {
 	placeholder: string;
 }
 
+export interface IInlineChatWidgetConstructionOptions {
+	menuId: MenuId;
+	statusMenuId: MenuId;
+	feedbackMenuId: MenuId;
+}
+
+export interface IInlineChatMessage {
+	message: IMarkdownString;
+	requestId: string;
+	providerId: string;
+}
+
+export interface IInlineChatMessageAppender {
+	appendContent(fragment: string): void;
+	cancel(): void;
+	complete(): void;
+}
+
 export class InlineChatWidget {
 
 	private static _modelPool: number = 1;
@@ -149,10 +175,14 @@ export class InlineChatWidget {
 			h('div.previewDiff.hidden@previewDiff'),
 			h('div.previewCreateTitle.show-file-icons@previewCreateTitle'),
 			h('div.previewCreate.hidden@previewCreate'),
+			h('div.chatMessage.hidden@chatMessage', [
+				h('div.chatMessageContent@chatMessageContent')
+			]),
 			h('div.markdownMessage.hidden@markdownMessage', [
 				h('div.message@message'),
 				h('div.messageActions@messageActions')
 			]),
+			h('div.followUps.hidden@followUps'),
 			h('div.status@status', [
 				h('div.label.info.hidden@infoLabel'),
 				h('div.actions.hidden@statusToolbar'),
@@ -183,7 +213,8 @@ export class InlineChatWidget {
 
 	private readonly _previewCreateTitle: ResourceLabel;
 	private readonly _previewCreateEditor: Lazy<ICodeEditor>;
-	private readonly _previewCreateModel = this._store.add(new MutableDisposable());
+	private readonly _previewCreateDispoable = this._store.add(new MutableDisposable());
+
 
 	private readonly _onDidChangeHeight = this._store.add(new MicrotaskEmitter<void>());
 	readonly onDidChangeHeight: Event<void> = Event.filter(this._onDidChangeHeight.event, _ => !this._isLayouting);
@@ -203,11 +234,13 @@ export class InlineChatWidget {
 	private readonly _markdownRenderer: MarkdownRenderer;
 	private readonly _editorOptions: ChatEditorOptions;
 	private _codeBlockDisposables = this._store.add(new DisposableStore());
+	private _chatMessageDisposables = this._store.add(new DisposableStore());
+	private _followUpDisposables = this._store.add(new DisposableStore());
 
 	constructor(
 		private readonly parentEditor: ICodeEditor,
+		_options: IInlineChatWidgetConstructionOptions,
 		@IModelService private readonly _modelService: IModelService,
-		@ILanguageService private readonly _languageService: ILanguageService,
 		@IContextKeyService private readonly _contextKeyService: IContextKeyService,
 		@ILanguageFeaturesService private readonly _languageFeaturesService: ILanguageFeaturesService,
 		@IKeybindingService private readonly _keybindingService: IKeybindingService,
@@ -216,7 +249,10 @@ export class InlineChatWidget {
 		@IConfigurationService private readonly _configurationService: IConfigurationService,
 		@IContextMenuService private readonly _contextMenuService: IContextMenuService,
 		@IAccessibleViewService private readonly _accessibleViewService: IAccessibleViewService,
-		@IEditorWorkerService private readonly _editorWorkerService: IEditorWorkerService
+		@IEditorWorkerService private readonly _editorWorkerService: IEditorWorkerService,
+		@ILogService private readonly _logService: ILogService,
+		@ITextModelService private readonly _textModelResolverService: ITextModelService,
+		@IChatAgentService private readonly _chatAgentService: IChatAgentService,
 	) {
 
 		// input editor logic
@@ -339,7 +375,7 @@ export class InlineChatWidget {
 
 		// toolbars
 
-		const toolbar = this._instantiationService.createInstance(MenuWorkbenchToolBar, this._elements.editorToolbar, MENU_INLINE_CHAT_WIDGET, {
+		const toolbar = this._instantiationService.createInstance(MenuWorkbenchToolBar, this._elements.editorToolbar, _options.menuId, {
 			telemetrySource: 'interactiveEditorWidget-toolbar',
 			toolbarOptions: { primaryGroup: 'main' }
 		});
@@ -359,7 +395,7 @@ export class InlineChatWidget {
 				return undefined;
 			}
 		};
-		const statusButtonBar = this._instantiationService.createInstance(MenuWorkbenchButtonBar, this._elements.statusToolbar, MENU_INLINE_CHAT_WIDGET_STATUS, workbenchMenubarOptions);
+		const statusButtonBar = this._instantiationService.createInstance(MenuWorkbenchButtonBar, this._elements.statusToolbar, _options.statusMenuId, workbenchMenubarOptions);
 		this._store.add(statusButtonBar.onDidChangeMenuItems(() => this._onDidChangeHeight.fire()));
 		this._store.add(statusButtonBar);
 
@@ -372,7 +408,7 @@ export class InlineChatWidget {
 			}
 		};
 
-		const feedbackToolbar = this._instantiationService.createInstance(MenuWorkbenchToolBar, this._elements.feedbackToolbar, MENU_INLINE_CHAT_WIDGET_FEEDBACK, { ...workbenchToolbarOptions, hiddenItemStrategy: HiddenItemStrategy.Ignore });
+		const feedbackToolbar = this._instantiationService.createInstance(MenuWorkbenchToolBar, this._elements.feedbackToolbar, _options.feedbackMenuId, { ...workbenchToolbarOptions, hiddenItemStrategy: HiddenItemStrategy.Ignore });
 		this._store.add(feedbackToolbar.onDidChangeMenuItems(() => this._onDidChangeHeight.fire()));
 		this._store.add(feedbackToolbar);
 
@@ -385,8 +421,14 @@ export class InlineChatWidget {
 		this._previewCreateTitle = this._store.add(_instantiationService.createInstance(ResourceLabel, this._elements.previewCreateTitle, { supportIcons: true }));
 		this._previewCreateEditor = new Lazy(() => this._store.add(_instantiationService.createInstance(EmbeddedCodeEditorWidget, this._elements.previewCreate, _previewEditorEditorOptions, codeEditorWidgetOptions, parentEditor)));
 
+		this._elements.chatMessageContent.tabIndex = 0;
+		this._elements.chatMessageContent.ariaLabel = this._accessibleViewService.getOpenAriaHint(AccessibilityVerbositySettingId.InlineChat);
 		this._elements.message.tabIndex = 0;
 		this._elements.message.ariaLabel = this._accessibleViewService.getOpenAriaHint(AccessibilityVerbositySettingId.InlineChat);
+		this._elements.followUps.tabIndex = 0;
+		this._elements.followUps.ariaLabel = this._accessibleViewService.getOpenAriaHint(AccessibilityVerbositySettingId.InlineChat);
+
+
 		this._elements.statusLabel.tabIndex = 0;
 		const markdownMessageToolbar = this._instantiationService.createInstance(MenuWorkbenchToolBar, this._elements.messageActions, MENU_INLINE_CHAT_WIDGET_MARKDOWN_MESSAGE, workbenchToolbarOptions);
 		this._store.add(markdownMessageToolbar.onDidChangeMenuItems(() => this._onDidChangeHeight.fire()));
@@ -403,7 +445,7 @@ export class InlineChatWidget {
 	}
 
 	private _onContextMenu(e: MouseEvent) {
-		const event = new StandardMouseEvent(e);
+		const event = new StandardMouseEvent(getWindow(this._elements.root), e);
 		this._contextMenuService.showContextMenu({
 			menuId: MENU_INLINE_CHAT_WIDGET_TOGGLE,
 			getAnchor: () => event,
@@ -471,10 +513,12 @@ export class InlineChatWidget {
 		const base = getTotalHeight(this._elements.progress) + getTotalHeight(this._elements.status);
 		const editorHeight = this._inputEditor.getContentHeight() + 12 /* padding and border */;
 		const markdownMessageHeight = getTotalHeight(this._elements.markdownMessage);
+		const followUpsHeight = getTotalHeight(this._elements.followUps);
+		const chatResponseHeight = getTotalHeight(this._elements.chatMessage);
 		const previewDiffHeight = this._previewDiffEditor.hasValue && this._previewDiffEditor.value.getModel() ? 12 + Math.min(300, Math.max(0, this._previewDiffEditor.value.getContentHeight())) : 0;
 		const previewCreateTitleHeight = getTotalHeight(this._elements.previewCreateTitle);
 		const previewCreateHeight = this._previewCreateEditor.hasValue && this._previewCreateEditor.value.getModel() ? 18 + Math.min(300, Math.max(0, this._previewCreateEditor.value.getContentHeight())) : 0;
-		return base + editorHeight + markdownMessageHeight + previewDiffHeight + previewCreateTitleHeight + previewCreateHeight + 18 /* padding */ + 8 /*shadow*/;
+		return base + editorHeight + markdownMessageHeight + followUpsHeight + chatResponseHeight + previewDiffHeight + previewCreateTitleHeight + previewCreateHeight + 18 /* padding */ + 8 /*shadow*/;
 	}
 
 	updateProgress(show: boolean) {
@@ -540,12 +584,59 @@ export class InlineChatWidget {
 		return this._elements.markdownMessage.textContent ?? undefined;
 	}
 
+	updateChatMessage(message: IInlineChatMessage, isIncomplete: true): IInlineChatMessageAppender;
+	updateChatMessage(message: IInlineChatMessage | undefined): void;
+	updateChatMessage(message: IInlineChatMessage | undefined, isIncomplete?: boolean): IInlineChatMessageAppender | undefined {
+		this._chatMessageDisposables.clear();
+		this._elements.chatMessage.classList.toggle('hidden', !message);
+		reset(this._elements.chatMessageContent);
+		if (message) {
+			const sessionModel = this._chatMessageDisposables.add(new ChatModel(message.providerId, undefined, this._logService, this._chatAgentService));
+			const responseModel = this._chatMessageDisposables.add(new ChatResponseModel(message.message, sessionModel, undefined, message.requestId, !isIncomplete, false, undefined));
+			const viewModel = this._chatMessageDisposables.add(new ChatResponseViewModel(responseModel, this._logService));
+			const renderOptions: IChatListItemRendererOptions = { renderStyle: 'compact', noHeader: true, noPadding: true };
+			const chatRendererDelegate: IChatRendererDelegate = { getListLength() { return 1; } };
+			const renderer = this._chatMessageDisposables.add(this._instantiationService.createInstance(ChatListItemRenderer, this._editorOptions, renderOptions, chatRendererDelegate));
+			renderer.layout(this._elements.chatMessageContent.clientWidth - 4); // 2 for the padding used for the tab index border
+			this._chatMessageDisposables.add(this._onDidChangeLayout.event(() => {
+				renderer.layout(this._elements.chatMessageContent.clientWidth - 4);
+			}));
+			const template = renderer.renderTemplate(this._elements.chatMessageContent);
+			this._chatMessageDisposables.add(template.elementDisposables);
+			this._chatMessageDisposables.add(template.templateDisposables);
+			renderer.renderChatTreeItem(viewModel, 0, template);
+			this._chatMessageDisposables.add(renderer.onDidChangeItemHeight(() => this._onDidChangeHeight.fire()));
+			this._onDidChangeHeight.fire();
+			return {
+				cancel: () => responseModel.cancel(),
+				complete: () => responseModel.complete(),
+				appendContent: (fragment: string) => responseModel.updateContent({ kind: 'markdownContent', content: new MarkdownString(fragment) }),
+			};
+		} else {
+			this._onDidChangeHeight.fire();
+			return undefined;
+		}
+	}
+
+	updateFollowUps(items: IChatReplyFollowup[], onFollowup: (followup: IChatReplyFollowup) => void): void;
+	updateFollowUps(items: undefined): void;
+	updateFollowUps(items: IChatReplyFollowup[] | undefined, onFollowup?: ((followup: IChatReplyFollowup) => void)) {
+		this._followUpDisposables.clear();
+		this._elements.followUps.classList.toggle('hidden', !items || items.length === 0);
+		reset(this._elements.followUps);
+		if (items && items.length > 0 && onFollowup) {
+			this._followUpDisposables.add(new ChatFollowups(this._elements.followUps, items, undefined, onFollowup, this._contextKeyService));
+		}
+		this._onDidChangeHeight.fire();
+	}
+
 	updateMarkdownMessage(message: IMarkdownString | undefined) {
 		this._codeBlockDisposables.clear();
-		this._elements.markdownMessage.classList.toggle('hidden', !message);
+		const hasMessage = message?.value;
+		this._elements.markdownMessage.classList.toggle('hidden', !hasMessage);
 		let expansionState: ExpansionState;
 		let textContent: string | undefined = undefined;
-		if (!message) {
+		if (!hasMessage) {
 			reset(this._elements.message);
 			this._ctxMessageCropState.reset();
 			expansionState = ExpansionState.NOT_CROPPED;
@@ -645,6 +736,8 @@ export class InlineChatWidget {
 
 		this.value = '';
 		this.updateMarkdownMessage(undefined);
+		this.updateChatMessage(undefined);
+		this.updateFollowUps(undefined);
 
 		reset(this._elements.statusLabel);
 		this._elements.statusLabel.classList.toggle('hidden', true);
@@ -720,26 +813,23 @@ export class InlineChatWidget {
 		this._onDidChangeHeight.fire();
 	}
 
-	showCreatePreview(uri: URI, edits: TextEdit[]): void {
+	async showCreatePreview(model: IUntitledTextEditorModel): Promise<void> {
 		this._elements.previewCreateTitle.classList.remove('hidden');
 		this._elements.previewCreate.classList.remove('hidden');
 
-		this._previewCreateTitle.element.setFile(uri, { fileKind: FileKind.FILE });
+		const ref = await this._textModelResolverService.createModelReference(model.resource);
+		this._previewCreateDispoable.value = ref;
+		this._previewCreateTitle.element.setFile(model.resource, { fileKind: FileKind.FILE });
 
-		const langSelection = this._languageService.createByFilepathOrFirstLine(uri, undefined);
-		const model = this._modelService.createModel('', langSelection, undefined, true);
-		model.applyEdits(edits.map(edit => EditOperation.replace(Range.lift(edit.range), edit.text)));
-		this._previewCreateModel.value = model;
-		this._previewCreateEditor.value.setModel(model);
+		this._previewCreateEditor.value.setModel(ref.object.textEditorModel);
 		this._onDidChangeHeight.fire();
 	}
 
 	hideCreatePreview() {
 		this._elements.previewCreateTitle.classList.add('hidden');
 		this._elements.previewCreate.classList.add('hidden');
-		if (this._previewCreateEditor.hasValue) {
-			this._previewCreateEditor.value.setModel(null);
-		}
+		this._previewCreateEditor.rawValue?.setModel(null);
+		this._previewCreateDispoable.clear();
 		this._previewCreateTitle.element.clear();
 		this._onDidChangeHeight.fire();
 	}
@@ -863,7 +953,11 @@ export class InlineChatZoneWidget extends ZoneWidget {
 			this._ctxCursorPosition.reset();
 		}));
 
-		this.widget = this._instaService.createInstance(InlineChatWidget, this.editor);
+		this.widget = this._instaService.createInstance(InlineChatWidget, this.editor, {
+			menuId: MENU_INLINE_CHAT_WIDGET,
+			statusMenuId: MENU_INLINE_CHAT_WIDGET_STATUS,
+			feedbackMenuId: MENU_INLINE_CHAT_WIDGET_FEEDBACK
+		});
 		this._disposables.add(this.widget.onDidChangeHeight(() => this._relayout()));
 		this._disposables.add(this.widget);
 		this.create();
diff --git a/src/vs/workbench/contrib/inlineCSChat/common/inlineCSChat.ts b/src/vs/workbench/contrib/inlineCSChat/common/inlineCSChat.ts
index cb32deac5f7..72a8ba05785 100644
--- a/src/vs/workbench/contrib/inlineCSChat/common/inlineCSChat.ts
+++ b/src/vs/workbench/contrib/inlineCSChat/common/inlineCSChat.ts
@@ -20,6 +20,7 @@ import { IProgress } from 'vs/platform/progress/common/progress';
 import { Registry } from 'vs/platform/registry/common/platform';
 import { diffInserted, diffRemoved, editorHoverHighlight, editorWidgetBackground, editorWidgetBorder, focusBorder, inputBackground, inputPlaceholderForeground, registerColor, transparent, widgetShadow } from 'vs/platform/theme/common/colorRegistry';
 import { Extensions as ExtensionsMigration, IConfigurationMigrationRegistry } from 'vs/workbench/common/configuration';
+import { IChatReplyFollowup } from 'vs/workbench/contrib/chat/common/chatService';
 
 export interface IInlineChatSlashCommand {
 	command: string;
@@ -64,6 +65,7 @@ export interface IInlineChatEditResponse {
 	id: number;
 	type: InlineChatResponseType.EditorEdit;
 	edits: TextEdit[];
+	message?: IMarkdownString;
 	placeholder?: string;
 	wholeRange?: IRange;
 }
@@ -72,6 +74,7 @@ export interface IInlineChatBulkEditResponse {
 	id: number;
 	type: InlineChatResponseType.BulkEdit;
 	edits: WorkspaceEdit;
+	message?: IMarkdownString;
 	placeholder?: string;
 	wholeRange?: IRange;
 }
@@ -96,18 +99,22 @@ export const enum InlineChatResponseFeedbackKind {
 	Unhelpful = 0,
 	Helpful = 1,
 	Undone = 2,
-	Accepted = 3
+	Accepted = 3,
+	Bug = 4
 }
 
 export interface IInlineChatSessionProvider {
 
 	debugName: string;
 	label: string;
+	supportIssueReporting?: boolean;
 
 	prepareInlineChatSession(model: ITextModel, range: ISelection, token: CancellationToken): ProviderResult<IInlineChatSession>;
 
 	provideResponse(item: IInlineChatSession, request: IInlineChatRequest, progress: IProgress<IInlineChatProgressItem>, token: CancellationToken): ProviderResult<IInlineChatResponse>;
 
+	provideFollowups?(session: IInlineChatSession, response: IInlineChatResponse, token: CancellationToken): ProviderResult<IChatReplyFollowup[]>;
+
 	handleInlineChatResponseFeedback?(session: IInlineChatSession, response: IInlineChatResponse, kind: InlineChatResponseFeedbackKind): void;
 }
 
@@ -143,6 +150,7 @@ export const CTX_INLINE_CHAT_RESPONSE_TYPES = new RawContextKey<InlineChateRespo
 export const CTX_INLINE_CHAT_DID_EDIT = new RawContextKey<boolean>('inlineChatDidEdit', undefined, localize('inlineChatDidEdit', "Whether interactive editor did change any code"));
 export const CTX_INLINE_CHAT_USER_DID_EDIT = new RawContextKey<boolean>('inlineChatUserDidEdit', undefined, localize('inlineChatUserDidEdit', "Whether the user did changes ontop of the inline chat"));
 export const CTX_INLINE_CHAT_LAST_FEEDBACK = new RawContextKey<'unhelpful' | 'helpful' | ''>('inlineChatLastFeedbackKind', '', localize('inlineChatLastFeedbackKind', "The last kind of feedback that was provided"));
+export const CTX_INLINE_CHAT_SUPPORT_ISSUE_REPORTING = new RawContextKey<boolean>('inlineChatSupportIssueReporting', false, localize('inlineChatSupportIssueReporting', "Whether the interactive editor supports issue reporting"));
 export const CTX_INLINE_CHAT_DOCUMENT_CHANGED = new RawContextKey<boolean>('inlineChatDocumentChanged', false, localize('inlineChatDocumentChanged', "Whether the document has changed concurrently"));
 export const CTX_INLINE_CHAT_EDIT_MODE = new RawContextKey<EditMode>('config.inlineChat.editMode', EditMode.Live);
 
@@ -184,6 +192,12 @@ export const enum EditMode {
 	Preview = 'preview'
 }
 
+export const enum ShowGutterIcon {
+	Always = 'always',
+	MouseOver = 'mouseover',
+	Never = 'never'
+}
+
 Registry.as<IConfigurationMigrationRegistry>(ExtensionsMigration.ConfigurationMigration).registerConfigurationMigrations(
 	[{
 		key: 'interactiveEditor.editMode', migrateFn: (value: any) => {
@@ -212,9 +226,15 @@ Registry.as<IConfigurationRegistry>(Extensions.Configuration).registerConfigurat
 			type: 'boolean'
 		},
 		'inlineChat.showGutterIcon': {
-			description: localize('showGutterIcon', "Show/hide a gutter icon for spawning inline chat on empty lines."),
-			default: false,
-			type: 'boolean'
+			description: localize('showGutterIcon', "Controls when the gutter icon for spawning inline chat is shown."),
+			default: ShowGutterIcon.Never,
+			type: 'string',
+			enum: [ShowGutterIcon.Always, ShowGutterIcon.MouseOver, ShowGutterIcon.Never],
+			markdownEnumDescriptions: [
+				localize('showGutterIcon.always', "Always show the gutter icon."),
+				localize('showGutterIcon.mouseover', "Show the gutter icon when the mouse is over the icon."),
+				localize('showGutterIcon.never', "Never show the gutter icon."),
+			]
 		}
 	}
 });
