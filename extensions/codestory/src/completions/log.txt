{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-1",
  "timestamp": "2024-02-14T18:05:54.186Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-1",
  "timestamp": "2024-02-14T18:05:54.187Z"
}
{
  "message": "sidecar.inlineProvider",
  "event_name": "generate_completions",
  "id": "completions-1",
  "timestamp": "2024-02-14T18:05:54.315Z"
}
{
  "message": "sidecar.inlineProvider.send_completion_request",
  "event_name": "send_completion_request",
  "id": "completions-1",
  "timestamp": "2024-02-14T18:05:54.315Z"
}
{
  "message": "sidecar.inlineProvider.responseStream",
  "event_name": "response_stream",
  "id": "completions-1",
  "time_taken": 0.09312498569488525,
  "timestamp": "2024-02-14T18:05:54.315Z"
}
{
  "message": "sidecar.completion_request.generator",
  "event_name": "sidecar.completion_request.generator",
  "id": "completions-1",
  "timestamp": "2024-02-14T18:05:54.316Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-1",
  "timestamp": "2024-02-14T18:05:54.420Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-2",
  "timestamp": "2024-02-14T18:05:54.471Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-2",
  "timestamp": "2024-02-14T18:05:54.472Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-2",
  "timestamp": "2024-02-14T18:05:54.540Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-3",
  "timestamp": "2024-02-14T18:05:54.685Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-3",
  "timestamp": "2024-02-14T18:05:54.685Z"
}
{
  "message": "sidecar.inlineProvider",
  "event_name": "generate_completions",
  "id": "completions-3",
  "timestamp": "2024-02-14T18:05:54.815Z"
}
{
  "message": "sidecar.inlineProvider.send_completion_request",
  "event_name": "send_completion_request",
  "id": "completions-3",
  "timestamp": "2024-02-14T18:05:54.815Z"
}
{
  "message": "sidecar.inlineProvider.responseStream",
  "event_name": "response_stream",
  "id": "completions-3",
  "time_taken": 0.019791007041931152,
  "timestamp": "2024-02-14T18:05:54.815Z"
}
{
  "message": "sidecar.completion_request.generator",
  "event_name": "sidecar.completion_request.generator",
  "id": "completions-3",
  "timestamp": "2024-02-14T18:05:54.815Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": true,
  "completion": "(!",
  "completion_len": 2,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T18:05:55.394Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-3",
  "partial_response": "(!",
  "timestamp": "2024-02-14T18:05:55.394Z"
}
{
  "message": "sidecar.multiline.completion_extract",
  "event_name": "sidecar.multiline.completion_extract",
  "raw_completion": "(!",
  "timestamp": "2024-02-14T18:05:55.394Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": true,
  "completion": "(!response",
  "completion_len": 10,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T18:05:55.410Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-3",
  "partial_response": "(!response",
  "timestamp": "2024-02-14T18:05:55.410Z"
}
{
  "message": "sidecar.multiline.completion_extract",
  "event_name": "sidecar.multiline.completion_extract",
  "raw_completion": "(!response",
  "timestamp": "2024-02-14T18:05:55.410Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": true,
  "completion": "(!responseStream",
  "completion_len": 16,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T18:05:55.438Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-3",
  "partial_response": "(!responseStream",
  "timestamp": "2024-02-14T18:05:55.438Z"
}
{
  "message": "sidecar.multiline.completion_extract",
  "event_name": "sidecar.multiline.completion_extract",
  "raw_completion": "(!responseStream",
  "timestamp": "2024-02-14T18:05:55.438Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": true,
  "completion": "(!responseStream)",
  "completion_len": 17,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T18:05:55.467Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-3",
  "partial_response": "(!responseStream)",
  "timestamp": "2024-02-14T18:05:55.467Z"
}
{
  "message": "sidecar.multiline.completion_extract",
  "event_name": "sidecar.multiline.completion_extract",
  "raw_completion": "(!responseStream)",
  "timestamp": "2024-02-14T18:05:55.467Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": true,
  "completion": "(!responseStream) {",
  "completion_len": 19,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T18:05:55.495Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-3",
  "partial_response": "(!responseStream) {",
  "timestamp": "2024-02-14T18:05:55.495Z"
}
{
  "message": "sidecar.multiline.completion_extract",
  "event_name": "sidecar.multiline.completion_extract",
  "raw_completion": "(!responseStream) {",
  "timestamp": "2024-02-14T18:05:55.495Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": true,
  "completion": "(!responseStream) {\n",
  "completion_len": 20,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T18:05:55.561Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 65,
    "character": 5
  },
  "completion_end_position": {
    "line": 65,
    "character": 24
  },
  "completion": "(!responseStream) {",
  "timestamp": "2024-02-14T18:05:55.561Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-3",
  "completion": "(!responseStream) {",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\t// console.log('sidecar.completion.isDynamicMultiline', isDynamicMultiline);\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tif ",
  "suffix": "\n\t\tconst abortController = forkSignal(abortSignal);\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\t// console.log('sidecar.completion.isDynamicMultiline', isDynamicMultiline);\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tif (!responseStream) {\n\t\tconst abortController = forkSignal(abortSignal);\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 65,
    "character": 5
  },
  "end_position": {
    "line": 65,
    "character": 24
  },
  "timestamp": "2024-02-14T18:05:55.561Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-3",
  "parse_error_count": 0,
  "completion": "(!responseStream) {",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-14T18:05:55.568Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-3",
  "partial_response": "(!responseStream) {\n",
  "timestamp": "2024-02-14T18:05:55.568Z"
}
{
  "message": "sidecar.multiline.completion_extract",
  "event_name": "sidecar.multiline.completion_extract",
  "completion": "(!responseStream) {",
  "raw_completion": "(!responseStream) {\n",
  "timestamp": "2024-02-14T18:05:55.568Z"
}
{
  "message": "sidecar.stop_streamind_and_use_partial_response",
  "event_name": "sidecar.stop_streaming_and_use_partial_response_first",
  "completion": "(!responseStream) {",
  "id": "completions-3",
  "timestamp": "2024-02-14T18:05:55.570Z"
}
{
  "message": "sidecar.request_manager.hotstreak.completions",
  "event_name": "sidecar.request_manager.hotstreak.completions",
  "id": "completions-3",
  "completions": 0,
  "timestamp": "2024-02-14T18:05:55.570Z"
}
{
  "message": "sidecar.hotstreak.create",
  "event_name": "hotstreak.create",
  "raw_completion": {
    "insertText": "(!responseStream) {",
    "points": {
      "start": {
        "row": 65,
        "column": 5
      },
      "end": {
        "row": 65,
        "column": 24
      }
    },
    "tree": {
      "0": 2362512,
      "language": {
        "0": 1071456,
        "types": [
          null,
          "identifier",
          "hash_bang_line",
          "export",
          "*",
          "default",
          "type",
          "=",
          "as",
          "namespace",
          "{",
          ",",
          "}",
          "typeof",
          "import",
          "from",
          "var",
          "let",
          "const",
          "!",
          "else",
          "if",
          "switch",
          "for",
          "(",
          ")",
          "await",
          "in",
          "of",
          "while",
          "do",
          "try",
          "with",
          "break",
          "continue",
          "debugger",
          "return",
          "throw",
          ";",
          ":",
          "case",
          "catch",
          "finally",
          "yield",
          "[",
          "]",
          "<",
          ">",
          "/",
          ".",
          "class",
          "async",
          "function",
          "=>",
          "?.",
          "new",
          "+=",
          "-=",
          "*=",
          "/=",
          "%=",
          "^=",
          "&=",
          "|=",
          ">>=",
          ">>>=",
          "<<=",
          "**=",
          "&&=",
          "||=",
          "??=",
          "...",
          "&&",
          "||",
          ">>",
          ">>>",
          "<<",
          "&",
          "^",
          "|",
          "+",
          "-",
          "%",
          "**",
          "<=",
          "==",
          "===",
          "!=",
          "!==",
          ">=",
          "??",
          "instanceof",
          "~",
          "void",
          "delete",
          "++",
          "--",
          "\"",
          "'",
          "string_fragment",
          "string_fragment",
          "escape_sequence",
          "comment",
          "`",
          "${",
          "/",
          "regex_pattern",
          "regex_flags",
          "number",
          "private_property_identifier",
          "target",
          "this",
          "super",
          "true",
          "false",
          "null",
          "undefined",
          "@",
          "static",
          "readonly",
          "get",
          "set",
          "?",
          "declare",
          "public",
          "private",
          "protected",
          "override",
          "module",
          "any",
          "number",
          "boolean",
          "string",
          "symbol",
          "abstract",
          "require",
          "extends",
          "implements",
          "global",
          "interface",
          "enum",
          "-?:",
          "?:",
          "asserts",
          "infer",
          "is",
          "keyof",
          "unknown",
          "never",
          "object",
          "{|",
          "|}",
          null,
          null,
          "?",
          null,
          "program",
          "export_statement",
          "export_clause",
          "export_specifier",
          null,
          "import",
          "import_statement",
          "import_clause",
          null,
          "namespace_import",
          "named_imports",
          "expression_statement",
          "variable_declaration",
          "lexical_declaration",
          "variable_declarator",
          "statement_block",
          "else_clause",
          "if_statement",
          "switch_statement",
          "for_statement",
          "for_in_statement",
          null,
          "while_statement",
          "do_statement",
          "try_statement",
          "with_statement",
          "break_statement",
          "continue_statement",
          "debugger_statement",
          "return_statement",
          "throw_statement",
          "empty_statement",
          "labeled_statement",
          "switch_body",
          "switch_case",
          "switch_default",
          "catch_clause",
          "finally_clause",
          "parenthesized_expression",
          null,
          null,
          "yield_expression",
          "object",
          "object_pattern",
          "assignment_pattern",
          "object_assignment_pattern",
          "array",
          "array_pattern",
          "nested_identifier",
          "class",
          "class_declaration",
          "class_heritage",
          "function",
          "function_declaration",
          "generator_function",
          "generator_function_declaration",
          "arrow_function",
          null,
          null,
          "call_expression",
          "new_expression",
          "await_expression",
          "member_expression",
          "subscript_expression",
          "assignment_expression",
          null,
          "augmented_assignment_expression",
          null,
          null,
          "spread_element",
          "ternary_expression",
          "binary_expression",
          "unary_expression",
          "update_expression",
          "sequence_expression",
          "string",
          "template_string",
          "template_substitution",
          "regex",
          "meta_property",
          "arguments",
          "decorator",
          "member_expression",
          "call_expression",
          "class_body",
          "formal_parameters",
          null,
          "rest_pattern",
          "method_definition",
          "pair",
          "pair_pattern",
          null,
          "computed_property_name",
          "public_field_definition",
          "non_null_expression",
          "method_signature",
          "abstract_method_signature",
          "function_signature",
          "type_assertion",
          "as_expression",
          "import_require_clause",
          "extends_clause",
          "implements_clause",
          "ambient_declaration",
          "abstract_class_declaration",
          "module",
          "internal_module",
          null,
          "import_alias",
          "nested_type_identifier",
          "interface_declaration",
          "extends_type_clause",
          "enum_declaration",
          "enum_body",
          "enum_assignment",
          "type_alias_declaration",
          "accessibility_modifier",
          "override_modifier",
          "required_parameter",
          "optional_parameter",
          null,
          "omitting_type_annotation",
          "opting_type_annotation",
          "type_annotation",
          "asserts",
          null,
          "required_parameter",
          "optional_parameter",
          "optional_type",
          "rest_type",
          null,
          "constructor_type",
          null,
          "template_type",
          "template_literal_type",
          "infer_type",
          "conditional_type",
          "generic_type",
          "type_predicate",
          "type_predicate_annotation",
          "member_expression",
          "subscript_expression",
          "call_expression",
          "type_query",
          "index_type_query",
          "lookup_type",
          "mapped_type_clause",
          "literal_type",
          "unary_expression",
          "existential_type",
          "flow_maybe_type",
          "parenthesized_type",
          "predefined_type",
          "type_arguments",
          "object_type",
          "call_signature",
          "property_signature",
          "type_parameters",
          "type_parameter",
          "default_type",
          "constraint",
          "construct_signature",
          "index_signature",
          "array_type",
          "tuple_type",
          "readonly_type",
          "union_type",
          "intersection_type",
          "function_type",
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          "import_specifier",
          "namespace_export",
          "property_identifier",
          "shorthand_property_identifier",
          "shorthand_property_identifier_pattern",
          "statement_identifier",
          "this_type",
          "type_identifier"
        ],
        "fields": [
          null,
          "alias",
          "alternative",
          "argument",
          "arguments",
          "body",
          "condition",
          "consequence",
          "constraint",
          "constructor",
          "declaration",
          "decorator",
          "finalizer",
          "flags",
          "function",
          "handler",
          "increment",
          "index",
          "index_type",
          "initializer",
          "key",
          "kind",
          "label",
          "left",
          "module",
          "name",
          "object",
          "operator",
          "parameter",
          "parameters",
          "pattern",
          "property",
          "return_type",
          "right",
          "sign",
          "source",
          "type",
          "type_arguments",
          "type_parameters",
          "value"
        ]
      }
    },
    "parseErrorCount": 0,
    "nodeTypes": {
      "atCursor": "statement_block",
      "parent": "method_definition",
      "grandparent": "class_body",
      "greatGrandparent": "class_declaration",
      "lastAncestorOnTheSameLine": "method_definition"
    },
    "nodeTypesWithCompletion": {
      "atCursor": "if_statement",
      "parent": "statement_block",
      "grandparent": "method_definition",
      "greatGrandparent": "class_body",
      "lastAncestorOnTheSameLine": "if_statement"
    }
  },
  "raw_completion_len": 19,
  "timestamp": "2024-02-14T18:05:55.570Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "(!responseStream) {\n",
  "raw_completion_len": 20,
  "is_request_ended": false,
  "updated_document_context": "(!responseStream) {\n\t\t\t",
  "id": "completions-3",
  "timestamp": "2024-02-14T18:05:55.571Z"
}
{
  "message": "sidecar.hotstreak.unprocessedCompletion",
  "event_name": "sidecar.hotstreak.unprocessedCompletion.empty",
  "id": "completions-3",
  "timestamp": "2024-02-14T18:05:55.571Z"
}
{
  "message": "sidecar.providerInlineCompletionItems.COMPLETE",
  "event_name": "sidecar.provide_inline_completions.COMPLETE",
  "inline_completions": [
    "(!responseStream) {"
  ],
  "id": "completions-3",
  "timestamp": "2024-02-14T18:05:55.572Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": true,
  "completion": "(!responseStream) {\n\t\t",
  "completion_len": 22,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T18:05:55.572Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "(!responseStream) {\n\t\t",
  "raw_completion_len": 22,
  "is_request_ended": false,
  "updated_document_context": "(!responseStream) {\n\t\t\t",
  "id": "completions-3",
  "timestamp": "2024-02-14T18:05:55.572Z"
}
{
  "message": "sidecar.hotstreak.unprocessedCompletion",
  "event_name": "sidecar.hotstreak.unprocessedCompletion.empty",
  "id": "completions-3",
  "timestamp": "2024-02-14T18:05:55.572Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-4",
  "timestamp": "2024-02-14T18:05:55.575Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-4",
  "timestamp": "2024-02-14T18:05:55.576Z"
}
{
  "message": "sidecar.reuseLastCandidate",
  "reuse": true,
  "id": "completions-4",
  "timestamp": "2024-02-14T18:05:55.576Z"
}
{
  "message": "sidecar.providerInlineCompletionItems.COMPLETE",
  "event_name": "sidecar.provide_inline_completions.COMPLETE",
  "inline_completions": [
    "(!responseStream) {"
  ],
  "id": "completions-4",
  "timestamp": "2024-02-14T18:05:55.577Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": true,
  "completion": "(!responseStream) {\n\t\t\treturn",
  "completion_len": 29,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T18:05:55.580Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "(!responseStream) {\n\t\t\treturn",
  "raw_completion_len": 29,
  "is_request_ended": false,
  "updated_document_context": "(!responseStream) {\n\t\t\t",
  "id": "completions-3",
  "timestamp": "2024-02-14T18:05:55.580Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-3",
  "partial_response": "return",
  "timestamp": "2024-02-14T18:05:55.580Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-3",
  "is_request_ended": false,
  "unprocessedCompletion": "return",
  "timestamp": "2024-02-14T18:05:55.580Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-3",
  "raw_completion": "(!responseStream) {\n\t\t\treturn",
  "unprocessed_completion": "return",
  "timestamp": "2024-02-14T18:05:55.580Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": true,
  "completion": "(!responseStream) {\n\t\t\treturn;",
  "completion_len": 30,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T18:05:55.607Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "(!responseStream) {\n\t\t\treturn;",
  "raw_completion_len": 30,
  "is_request_ended": false,
  "updated_document_context": "(!responseStream) {\n\t\t\t",
  "id": "completions-3",
  "timestamp": "2024-02-14T18:05:55.607Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 66,
    "character": 3
  },
  "completion_end_position": {
    "line": 66,
    "character": 10
  },
  "completion": "return;",
  "timestamp": "2024-02-14T18:05:55.608Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-3",
  "completion": "return;",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\t// console.log('sidecar.completion.isDynamicMultiline', isDynamicMultiline);\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tif (!responseStream) {\n\t\t\t",
  "suffix": "\n\t\tconst abortController = forkSignal(abortSignal);\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\t// console.log('sidecar.completion.isDynamicMultiline', isDynamicMultiline);\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tif (!responseStream) {\n\t\t\treturn;\n\t\tconst abortController = forkSignal(abortSignal);\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 65,
    "character": 5
  },
  "end_position": {
    "line": 66,
    "character": 10
  },
  "timestamp": "2024-02-14T18:05:55.608Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-3",
  "parse_error_count": 0,
  "completion": "return;",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-14T18:05:55.610Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\treturn;",
  "fixed_string": "\t\t\treturn;",
  "id": "completions-3",
  "timestamp": "2024-02-14T18:05:55.611Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "return;",
  "final_completion": "return;",
  "timestamp": "2024-02-14T18:05:55.611Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-3",
  "partial_response": "return;",
  "timestamp": "2024-02-14T18:05:55.611Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-3",
  "is_request_ended": false,
  "unprocessedCompletion": "return;",
  "timestamp": "2024-02-14T18:05:55.611Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-3",
  "raw_completion": "(!responseStream) {\n\t\t\treturn;",
  "unprocessed_completion": "return;",
  "timestamp": "2024-02-14T18:05:55.611Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": true,
  "completion": "(!responseStream) {\n\t\t\treturn;\n",
  "completion_len": 31,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T18:05:55.668Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "(!responseStream) {\n\t\t\treturn;\n",
  "raw_completion_len": 31,
  "is_request_ended": false,
  "updated_document_context": "(!responseStream) {\n\t\t\t",
  "id": "completions-3",
  "timestamp": "2024-02-14T18:05:55.668Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 66,
    "character": 3
  },
  "completion_end_position": {
    "line": 66,
    "character": 10
  },
  "completion": "return;",
  "timestamp": "2024-02-14T18:05:55.668Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-3",
  "completion": "return;",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\t// console.log('sidecar.completion.isDynamicMultiline', isDynamicMultiline);\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tif (!responseStream) {\n\t\t\t",
  "suffix": "\n\t\tconst abortController = forkSignal(abortSignal);\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\t// console.log('sidecar.completion.isDynamicMultiline', isDynamicMultiline);\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tif (!responseStream) {\n\t\t\treturn;\n\t\tconst abortController = forkSignal(abortSignal);\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 65,
    "character": 5
  },
  "end_position": {
    "line": 66,
    "character": 10
  },
  "timestamp": "2024-02-14T18:05:55.668Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-3",
  "parse_error_count": 0,
  "completion": "return;",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-14T18:05:55.671Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\treturn;",
  "fixed_string": "\t\t\treturn;",
  "id": "completions-3",
  "timestamp": "2024-02-14T18:05:55.671Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "return;",
  "final_completion": "return;",
  "timestamp": "2024-02-14T18:05:55.671Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-3",
  "partial_response": "return;\n",
  "timestamp": "2024-02-14T18:05:55.671Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-3",
  "is_request_ended": false,
  "unprocessedCompletion": "return;\n",
  "timestamp": "2024-02-14T18:05:55.671Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-3",
  "raw_completion": "(!responseStream) {\n\t\t\treturn;\n",
  "unprocessed_completion": "return;\n",
  "timestamp": "2024-02-14T18:05:55.671Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": true,
  "completion": "(!responseStream) {\n\t\t\treturn;\n\t",
  "completion_len": 32,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T18:05:55.672Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "(!responseStream) {\n\t\t\treturn;\n\t",
  "raw_completion_len": 32,
  "is_request_ended": false,
  "updated_document_context": "(!responseStream) {\n\t\t\t",
  "id": "completions-3",
  "timestamp": "2024-02-14T18:05:55.672Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 66,
    "character": 3
  },
  "completion_end_position": {
    "line": 66,
    "character": 10
  },
  "completion": "return;",
  "timestamp": "2024-02-14T18:05:55.672Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-3",
  "completion": "return;",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\t// console.log('sidecar.completion.isDynamicMultiline', isDynamicMultiline);\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tif (!responseStream) {\n\t\t\t",
  "suffix": "\n\t\tconst abortController = forkSignal(abortSignal);\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\t// console.log('sidecar.completion.isDynamicMultiline', isDynamicMultiline);\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tif (!responseStream) {\n\t\t\treturn;\n\t\tconst abortController = forkSignal(abortSignal);\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 65,
    "character": 5
  },
  "end_position": {
    "line": 66,
    "character": 10
  },
  "timestamp": "2024-02-14T18:05:55.672Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-3",
  "parse_error_count": 0,
  "completion": "return;",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-14T18:05:55.674Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\treturn;",
  "fixed_string": "\t\t\treturn;",
  "id": "completions-3",
  "timestamp": "2024-02-14T18:05:55.674Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "return;",
  "final_completion": "return;",
  "timestamp": "2024-02-14T18:05:55.674Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-3",
  "partial_response": "return;\n\t",
  "timestamp": "2024-02-14T18:05:55.674Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-3",
  "is_request_ended": false,
  "unprocessedCompletion": "return;\n\t",
  "timestamp": "2024-02-14T18:05:55.674Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-3",
  "raw_completion": "(!responseStream) {\n\t\t\treturn;\n\t",
  "unprocessed_completion": "return;\n\t",
  "timestamp": "2024-02-14T18:05:55.674Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": true,
  "completion": "(!responseStream) {\n\t\t\treturn;\n\t\t}",
  "completion_len": 34,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T18:05:55.703Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "(!responseStream) {\n\t\t\treturn;\n\t\t}",
  "raw_completion_len": 34,
  "is_request_ended": false,
  "updated_document_context": "(!responseStream) {\n\t\t\t",
  "id": "completions-3",
  "timestamp": "2024-02-14T18:05:55.703Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 66,
    "character": 3
  },
  "completion_end_position": {
    "line": 67,
    "character": 6
  },
  "completion": "return;\n\t\t}",
  "timestamp": "2024-02-14T18:05:55.703Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-3",
  "completion": "return;\n\t\t}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\t// console.log('sidecar.completion.isDynamicMultiline', isDynamicMultiline);\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tif (!responseStream) {\n\t\t\t",
  "suffix": "\n\t\tconst abortController = forkSignal(abortSignal);\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\t// console.log('sidecar.completion.isDynamicMultiline', isDynamicMultiline);\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tif (!responseStream) {\n\t\t\treturn;\n\t\t}\n\t\tconst abortController = forkSignal(abortSignal);\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 65,
    "character": 5
  },
  "end_position": {
    "line": 67,
    "character": 6
  },
  "timestamp": "2024-02-14T18:05:55.703Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-3",
  "parse_error_count": 0,
  "completion": "return;\n\t\t}",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-14T18:05:55.706Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\treturn;\n\t\t}",
  "fixed_string": "\t\t\treturn;\n\t\t}",
  "id": "completions-3",
  "timestamp": "2024-02-14T18:05:55.706Z"
}
{
  "message": "sidecar.truncate_parsed_completion.overlap",
  "event_name": "sidecar.truncate_parsed_completion.overlap",
  "completion": "return;\n\t\t}",
  "overlap": "return;\n\t\t}",
  "final_completion": "return;\n\t\t}",
  "timestamp": "2024-02-14T18:05:55.706Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-3",
  "partial_response": "return;\n\t\t}",
  "timestamp": "2024-02-14T18:05:55.706Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-3",
  "is_request_ended": false,
  "unprocessedCompletion": "return;\n\t\t}",
  "timestamp": "2024-02-14T18:05:55.706Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-3",
  "raw_completion": "(!responseStream) {\n\t\t\treturn;\n\t\t}",
  "unprocessed_completion": "return;\n\t\t}",
  "timestamp": "2024-02-14T18:05:55.706Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": true,
  "completion": "(!responseStream) {\n\t\t\treturn;\n\t\t}",
  "completion_len": 34,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T18:05:55.759Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "(!responseStream) {\n\t\t\treturn;\n\t\t}",
  "raw_completion_len": 34,
  "is_request_ended": false,
  "updated_document_context": "(!responseStream) {\n\t\t\t",
  "id": "completions-3",
  "timestamp": "2024-02-14T18:05:55.759Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 66,
    "character": 3
  },
  "completion_end_position": {
    "line": 67,
    "character": 6
  },
  "completion": "return;\n\t\t}",
  "timestamp": "2024-02-14T18:05:55.759Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-3",
  "completion": "return;\n\t\t}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\t// console.log('sidecar.completion.isDynamicMultiline', isDynamicMultiline);\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tif (!responseStream) {\n\t\t\t",
  "suffix": "\n\t\tconst abortController = forkSignal(abortSignal);\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\t// console.log('sidecar.completion.isDynamicMultiline', isDynamicMultiline);\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tif (!responseStream) {\n\t\t\treturn;\n\t\t}\n\t\tconst abortController = forkSignal(abortSignal);\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 65,
    "character": 5
  },
  "end_position": {
    "line": 67,
    "character": 6
  },
  "timestamp": "2024-02-14T18:05:55.759Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-3",
  "parse_error_count": 0,
  "completion": "return;\n\t\t}",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-14T18:05:55.762Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\treturn;\n\t\t}",
  "fixed_string": "\t\t\treturn;\n\t\t}",
  "id": "completions-3",
  "timestamp": "2024-02-14T18:05:55.762Z"
}
{
  "message": "sidecar.truncate_parsed_completion.overlap",
  "event_name": "sidecar.truncate_parsed_completion.overlap",
  "completion": "return;\n\t\t}",
  "overlap": "return;\n\t\t}",
  "final_completion": "return;\n\t\t}",
  "timestamp": "2024-02-14T18:05:55.762Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-3",
  "partial_response": "return;\n\t\t}",
  "timestamp": "2024-02-14T18:05:55.762Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-3",
  "is_request_ended": false,
  "unprocessedCompletion": "return;\n\t\t}",
  "timestamp": "2024-02-14T18:05:55.762Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-3",
  "raw_completion": "(!responseStream) {\n\t\t\treturn;\n\t\t}",
  "unprocessed_completion": "return;\n\t\t}",
  "timestamp": "2024-02-14T18:05:55.762Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-5",
  "timestamp": "2024-02-14T18:05:56.264Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-5",
  "timestamp": "2024-02-14T18:05:56.264Z"
}
{
  "message": "sidecar.inlineProvider",
  "event_name": "generate_completions",
  "id": "completions-5",
  "timestamp": "2024-02-14T18:05:56.391Z"
}
{
  "message": "sidecar.inlineProvider.send_completion_request",
  "event_name": "send_completion_request",
  "id": "completions-5",
  "timestamp": "2024-02-14T18:05:56.391Z"
}
{
  "message": "sidecar.inlineProvider.responseStream",
  "event_name": "response_stream",
  "id": "completions-5",
  "time_taken": 0.02079099416732788,
  "timestamp": "2024-02-14T18:05:56.391Z"
}
{
  "message": "sidecar.completion_request.generator",
  "event_name": "sidecar.completion_request.generator",
  "id": "completions-5",
  "timestamp": "2024-02-14T18:05:56.391Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-5",
  "timestamp": "2024-02-14T18:05:56.500Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-6",
  "timestamp": "2024-02-14T18:05:56.551Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-6",
  "timestamp": "2024-02-14T18:05:56.551Z"
}
{
  "message": "sidecar.inlineProvider",
  "event_name": "generate_completions",
  "id": "completions-6",
  "timestamp": "2024-02-14T18:05:56.682Z"
}
{
  "message": "sidecar.inlineProvider.send_completion_request",
  "event_name": "send_completion_request",
  "id": "completions-6",
  "timestamp": "2024-02-14T18:05:56.682Z"
}
{
  "message": "sidecar.inlineProvider.responseStream",
  "event_name": "response_stream",
  "id": "completions-6",
  "time_taken": 0.016708016395568848,
  "timestamp": "2024-02-14T18:05:56.682Z"
}
{
  "message": "sidecar.completion_request.generator",
  "event_name": "sidecar.completion_request.generator",
  "id": "completions-6",
  "timestamp": "2024-02-14T18:05:56.682Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": true,
  "completion": "return",
  "completion_len": 6,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T18:05:57.662Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-6",
  "partial_response": "return",
  "timestamp": "2024-02-14T18:05:57.662Z"
}
{
  "message": "sidecar.multiline.completion_extract",
  "event_name": "sidecar.multiline.completion_extract",
  "raw_completion": "return",
  "timestamp": "2024-02-14T18:05:57.662Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": true,
  "completion": "return;",
  "completion_len": 7,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T18:05:57.668Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 66,
    "character": 3
  },
  "completion_end_position": {
    "line": 66,
    "character": 10
  },
  "completion": "return;",
  "timestamp": "2024-02-14T18:05:57.669Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-6",
  "completion": "return;",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\t// console.log('sidecar.completion.isDynamicMultiline', isDynamicMultiline);\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tif (!responseStream) {\n\t\t\t",
  "suffix": "\n\t\tconst abortController = forkSignal(abortSignal);\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\t// console.log('sidecar.completion.isDynamicMultiline', isDynamicMultiline);\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tif (!responseStream) {\n\t\t\treturn;\n\t\tconst abortController = forkSignal(abortSignal);\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 3
  },
  "end_position": {
    "line": 66,
    "character": 10
  },
  "timestamp": "2024-02-14T18:05:57.669Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-6",
  "parse_error_count": 0,
  "completion": "return;",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-14T18:05:57.671Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\treturn;",
  "fixed_string": "\t\t\treturn;",
  "id": "completions-6",
  "timestamp": "2024-02-14T18:05:57.671Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "return;",
  "final_completion": "return;",
  "timestamp": "2024-02-14T18:05:57.671Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-6",
  "partial_response": "return;",
  "timestamp": "2024-02-14T18:05:57.671Z"
}
{
  "message": "sidecar.multiline.completion_extract",
  "event_name": "sidecar.multiline.completion_extract",
  "raw_completion": "return;",
  "timestamp": "2024-02-14T18:05:57.671Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "return;\n",
  "completion_len": 8,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T18:05:57.725Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 66,
    "character": 3
  },
  "completion_end_position": {
    "line": 66,
    "character": 10
  },
  "completion": "return;",
  "timestamp": "2024-02-14T18:05:57.726Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-6",
  "completion": "return;",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\t// console.log('sidecar.completion.isDynamicMultiline', isDynamicMultiline);\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tif (!responseStream) {\n\t\t\t",
  "suffix": "\n\t\tconst abortController = forkSignal(abortSignal);\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\t// console.log('sidecar.completion.isDynamicMultiline', isDynamicMultiline);\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tif (!responseStream) {\n\t\t\treturn;\n\t\tconst abortController = forkSignal(abortSignal);\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 3
  },
  "end_position": {
    "line": 66,
    "character": 10
  },
  "timestamp": "2024-02-14T18:05:57.726Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-6",
  "parse_error_count": 0,
  "completion": "return;",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-14T18:05:57.728Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\treturn;",
  "fixed_string": "\t\t\treturn;",
  "id": "completions-6",
  "timestamp": "2024-02-14T18:05:57.728Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "return;",
  "final_completion": "return;",
  "timestamp": "2024-02-14T18:05:57.728Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-6",
  "partial_response": "return;\n",
  "timestamp": "2024-02-14T18:05:57.728Z"
}
{
  "message": "sidecar.multiline.completion_extract",
  "event_name": "sidecar.multiline.completion_extract",
  "raw_completion": "return;\n",
  "timestamp": "2024-02-14T18:05:57.728Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "return;\n\t",
  "completion_len": 9,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T18:05:57.729Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 66,
    "character": 3
  },
  "completion_end_position": {
    "line": 66,
    "character": 10
  },
  "completion": "return;",
  "timestamp": "2024-02-14T18:05:57.729Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-6",
  "completion": "return;",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\t// console.log('sidecar.completion.isDynamicMultiline', isDynamicMultiline);\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tif (!responseStream) {\n\t\t\t",
  "suffix": "\n\t\tconst abortController = forkSignal(abortSignal);\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\t// console.log('sidecar.completion.isDynamicMultiline', isDynamicMultiline);\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tif (!responseStream) {\n\t\t\treturn;\n\t\tconst abortController = forkSignal(abortSignal);\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 3
  },
  "end_position": {
    "line": 66,
    "character": 10
  },
  "timestamp": "2024-02-14T18:05:57.729Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-6",
  "parse_error_count": 0,
  "completion": "return;",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-14T18:05:57.731Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\treturn;",
  "fixed_string": "\t\t\treturn;",
  "id": "completions-6",
  "timestamp": "2024-02-14T18:05:57.731Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "return;",
  "final_completion": "return;",
  "timestamp": "2024-02-14T18:05:57.731Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-6",
  "partial_response": "return;\n\t",
  "timestamp": "2024-02-14T18:05:57.731Z"
}
{
  "message": "sidecar.multiline.completion_extract",
  "event_name": "sidecar.multiline.completion_extract",
  "raw_completion": "return;\n\t",
  "timestamp": "2024-02-14T18:05:57.731Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "return;\n\t\t}",
  "completion_len": 11,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T18:05:57.755Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 66,
    "character": 3
  },
  "completion_end_position": {
    "line": 67,
    "character": 6
  },
  "completion": "return;\n\t\t}",
  "timestamp": "2024-02-14T18:05:57.755Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-6",
  "completion": "return;\n\t\t}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\t// console.log('sidecar.completion.isDynamicMultiline', isDynamicMultiline);\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tif (!responseStream) {\n\t\t\t",
  "suffix": "\n\t\tconst abortController = forkSignal(abortSignal);\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\t// console.log('sidecar.completion.isDynamicMultiline', isDynamicMultiline);\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tif (!responseStream) {\n\t\t\treturn;\n\t\t}\n\t\tconst abortController = forkSignal(abortSignal);\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 3
  },
  "end_position": {
    "line": 67,
    "character": 6
  },
  "timestamp": "2024-02-14T18:05:57.755Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-6",
  "parse_error_count": 0,
  "completion": "return;\n\t\t}",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-14T18:05:57.759Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\treturn;\n\t\t}",
  "fixed_string": "\t\t\treturn;\n\t\t}",
  "id": "completions-6",
  "timestamp": "2024-02-14T18:05:57.759Z"
}
{
  "message": "sidecar.truncate_parsed_completion.overlap",
  "event_name": "sidecar.truncate_parsed_completion.overlap",
  "completion": "return;\n\t\t}",
  "overlap": "return;\n\t\t}",
  "final_completion": "return;\n\t\t}",
  "timestamp": "2024-02-14T18:05:57.759Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-6",
  "partial_response": "return;\n\t\t}",
  "timestamp": "2024-02-14T18:05:57.759Z"
}
{
  "message": "sidecar.multiline.completion_extract",
  "event_name": "sidecar.multiline.completion_extract",
  "raw_completion": "return;\n\t\t}",
  "timestamp": "2024-02-14T18:05:57.759Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "return;\n\t\t}",
  "completion_len": 11,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T18:05:57.818Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 66,
    "character": 3
  },
  "completion_end_position": {
    "line": 67,
    "character": 6
  },
  "completion": "return;\n\t\t}",
  "timestamp": "2024-02-14T18:05:57.818Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-6",
  "completion": "return;\n\t\t}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\t// console.log('sidecar.completion.isDynamicMultiline', isDynamicMultiline);\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tif (!responseStream) {\n\t\t\t",
  "suffix": "\n\t\tconst abortController = forkSignal(abortSignal);\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\t// console.log('sidecar.completion.isDynamicMultiline', isDynamicMultiline);\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tif (!responseStream) {\n\t\t\treturn;\n\t\t}\n\t\tconst abortController = forkSignal(abortSignal);\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 3
  },
  "end_position": {
    "line": 67,
    "character": 6
  },
  "timestamp": "2024-02-14T18:05:57.819Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-6",
  "parse_error_count": 0,
  "completion": "return;\n\t\t}",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-14T18:05:57.821Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\treturn;\n\t\t}",
  "fixed_string": "\t\t\treturn;\n\t\t}",
  "id": "completions-6",
  "timestamp": "2024-02-14T18:05:57.821Z"
}
{
  "message": "sidecar.truncate_parsed_completion.overlap",
  "event_name": "sidecar.truncate_parsed_completion.overlap",
  "completion": "return;\n\t\t}",
  "overlap": "return;\n\t\t}",
  "final_completion": "return;\n\t\t}",
  "timestamp": "2024-02-14T18:05:57.821Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-6",
  "partial_response": "return;\n\t\t}",
  "timestamp": "2024-02-14T18:05:57.821Z"
}
{
  "message": "sidecar.multiline.completion_extract",
  "event_name": "sidecar.multiline.completion_extract",
  "raw_completion": "return;\n\t\t}",
  "timestamp": "2024-02-14T18:05:57.821Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-6",
  "timestamp": "2024-02-14T18:05:58.260Z"
}
