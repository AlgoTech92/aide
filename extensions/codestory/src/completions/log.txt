{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-20",
  "timestamp": "2024-02-14T19:09:28.751Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-20",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-14T19:09:28.751Z"
}
{
  "message": "sidecar.inlineProvider",
  "event_name": "generate_completions",
  "id": "completions-20",
  "timestamp": "2024-02-14T19:09:28.881Z"
}
{
  "message": "sidecar.inlineProvider.send_completion_request",
  "event_name": "send_completion_request",
  "id": "completions-20",
  "timestamp": "2024-02-14T19:09:28.881Z"
}
{
  "message": "sidecar.inlineProvider.responseStream",
  "event_name": "response_stream",
  "id": "completions-20",
  "time_taken": 0.0257909893989563,
  "timestamp": "2024-02-14T19:09:28.881Z"
}
{
  "message": "sidecar.completion_request.generator",
  "event_name": "sidecar.completion_request.generator",
  "id": "completions-20",
  "timestamp": "2024-02-14T19:09:28.881Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-20",
  "timestamp": "2024-02-14T19:09:28.919Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-21",
  "timestamp": "2024-02-14T19:09:28.988Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-21",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-14T19:09:28.988Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-21",
  "timestamp": "2024-02-14T19:09:29.060Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-22",
  "timestamp": "2024-02-14T19:09:29.111Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-22",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-14T19:09:29.111Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-22",
  "timestamp": "2024-02-14T19:09:29.155Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-23",
  "timestamp": "2024-02-14T19:09:29.207Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-23",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-14T19:09:29.207Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-23",
  "timestamp": "2024-02-14T19:09:29.315Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-24",
  "timestamp": "2024-02-14T19:09:29.375Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-24",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-14T19:09:29.375Z"
}
{
  "message": "sidecar.inlineProvider",
  "event_name": "generate_completions",
  "id": "completions-24",
  "timestamp": "2024-02-14T19:09:29.505Z"
}
{
  "message": "sidecar.inlineProvider.send_completion_request",
  "event_name": "send_completion_request",
  "id": "completions-24",
  "timestamp": "2024-02-14T19:09:29.505Z"
}
{
  "message": "sidecar.inlineProvider.responseStream",
  "event_name": "response_stream",
  "id": "completions-24",
  "time_taken": 0.016499996185302734,
  "timestamp": "2024-02-14T19:09:29.505Z"
}
{
  "message": "sidecar.completion_request.generator",
  "event_name": "sidecar.completion_request.generator",
  "id": "completions-24",
  "timestamp": "2024-02-14T19:09:29.506Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-24",
  "timestamp": "2024-02-14T19:09:29.525Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-25",
  "timestamp": "2024-02-14T19:09:29.642Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-25",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-14T19:09:29.642Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-25",
  "timestamp": "2024-02-14T19:09:29.652Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-26",
  "timestamp": "2024-02-14T19:09:29.703Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-26",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-14T19:09:29.703Z"
}
{
  "message": "sidecar.inlineProvider",
  "event_name": "generate_completions",
  "id": "completions-26",
  "timestamp": "2024-02-14T19:09:29.834Z"
}
{
  "message": "sidecar.inlineProvider.send_completion_request",
  "event_name": "send_completion_request",
  "id": "completions-26",
  "timestamp": "2024-02-14T19:09:29.834Z"
}
{
  "message": "sidecar.inlineProvider.responseStream",
  "event_name": "response_stream",
  "id": "completions-26",
  "time_taken": 0.015958964824676514,
  "timestamp": "2024-02-14T19:09:29.834Z"
}
{
  "message": "sidecar.completion_request.generator",
  "event_name": "sidecar.completion_request.generator",
  "id": "completions-26",
  "timestamp": "2024-02-14T19:09:29.834Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-26",
  "timestamp": "2024-02-14T19:09:29.970Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-27",
  "timestamp": "2024-02-14T19:09:30.020Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-27",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-14T19:09:30.020Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-27",
  "timestamp": "2024-02-14T19:09:30.099Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-28",
  "timestamp": "2024-02-14T19:09:30.150Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-28",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-14T19:09:30.150Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-28",
  "timestamp": "2024-02-14T19:09:30.199Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-29",
  "timestamp": "2024-02-14T19:09:30.249Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-29",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-14T19:09:30.249Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-29",
  "timestamp": "2024-02-14T19:09:30.320Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-30",
  "timestamp": "2024-02-14T19:09:30.422Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-30",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-14T19:09:30.423Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-30",
  "timestamp": "2024-02-14T19:09:30.454Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-31",
  "timestamp": "2024-02-14T19:09:30.506Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-31",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-14T19:09:30.506Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-31",
  "timestamp": "2024-02-14T19:09:30.568Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-32",
  "timestamp": "2024-02-14T19:09:30.620Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-32",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-14T19:09:30.621Z"
}
{
  "message": "sidecar.inlineProvider",
  "event_name": "generate_completions",
  "id": "completions-32",
  "timestamp": "2024-02-14T19:09:30.747Z"
}
{
  "message": "sidecar.inlineProvider.send_completion_request",
  "event_name": "send_completion_request",
  "id": "completions-32",
  "timestamp": "2024-02-14T19:09:30.747Z"
}
{
  "message": "sidecar.inlineProvider.responseStream",
  "event_name": "response_stream",
  "id": "completions-32",
  "time_taken": 0.012791991233825684,
  "timestamp": "2024-02-14T19:09:30.747Z"
}
{
  "message": "sidecar.completion_request.generator",
  "event_name": "sidecar.completion_request.generator",
  "id": "completions-32",
  "timestamp": "2024-02-14T19:09:30.747Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-32",
  "timestamp": "2024-02-14T19:09:31.240Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-33",
  "timestamp": "2024-02-14T19:09:31.290Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-33",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-14T19:09:31.290Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-33",
  "timestamp": "2024-02-14T19:09:31.332Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-34",
  "timestamp": "2024-02-14T19:09:31.384Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-34",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-14T19:09:31.384Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-34",
  "timestamp": "2024-02-14T19:09:31.447Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-35",
  "timestamp": "2024-02-14T19:09:31.544Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-35",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-14T19:09:31.544Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-35",
  "timestamp": "2024-02-14T19:09:31.627Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-36",
  "timestamp": "2024-02-14T19:09:31.677Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-36",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-14T19:09:31.677Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-36",
  "timestamp": "2024-02-14T19:09:31.691Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-37",
  "timestamp": "2024-02-14T19:09:31.756Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-37",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-14T19:09:31.756Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-37",
  "timestamp": "2024-02-14T19:09:31.827Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-38",
  "timestamp": "2024-02-14T19:09:31.878Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-38",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-14T19:09:31.878Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-38",
  "timestamp": "2024-02-14T19:09:31.919Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-39",
  "timestamp": "2024-02-14T19:09:31.970Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-39",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-14T19:09:31.970Z"
}
{
  "message": "sidecar.inlineProvider",
  "event_name": "generate_completions",
  "id": "completions-39",
  "timestamp": "2024-02-14T19:09:32.099Z"
}
{
  "message": "sidecar.inlineProvider.send_completion_request",
  "event_name": "send_completion_request",
  "id": "completions-39",
  "timestamp": "2024-02-14T19:09:32.099Z"
}
{
  "message": "sidecar.inlineProvider.responseStream",
  "event_name": "response_stream",
  "id": "completions-39",
  "time_taken": 0.013917028903961182,
  "timestamp": "2024-02-14T19:09:32.099Z"
}
{
  "message": "sidecar.completion_request.generator",
  "event_name": "sidecar.completion_request.generator",
  "id": "completions-39",
  "timestamp": "2024-02-14T19:09:32.099Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-39",
  "timestamp": "2024-02-14T19:09:32.100Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-40",
  "timestamp": "2024-02-14T19:09:32.207Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-40",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-14T19:09:32.207Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-40",
  "timestamp": "2024-02-14T19:09:32.259Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-41",
  "timestamp": "2024-02-14T19:09:32.310Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-41",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-14T19:09:32.310Z"
}
{
  "message": "sidecar.cancelIrrelevantRequests",
  "event_name": "cancel_irrelevant_requests",
  "request_id_reason": "completions-41",
  "request_id_broken_do_not_trust": "completions-41",
  "timestamp": "2024-02-14T19:09:32.436Z"
}
{
  "message": "sidecar.inlineProvider",
  "event_name": "generate_completions",
  "id": "completions-41",
  "timestamp": "2024-02-14T19:09:32.436Z"
}
{
  "message": "sidecar.inlineProvider.send_completion_request",
  "event_name": "send_completion_request",
  "id": "completions-41",
  "timestamp": "2024-02-14T19:09:32.436Z"
}
{
  "message": "sidecar.inlineProvider.responseStream",
  "event_name": "response_stream",
  "id": "completions-41",
  "time_taken": 0.011999964714050293,
  "timestamp": "2024-02-14T19:09:32.436Z"
}
{
  "message": "sidecar.completion_request.generator",
  "event_name": "sidecar.completion_request.generator",
  "id": "completions-41",
  "timestamp": "2024-02-14T19:09:32.436Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-41",
  "timestamp": "2024-02-14T19:09:32.535Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-42",
  "timestamp": "2024-02-14T19:09:32.587Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-42",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-14T19:09:32.587Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-42",
  "timestamp": "2024-02-14T19:09:32.615Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-43",
  "timestamp": "2024-02-14T19:09:32.665Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-43",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-14T19:09:32.665Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-43",
  "timestamp": "2024-02-14T19:09:32.714Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-44",
  "timestamp": "2024-02-14T19:09:32.773Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-44",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-14T19:09:32.773Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-44",
  "timestamp": "2024-02-14T19:09:32.890Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-45",
  "timestamp": "2024-02-14T19:09:32.942Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-45",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-14T19:09:32.942Z"
}
{
  "message": "sidecar.inlineProvider",
  "event_name": "generate_completions",
  "id": "completions-45",
  "timestamp": "2024-02-14T19:09:33.073Z"
}
{
  "message": "sidecar.inlineProvider.send_completion_request",
  "event_name": "send_completion_request",
  "id": "completions-45",
  "timestamp": "2024-02-14T19:09:33.073Z"
}
{
  "message": "sidecar.inlineProvider.responseStream",
  "event_name": "response_stream",
  "id": "completions-45",
  "time_taken": 0.01816701889038086,
  "timestamp": "2024-02-14T19:09:33.073Z"
}
{
  "message": "sidecar.completion_request.generator",
  "event_name": "sidecar.completion_request.generator",
  "id": "completions-45",
  "timestamp": "2024-02-14T19:09:33.073Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-45",
  "timestamp": "2024-02-14T19:09:33.101Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-46",
  "timestamp": "2024-02-14T19:09:33.151Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-46",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-14T19:09:33.152Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-46",
  "timestamp": "2024-02-14T19:09:33.193Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-47",
  "timestamp": "2024-02-14T19:09:33.245Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-47",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-14T19:09:33.246Z"
}
{
  "message": "sidecar.inlineProvider",
  "event_name": "generate_completions",
  "id": "completions-47",
  "timestamp": "2024-02-14T19:09:33.375Z"
}
{
  "message": "sidecar.inlineProvider.send_completion_request",
  "event_name": "send_completion_request",
  "id": "completions-47",
  "timestamp": "2024-02-14T19:09:33.376Z"
}
{
  "message": "sidecar.inlineProvider.responseStream",
  "event_name": "response_stream",
  "id": "completions-47",
  "time_taken": 0.016499996185302734,
  "timestamp": "2024-02-14T19:09:33.376Z"
}
{
  "message": "sidecar.completion_request.generator",
  "event_name": "sidecar.completion_request.generator",
  "id": "completions-47",
  "timestamp": "2024-02-14T19:09:33.376Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-47",
  "timestamp": "2024-02-14T19:09:33.400Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-48",
  "timestamp": "2024-02-14T19:09:33.454Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-48",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-14T19:09:33.454Z"
}
{
  "message": "sidecar.inlineProvider",
  "event_name": "generate_completions",
  "id": "completions-48",
  "timestamp": "2024-02-14T19:09:33.585Z"
}
{
  "message": "sidecar.inlineProvider.send_completion_request",
  "event_name": "send_completion_request",
  "id": "completions-48",
  "timestamp": "2024-02-14T19:09:33.585Z"
}
{
  "message": "sidecar.inlineProvider.responseStream",
  "event_name": "response_stream",
  "id": "completions-48",
  "time_taken": 0.015208005905151367,
  "timestamp": "2024-02-14T19:09:33.585Z"
}
{
  "message": "sidecar.completion_request.generator",
  "event_name": "sidecar.completion_request.generator",
  "id": "completions-48",
  "timestamp": "2024-02-14T19:09:33.585Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-48",
  "timestamp": "2024-02-14T19:09:33.777Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:33.829Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-49",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-14T19:09:33.829Z"
}
{
  "message": "sidecar.inlineProvider",
  "event_name": "generate_completions",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:33.958Z"
}
{
  "message": "sidecar.inlineProvider.send_completion_request",
  "event_name": "send_completion_request",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:33.958Z"
}
{
  "message": "sidecar.inlineProvider.responseStream",
  "event_name": "response_stream",
  "id": "completions-49",
  "time_taken": 0.015250027179718018,
  "timestamp": "2024-02-14T19:09:33.958Z"
}
{
  "message": "sidecar.completion_request.generator",
  "event_name": "sidecar.completion_request.generator",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:33.958Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "ab",
  "completion_len": 2,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T19:09:34.525Z"
}
{
  "message": "sidecar.DO_NOT_LOG",
  "event_name": "DO_NOT_LOG_EVER",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:34.525Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-49",
  "partial_response": "ab",
  "timestamp": "2024-02-14T19:09:34.525Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "abort",
  "completion_len": 5,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T19:09:34.552Z"
}
{
  "message": "sidecar.DO_NOT_LOG",
  "event_name": "DO_NOT_LOG_EVER",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:34.552Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-49",
  "partial_response": "abort",
  "timestamp": "2024-02-14T19:09:34.552Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "abortController",
  "completion_len": 15,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T19:09:34.577Z"
}
{
  "message": "sidecar.DO_NOT_LOG",
  "event_name": "DO_NOT_LOG_EVER",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:34.577Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-49",
  "partial_response": "abortController",
  "timestamp": "2024-02-14T19:09:34.577Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "abortController.",
  "completion_len": 16,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T19:09:34.610Z"
}
{
  "message": "sidecar.DO_NOT_LOG",
  "event_name": "DO_NOT_LOG_EVER",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:34.610Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-49",
  "partial_response": "abortController.",
  "timestamp": "2024-02-14T19:09:34.610Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "abortController.signal",
  "completion_len": 22,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T19:09:34.647Z"
}
{
  "message": "sidecar.DO_NOT_LOG",
  "event_name": "DO_NOT_LOG_EVER",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:34.647Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-49",
  "partial_response": "abortController.signal",
  "timestamp": "2024-02-14T19:09:34.648Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "abortController.signal.",
  "completion_len": 23,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T19:09:34.662Z"
}
{
  "message": "sidecar.DO_NOT_LOG",
  "event_name": "DO_NOT_LOG_EVER",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:34.662Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-49",
  "partial_response": "abortController.signal.",
  "timestamp": "2024-02-14T19:09:34.662Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "abortController.signal.addEventListener",
  "completion_len": 39,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T19:09:34.700Z"
}
{
  "message": "sidecar.DO_NOT_LOG",
  "event_name": "DO_NOT_LOG_EVER",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:34.700Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-49",
  "partial_response": "abortController.signal.addEventListener",
  "timestamp": "2024-02-14T19:09:34.700Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('",
  "completion_len": 41,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T19:09:34.718Z"
}
{
  "message": "sidecar.DO_NOT_LOG",
  "event_name": "DO_NOT_LOG_EVER",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:34.718Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-49",
  "partial_response": "abortController.signal.addEventListener('",
  "timestamp": "2024-02-14T19:09:34.718Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('ab",
  "completion_len": 43,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T19:09:34.750Z"
}
{
  "message": "sidecar.DO_NOT_LOG",
  "event_name": "DO_NOT_LOG_EVER",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:34.750Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-49",
  "partial_response": "abortController.signal.addEventListener('ab",
  "timestamp": "2024-02-14T19:09:34.750Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort",
  "completion_len": 46,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T19:09:34.774Z"
}
{
  "message": "sidecar.DO_NOT_LOG",
  "event_name": "DO_NOT_LOG_EVER",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:34.774Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-49",
  "partial_response": "abortController.signal.addEventListener('abort",
  "timestamp": "2024-02-14T19:09:34.774Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort',",
  "completion_len": 48,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T19:09:34.809Z"
}
{
  "message": "sidecar.DO_NOT_LOG",
  "event_name": "DO_NOT_LOG_EVER",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:34.809Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-49",
  "partial_response": "abortController.signal.addEventListener('abort',",
  "timestamp": "2024-02-14T19:09:34.809Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', ()",
  "completion_len": 51,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T19:09:34.830Z"
}
{
  "message": "sidecar.DO_NOT_LOG",
  "event_name": "DO_NOT_LOG_EVER",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:34.830Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-49",
  "partial_response": "abortController.signal.addEventListener('abort', ()",
  "timestamp": "2024-02-14T19:09:34.830Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () =>",
  "completion_len": 54,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T19:09:34.860Z"
}
{
  "message": "sidecar.DO_NOT_LOG",
  "event_name": "DO_NOT_LOG_EVER",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:34.860Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-49",
  "partial_response": "abortController.signal.addEventListener('abort', () =>",
  "timestamp": "2024-02-14T19:09:34.860Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {",
  "completion_len": 56,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T19:09:34.886Z"
}
{
  "message": "sidecar.DO_NOT_LOG",
  "event_name": "DO_NOT_LOG_EVER",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:34.886Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-49",
  "partial_response": "abortController.signal.addEventListener('abort', () => {",
  "timestamp": "2024-02-14T19:09:34.886Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n",
  "completion_len": 57,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T19:09:34.945Z"
}
{
  "message": "sidecar.DO_NOT_LOG",
  "event_name": "DO_NOT_LOG_EVER",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:34.945Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 66,
    "character": 2
  },
  "completion_end_position": {
    "line": 66,
    "character": 58
  },
  "completion": "abortController.signal.addEventListener('abort', () => {",
  "timestamp": "2024-02-14T19:09:34.945Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "abortController.signal.addEventListener('abort', () => {",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 66,
    "character": 58
  },
  "timestamp": "2024-02-14T19:09:34.945Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:34.948Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {})",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:34.948Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 66,
    "character": 2
  },
  "completion_end_position": {
    "line": 66,
    "character": 60
  },
  "completion": "abortController.signal.addEventListener('abort', () => {})",
  "timestamp": "2024-02-14T19:09:34.949Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "abortController.signal.addEventListener('abort', () => {})",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 66,
    "character": 60
  },
  "timestamp": "2024-02-14T19:09:34.949Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-14T19:09:34.951Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {",
  "final_completion": "abortController.signal.addEventListener('abort', () => {",
  "timestamp": "2024-02-14T19:09:34.951Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "abortController.signal.addEventListener('abort', () => {",
  "completion": "abortController.signal.addEventListener('abort', () => {\n",
  "timestamp": "2024-02-14T19:09:34.951Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n",
  "timestamp": "2024-02-14T19:09:34.951Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t",
  "completion_len": 59,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T19:09:34.951Z"
}
{
  "message": "sidecar.DO_NOT_LOG",
  "event_name": "DO_NOT_LOG_EVER",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:34.951Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 66,
    "character": 2
  },
  "completion_end_position": {
    "line": 66,
    "character": 58
  },
  "completion": "abortController.signal.addEventListener('abort', () => {",
  "timestamp": "2024-02-14T19:09:34.951Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "abortController.signal.addEventListener('abort', () => {",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 66,
    "character": 58
  },
  "timestamp": "2024-02-14T19:09:34.952Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:34.954Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {})",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:34.954Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 66,
    "character": 2
  },
  "completion_end_position": {
    "line": 66,
    "character": 60
  },
  "completion": "abortController.signal.addEventListener('abort', () => {})",
  "timestamp": "2024-02-14T19:09:34.954Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "abortController.signal.addEventListener('abort', () => {})",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 66,
    "character": 60
  },
  "timestamp": "2024-02-14T19:09:34.954Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-14T19:09:34.956Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {",
  "final_completion": "abortController.signal.addEventListener('abort', () => {",
  "timestamp": "2024-02-14T19:09:34.956Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "abortController.signal.addEventListener('abort', () => {",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t",
  "timestamp": "2024-02-14T19:09:34.956Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t",
  "timestamp": "2024-02-14T19:09:34.956Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis",
  "completion_len": 64,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T19:09:34.968Z"
}
{
  "message": "sidecar.DO_NOT_LOG",
  "event_name": "DO_NOT_LOG_EVER",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:34.968Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 66,
    "character": 2
  },
  "completion_end_position": {
    "line": 67,
    "character": 9
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis",
  "timestamp": "2024-02-14T19:09:34.968Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 67,
    "character": 9
  },
  "timestamp": "2024-02-14T19:09:34.968Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:34.971Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis",
  "timestamp": "2024-02-14T19:09:34.971Z"
}
{
  "message": "sidecar.stop_streamind_and_use_partial_response",
  "event_name": "sidecar.stop_streaming_and_use_partial_response_first",
  "completion": "abortController.signal.addEventListener('abort', () => {",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:34.971Z"
}
{
  "message": "sidecar.request_manager.hotstreak.completions",
  "event_name": "sidecar.request_manager.hotstreak.completions",
  "id": "completions-49",
  "completions": 0,
  "timestamp": "2024-02-14T19:09:34.971Z"
}
{
  "message": "sidecar.hotstreak.create",
  "event_name": "hotstreak.create",
  "raw_completion": {
    "insertText": "abortController.signal.addEventListener('abort', () => {",
    "points": {
      "start": {
        "row": 66,
        "column": 2
      },
      "end": {
        "row": 67,
        "column": 9
      }
    },
    "tree": {
      "0": 10597192,
      "language": {
        "0": 1071456,
        "types": [
          null,
          "identifier",
          "hash_bang_line",
          "export",
          "*",
          "default",
          "type",
          "=",
          "as",
          "namespace",
          "{",
          ",",
          "}",
          "typeof",
          "import",
          "from",
          "var",
          "let",
          "const",
          "!",
          "else",
          "if",
          "switch",
          "for",
          "(",
          ")",
          "await",
          "in",
          "of",
          "while",
          "do",
          "try",
          "with",
          "break",
          "continue",
          "debugger",
          "return",
          "throw",
          ";",
          ":",
          "case",
          "catch",
          "finally",
          "yield",
          "[",
          "]",
          "<",
          ">",
          "/",
          ".",
          "class",
          "async",
          "function",
          "=>",
          "?.",
          "new",
          "+=",
          "-=",
          "*=",
          "/=",
          "%=",
          "^=",
          "&=",
          "|=",
          ">>=",
          ">>>=",
          "<<=",
          "**=",
          "&&=",
          "||=",
          "??=",
          "...",
          "&&",
          "||",
          ">>",
          ">>>",
          "<<",
          "&",
          "^",
          "|",
          "+",
          "-",
          "%",
          "**",
          "<=",
          "==",
          "===",
          "!=",
          "!==",
          ">=",
          "??",
          "instanceof",
          "~",
          "void",
          "delete",
          "++",
          "--",
          "\"",
          "'",
          "string_fragment",
          "string_fragment",
          "escape_sequence",
          "comment",
          "`",
          "${",
          "/",
          "regex_pattern",
          "regex_flags",
          "number",
          "private_property_identifier",
          "target",
          "this",
          "super",
          "true",
          "false",
          "null",
          "undefined",
          "@",
          "static",
          "readonly",
          "get",
          "set",
          "?",
          "declare",
          "public",
          "private",
          "protected",
          "override",
          "module",
          "any",
          "number",
          "boolean",
          "string",
          "symbol",
          "abstract",
          "require",
          "extends",
          "implements",
          "global",
          "interface",
          "enum",
          "-?:",
          "?:",
          "asserts",
          "infer",
          "is",
          "keyof",
          "unknown",
          "never",
          "object",
          "{|",
          "|}",
          null,
          null,
          "?",
          null,
          "program",
          "export_statement",
          "export_clause",
          "export_specifier",
          null,
          "import",
          "import_statement",
          "import_clause",
          null,
          "namespace_import",
          "named_imports",
          "expression_statement",
          "variable_declaration",
          "lexical_declaration",
          "variable_declarator",
          "statement_block",
          "else_clause",
          "if_statement",
          "switch_statement",
          "for_statement",
          "for_in_statement",
          null,
          "while_statement",
          "do_statement",
          "try_statement",
          "with_statement",
          "break_statement",
          "continue_statement",
          "debugger_statement",
          "return_statement",
          "throw_statement",
          "empty_statement",
          "labeled_statement",
          "switch_body",
          "switch_case",
          "switch_default",
          "catch_clause",
          "finally_clause",
          "parenthesized_expression",
          null,
          null,
          "yield_expression",
          "object",
          "object_pattern",
          "assignment_pattern",
          "object_assignment_pattern",
          "array",
          "array_pattern",
          "nested_identifier",
          "class",
          "class_declaration",
          "class_heritage",
          "function",
          "function_declaration",
          "generator_function",
          "generator_function_declaration",
          "arrow_function",
          null,
          null,
          "call_expression",
          "new_expression",
          "await_expression",
          "member_expression",
          "subscript_expression",
          "assignment_expression",
          null,
          "augmented_assignment_expression",
          null,
          null,
          "spread_element",
          "ternary_expression",
          "binary_expression",
          "unary_expression",
          "update_expression",
          "sequence_expression",
          "string",
          "template_string",
          "template_substitution",
          "regex",
          "meta_property",
          "arguments",
          "decorator",
          "member_expression",
          "call_expression",
          "class_body",
          "formal_parameters",
          null,
          "rest_pattern",
          "method_definition",
          "pair",
          "pair_pattern",
          null,
          "computed_property_name",
          "public_field_definition",
          "non_null_expression",
          "method_signature",
          "abstract_method_signature",
          "function_signature",
          "type_assertion",
          "as_expression",
          "import_require_clause",
          "extends_clause",
          "implements_clause",
          "ambient_declaration",
          "abstract_class_declaration",
          "module",
          "internal_module",
          null,
          "import_alias",
          "nested_type_identifier",
          "interface_declaration",
          "extends_type_clause",
          "enum_declaration",
          "enum_body",
          "enum_assignment",
          "type_alias_declaration",
          "accessibility_modifier",
          "override_modifier",
          "required_parameter",
          "optional_parameter",
          null,
          "omitting_type_annotation",
          "opting_type_annotation",
          "type_annotation",
          "asserts",
          null,
          "required_parameter",
          "optional_parameter",
          "optional_type",
          "rest_type",
          null,
          "constructor_type",
          null,
          "template_type",
          "template_literal_type",
          "infer_type",
          "conditional_type",
          "generic_type",
          "type_predicate",
          "type_predicate_annotation",
          "member_expression",
          "subscript_expression",
          "call_expression",
          "type_query",
          "index_type_query",
          "lookup_type",
          "mapped_type_clause",
          "literal_type",
          "unary_expression",
          "existential_type",
          "flow_maybe_type",
          "parenthesized_type",
          "predefined_type",
          "type_arguments",
          "object_type",
          "call_signature",
          "property_signature",
          "type_parameters",
          "type_parameter",
          "default_type",
          "constraint",
          "construct_signature",
          "index_signature",
          "array_type",
          "tuple_type",
          "readonly_type",
          "union_type",
          "intersection_type",
          "function_type",
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          "import_specifier",
          "namespace_export",
          "property_identifier",
          "shorthand_property_identifier",
          "shorthand_property_identifier_pattern",
          "statement_identifier",
          "this_type",
          "type_identifier"
        ],
        "fields": [
          null,
          "alias",
          "alternative",
          "argument",
          "arguments",
          "body",
          "condition",
          "consequence",
          "constraint",
          "constructor",
          "declaration",
          "decorator",
          "finalizer",
          "flags",
          "function",
          "handler",
          "increment",
          "index",
          "index_type",
          "initializer",
          "key",
          "kind",
          "label",
          "left",
          "module",
          "name",
          "object",
          "operator",
          "parameter",
          "parameters",
          "pattern",
          "property",
          "return_type",
          "right",
          "sign",
          "source",
          "type",
          "type_arguments",
          "type_parameters",
          "value"
        ]
      }
    },
    "parseErrorCount": 1,
    "nodeTypes": {
      "atCursor": "statement_block",
      "parent": "method_definition",
      "grandparent": "class_body",
      "greatGrandparent": "class_declaration",
      "lastAncestorOnTheSameLine": "method_definition"
    },
    "nodeTypesWithCompletion": {
      "atCursor": "statement_block",
      "parent": "method_definition",
      "grandparent": "class_body",
      "greatGrandparent": "class_declaration",
      "lastAncestorOnTheSameLine": "ERROR"
    }
  },
  "raw_completion_len": 56,
  "timestamp": "2024-02-14T19:09:34.972Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis",
  "raw_completion_len": 64,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:34.972Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-49",
  "partial_response": "this",
  "timestamp": "2024-02-14T19:09:34.972Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this",
  "timestamp": "2024-02-14T19:09:34.972Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis",
  "unprocessed_completion": "this",
  "timestamp": "2024-02-14T19:09:34.972Z"
}
{
  "message": "sidecar.providerInlineCompletionItems.COMPLETE",
  "event_name": "sidecar.provide_inline_completions.COMPLETE",
  "inline_completions": [
    "abortController.signal.addEventListener('abort', () => {"
  ],
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:34.972Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._",
  "completion_len": 66,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:34.997Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._",
  "raw_completion_len": 66,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:34.997Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-49",
  "partial_response": "this._",
  "timestamp": "2024-02-14T19:09:34.997Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._",
  "timestamp": "2024-02-14T19:09:34.997Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._",
  "unprocessed_completion": "this._",
  "timestamp": "2024-02-14T19:09:34.997Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-50",
  "timestamp": "2024-02-14T19:09:34.998Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-50",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-14T19:09:34.998Z"
}
{
  "message": "sidecar.reuseLastCandidate",
  "reuse": true,
  "id": "completions-50",
  "timestamp": "2024-02-14T19:09:34.998Z"
}
{
  "message": "sidecar.providerInlineCompletionItems.COMPLETE",
  "event_name": "sidecar.provide_inline_completions.COMPLETE",
  "inline_completions": [
    "abortController.signal.addEventListener('abort', () => {"
  ],
  "id": "completions-50",
  "timestamp": "2024-02-14T19:09:34.998Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger",
  "completion_len": 72,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:35.033Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger",
  "raw_completion_len": 72,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.033Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-49",
  "partial_response": "this._logger",
  "timestamp": "2024-02-14T19:09:35.033Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger",
  "timestamp": "2024-02-14T19:09:35.033Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger",
  "unprocessed_completion": "this._logger",
  "timestamp": "2024-02-14T19:09:35.033Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.",
  "completion_len": 73,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:35.054Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.",
  "raw_completion_len": 73,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.054Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-49",
  "partial_response": "this._logger.",
  "timestamp": "2024-02-14T19:09:35.054Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.",
  "timestamp": "2024-02-14T19:09:35.054Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.",
  "unprocessed_completion": "this._logger.",
  "timestamp": "2024-02-14T19:09:35.054Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.log",
  "completion_len": 76,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:35.081Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.log",
  "raw_completion_len": 76,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.081Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-49",
  "partial_response": "this._logger.log",
  "timestamp": "2024-02-14T19:09:35.081Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.log",
  "timestamp": "2024-02-14T19:09:35.081Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.log",
  "unprocessed_completion": "this._logger.log",
  "timestamp": "2024-02-14T19:09:35.081Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo",
  "completion_len": 80,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:35.110Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo",
  "raw_completion_len": 80,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.110Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo",
  "timestamp": "2024-02-14T19:09:35.110Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo",
  "timestamp": "2024-02-14T19:09:35.110Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo",
  "unprocessed_completion": "this._logger.logInfo",
  "timestamp": "2024-02-14T19:09:35.110Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "completion_len": 81,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:35.138Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "raw_completion_len": 81,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.138Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(",
  "timestamp": "2024-02-14T19:09:35.138Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(",
  "timestamp": "2024-02-14T19:09:35.138Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "unprocessed_completion": "this._logger.logInfo(",
  "timestamp": "2024-02-14T19:09:35.138Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n",
  "completion_len": 82,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:35.193Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n",
  "raw_completion_len": 82,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.193Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 67,
    "character": 24
  },
  "completion": "this._logger.logInfo(",
  "timestamp": "2024-02-14T19:09:35.194Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 67,
    "character": 24
  },
  "timestamp": "2024-02-14T19:09:35.194Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:35.196Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(",
  "fixed_string": "\t\t\tthis._logger.logInfo()",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.196Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 67,
    "character": 25
  },
  "completion": "this._logger.logInfo()",
  "timestamp": "2024-02-14T19:09:35.196Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo()",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo()\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 67,
    "character": 25
  },
  "timestamp": "2024-02-14T19:09:35.196Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo()",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.199Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(",
  "final_completion": "this._logger.logInfo(",
  "timestamp": "2024-02-14T19:09:35.199Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(",
  "completion": "this._logger.logInfo(\n",
  "timestamp": "2024-02-14T19:09:35.199Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n",
  "timestamp": "2024-02-14T19:09:35.199Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n",
  "timestamp": "2024-02-14T19:09:35.199Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n",
  "unprocessed_completion": "this._logger.logInfo(\n",
  "timestamp": "2024-02-14T19:09:35.199Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t",
  "completion_len": 85,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:35.199Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t",
  "raw_completion_len": 85,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.199Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 67,
    "character": 24
  },
  "completion": "this._logger.logInfo(",
  "timestamp": "2024-02-14T19:09:35.199Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 67,
    "character": 24
  },
  "timestamp": "2024-02-14T19:09:35.199Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:35.202Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(",
  "fixed_string": "\t\t\tthis._logger.logInfo()",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.202Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 67,
    "character": 25
  },
  "completion": "this._logger.logInfo()",
  "timestamp": "2024-02-14T19:09:35.202Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo()",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo()\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 67,
    "character": 25
  },
  "timestamp": "2024-02-14T19:09:35.202Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo()",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.204Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(",
  "final_completion": "this._logger.logInfo(",
  "timestamp": "2024-02-14T19:09:35.204Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(",
  "completion": "this._logger.logInfo(\n\t\t\t",
  "timestamp": "2024-02-14T19:09:35.204Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t",
  "timestamp": "2024-02-14T19:09:35.204Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t",
  "timestamp": "2024-02-14T19:09:35.204Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t",
  "timestamp": "2024-02-14T19:09:35.204Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'",
  "completion_len": 87,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:35.222Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'",
  "raw_completion_len": 87,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.222Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 68,
    "character": 8
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'",
  "timestamp": "2024-02-14T19:09:35.222Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 68,
    "character": 8
  },
  "timestamp": "2024-02-14T19:09:35.222Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.224Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t')",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.224Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 68,
    "character": 9
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t')",
  "timestamp": "2024-02-14T19:09:35.224Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t')",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t')\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 68,
    "character": 9
  },
  "timestamp": "2024-02-14T19:09:35.224Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t')",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.227Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'",
  "timestamp": "2024-02-14T19:09:35.227Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'",
  "completion": "this._logger.logInfo(\n\t\t\t\t'",
  "timestamp": "2024-02-14T19:09:35.227Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'",
  "timestamp": "2024-02-14T19:09:35.227Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'",
  "timestamp": "2024-02-14T19:09:35.227Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'",
  "timestamp": "2024-02-14T19:09:35.227Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side",
  "completion_len": 91,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:35.247Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side",
  "raw_completion_len": 91,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.247Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 68,
    "character": 12
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'side",
  "timestamp": "2024-02-14T19:09:35.247Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'side",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 68,
    "character": 12
  },
  "timestamp": "2024-02-14T19:09:35.247Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'side",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.249Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'side",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'side)",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.249Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 68,
    "character": 13
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'side)",
  "timestamp": "2024-02-14T19:09:35.249Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'side)",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side)\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 68,
    "character": 13
  },
  "timestamp": "2024-02-14T19:09:35.249Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'side)",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.252Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'side",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'side",
  "timestamp": "2024-02-14T19:09:35.252Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'side",
  "completion": "this._logger.logInfo(\n\t\t\t\t'side",
  "timestamp": "2024-02-14T19:09:35.252Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'side",
  "timestamp": "2024-02-14T19:09:35.252Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'side",
  "timestamp": "2024-02-14T19:09:35.252Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'side",
  "timestamp": "2024-02-14T19:09:35.252Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar",
  "completion_len": 94,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:35.276Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar",
  "raw_completion_len": 94,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.276Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 68,
    "character": 15
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar",
  "timestamp": "2024-02-14T19:09:35.276Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 68,
    "character": 15
  },
  "timestamp": "2024-02-14T19:09:35.276Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.278Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar)",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.278Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 68,
    "character": 16
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar)",
  "timestamp": "2024-02-14T19:09:35.279Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar)",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar)\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 68,
    "character": 16
  },
  "timestamp": "2024-02-14T19:09:35.279Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar)",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.281Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar",
  "timestamp": "2024-02-14T19:09:35.281Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar",
  "timestamp": "2024-02-14T19:09:35.281Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar",
  "timestamp": "2024-02-14T19:09:35.281Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar",
  "timestamp": "2024-02-14T19:09:35.281Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar",
  "timestamp": "2024-02-14T19:09:35.281Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.",
  "completion_len": 95,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:35.304Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.",
  "raw_completion_len": 95,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.304Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 68,
    "character": 16
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.",
  "timestamp": "2024-02-14T19:09:35.305Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 68,
    "character": 16
  },
  "timestamp": "2024-02-14T19:09:35.305Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.307Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.)",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.307Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 68,
    "character": 17
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.)",
  "timestamp": "2024-02-14T19:09:35.307Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.)",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.)\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 68,
    "character": 17
  },
  "timestamp": "2024-02-14T19:09:35.307Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.)",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.310Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.",
  "timestamp": "2024-02-14T19:09:35.310Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.",
  "timestamp": "2024-02-14T19:09:35.310Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.",
  "timestamp": "2024-02-14T19:09:35.310Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.",
  "timestamp": "2024-02-14T19:09:35.310Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.",
  "timestamp": "2024-02-14T19:09:35.310Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "completion_len": 101,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:35.333Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "raw_completion_len": 101,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.333Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 68,
    "character": 22
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "timestamp": "2024-02-14T19:09:35.333Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 68,
    "character": 22
  },
  "timestamp": "2024-02-14T19:09:35.333Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.338Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline)",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.338Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 68,
    "character": 23
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inline)",
  "timestamp": "2024-02-14T19:09:35.338Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inline)",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline)\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 68,
    "character": 23
  },
  "timestamp": "2024-02-14T19:09:35.338Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inline)",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.340Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "timestamp": "2024-02-14T19:09:35.340Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "timestamp": "2024-02-14T19:09:35.340Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "timestamp": "2024-02-14T19:09:35.340Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "timestamp": "2024-02-14T19:09:35.340Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "timestamp": "2024-02-14T19:09:35.340Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "completion_len": 109,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:35.360Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "raw_completion_len": 109,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.360Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 68,
    "character": 30
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "timestamp": "2024-02-14T19:09:35.360Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 68,
    "character": 30
  },
  "timestamp": "2024-02-14T19:09:35.360Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.362Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider)",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.363Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 68,
    "character": 31
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider)",
  "timestamp": "2024-02-14T19:09:35.363Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider)",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider)\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 68,
    "character": 31
  },
  "timestamp": "2024-02-14T19:09:35.363Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider)",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.365Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "timestamp": "2024-02-14T19:09:35.365Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "timestamp": "2024-02-14T19:09:35.365Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "timestamp": "2024-02-14T19:09:35.365Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "timestamp": "2024-02-14T19:09:35.365Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "timestamp": "2024-02-14T19:09:35.365Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "completion_len": 110,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:35.387Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "raw_completion_len": 110,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.387Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 68,
    "character": 31
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "timestamp": "2024-02-14T19:09:35.387Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 68,
    "character": 31
  },
  "timestamp": "2024-02-14T19:09:35.387Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.389Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.)",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.390Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 68,
    "character": 32
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.)",
  "timestamp": "2024-02-14T19:09:35.390Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.)",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.)\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 68,
    "character": 32
  },
  "timestamp": "2024-02-14T19:09:35.390Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.)",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.392Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "timestamp": "2024-02-14T19:09:35.392Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "timestamp": "2024-02-14T19:09:35.392Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "timestamp": "2024-02-14T19:09:35.392Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "timestamp": "2024-02-14T19:09:35.392Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "timestamp": "2024-02-14T19:09:35.392Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "completion_len": 112,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:35.417Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "raw_completion_len": 112,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.417Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 68,
    "character": 33
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "timestamp": "2024-02-14T19:09:35.417Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 68,
    "character": 33
  },
  "timestamp": "2024-02-14T19:09:35.417Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.420Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab)",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.420Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 68,
    "character": 34
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab)",
  "timestamp": "2024-02-14T19:09:35.420Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab)",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab)\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 68,
    "character": 34
  },
  "timestamp": "2024-02-14T19:09:35.420Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab)",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.422Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "timestamp": "2024-02-14T19:09:35.422Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "timestamp": "2024-02-14T19:09:35.422Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "timestamp": "2024-02-14T19:09:35.422Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "timestamp": "2024-02-14T19:09:35.422Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "timestamp": "2024-02-14T19:09:35.422Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "completion_len": 115,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:35.448Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "raw_completion_len": 115,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.448Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 68,
    "character": 36
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "timestamp": "2024-02-14T19:09:35.448Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 68,
    "character": 36
  },
  "timestamp": "2024-02-14T19:09:35.448Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.451Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort)",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.451Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 68,
    "character": 37
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort)",
  "timestamp": "2024-02-14T19:09:35.451Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort)",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort)\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 68,
    "character": 37
  },
  "timestamp": "2024-02-14T19:09:35.451Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort)",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.453Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "timestamp": "2024-02-14T19:09:35.453Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "timestamp": "2024-02-14T19:09:35.453Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "timestamp": "2024-02-14T19:09:35.453Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "timestamp": "2024-02-14T19:09:35.453Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "timestamp": "2024-02-14T19:09:35.453Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "completion_len": 117,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:35.468Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "raw_completion_len": 117,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.468Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 68,
    "character": 38
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "timestamp": "2024-02-14T19:09:35.468Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 68,
    "character": 38
  },
  "timestamp": "2024-02-14T19:09:35.468Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:35.471Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',)",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.471Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 68,
    "character": 39
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',)",
  "timestamp": "2024-02-14T19:09:35.471Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',)",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',)\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 68,
    "character": 39
  },
  "timestamp": "2024-02-14T19:09:35.471Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',)",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.473Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "timestamp": "2024-02-14T19:09:35.473Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "timestamp": "2024-02-14T19:09:35.473Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "timestamp": "2024-02-14T19:09:35.473Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "timestamp": "2024-02-14T19:09:35.473Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "timestamp": "2024-02-14T19:09:35.473Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n",
  "completion_len": 118,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:35.528Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n",
  "raw_completion_len": 118,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.528Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 68,
    "character": 38
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "timestamp": "2024-02-14T19:09:35.528Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 68,
    "character": 38
  },
  "timestamp": "2024-02-14T19:09:35.528Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:35.531Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',)",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.531Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 68,
    "character": 39
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',)",
  "timestamp": "2024-02-14T19:09:35.531Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',)",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',)\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 68,
    "character": 39
  },
  "timestamp": "2024-02-14T19:09:35.531Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',)",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.533Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "timestamp": "2024-02-14T19:09:35.533Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n",
  "timestamp": "2024-02-14T19:09:35.533Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n",
  "timestamp": "2024-02-14T19:09:35.533Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n",
  "timestamp": "2024-02-14T19:09:35.533Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n",
  "timestamp": "2024-02-14T19:09:35.533Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t",
  "completion_len": 121,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:35.534Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t",
  "raw_completion_len": 121,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.534Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 68,
    "character": 38
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "timestamp": "2024-02-14T19:09:35.534Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 68,
    "character": 38
  },
  "timestamp": "2024-02-14T19:09:35.534Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:35.537Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',)",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.537Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 68,
    "character": 39
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',)",
  "timestamp": "2024-02-14T19:09:35.537Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',)",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',)\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 68,
    "character": 39
  },
  "timestamp": "2024-02-14T19:09:35.537Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',)",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.539Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "timestamp": "2024-02-14T19:09:35.539Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t",
  "timestamp": "2024-02-14T19:09:35.539Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t",
  "timestamp": "2024-02-14T19:09:35.539Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t",
  "timestamp": "2024-02-14T19:09:35.539Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t",
  "timestamp": "2024-02-14T19:09:35.539Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "completion_len": 123,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:35.553Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "raw_completion_len": 123,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.553Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 69,
    "character": 8
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "timestamp": "2024-02-14T19:09:35.553Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 69,
    "character": 8
  },
  "timestamp": "2024-02-14T19:09:35.553Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 2,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "parse_error_count_complete": 5,
  "timestamp": "2024-02-14T19:09:35.555Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{})",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.556Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 69,
    "character": 10
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{})",
  "timestamp": "2024-02-14T19:09:35.556Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{})",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 69,
    "character": 10
  },
  "timestamp": "2024-02-14T19:09:35.556Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.559Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "timestamp": "2024-02-14T19:09:35.559Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "timestamp": "2024-02-14T19:09:35.559Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "timestamp": "2024-02-14T19:09:35.559Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "timestamp": "2024-02-14T19:09:35.559Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "timestamp": "2024-02-14T19:09:35.559Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n",
  "completion_len": 124,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:35.608Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n",
  "raw_completion_len": 124,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.608Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 69,
    "character": 8
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "timestamp": "2024-02-14T19:09:35.609Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 69,
    "character": 8
  },
  "timestamp": "2024-02-14T19:09:35.609Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 2,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "parse_error_count_complete": 5,
  "timestamp": "2024-02-14T19:09:35.611Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{})",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.611Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 69,
    "character": 10
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{})",
  "timestamp": "2024-02-14T19:09:35.612Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{})",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 69,
    "character": 10
  },
  "timestamp": "2024-02-14T19:09:35.612Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.614Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "timestamp": "2024-02-14T19:09:35.614Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n",
  "timestamp": "2024-02-14T19:09:35.614Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n",
  "timestamp": "2024-02-14T19:09:35.614Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n",
  "timestamp": "2024-02-14T19:09:35.614Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n",
  "timestamp": "2024-02-14T19:09:35.614Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t",
  "completion_len": 128,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:35.615Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t",
  "raw_completion_len": 128,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.615Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 69,
    "character": 8
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "timestamp": "2024-02-14T19:09:35.615Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 69,
    "character": 8
  },
  "timestamp": "2024-02-14T19:09:35.615Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 2,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "parse_error_count_complete": 5,
  "timestamp": "2024-02-14T19:09:35.617Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{})",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.617Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 69,
    "character": 10
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{})",
  "timestamp": "2024-02-14T19:09:35.618Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{})",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 69,
    "character": 10
  },
  "timestamp": "2024-02-14T19:09:35.618Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.620Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "timestamp": "2024-02-14T19:09:35.620Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t",
  "timestamp": "2024-02-14T19:09:35.620Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t",
  "timestamp": "2024-02-14T19:09:35.620Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t",
  "timestamp": "2024-02-14T19:09:35.620Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t",
  "timestamp": "2024-02-14T19:09:35.620Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'",
  "completion_len": 130,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:35.637Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'",
  "raw_completion_len": 130,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.637Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 9
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'",
  "timestamp": "2024-02-14T19:09:35.637Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 70,
    "character": 9
  },
  "timestamp": "2024-02-14T19:09:35.637Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.639Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'})",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.639Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 11
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'})",
  "timestamp": "2024-02-14T19:09:35.640Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'})",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 70,
    "character": 11
  },
  "timestamp": "2024-02-14T19:09:35.640Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.642Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'",
  "timestamp": "2024-02-14T19:09:35.642Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'",
  "timestamp": "2024-02-14T19:09:35.642Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'",
  "timestamp": "2024-02-14T19:09:35.642Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'",
  "timestamp": "2024-02-14T19:09:35.642Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'",
  "timestamp": "2024-02-14T19:09:35.642Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "completion_len": 135,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:35.667Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "raw_completion_len": 135,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.667Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 14
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "timestamp": "2024-02-14T19:09:35.667Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 70,
    "character": 14
  },
  "timestamp": "2024-02-14T19:09:35.667Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.670Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event})",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.670Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 16
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event})",
  "timestamp": "2024-02-14T19:09:35.670Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event})",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 70,
    "character": 16
  },
  "timestamp": "2024-02-14T19:09:35.670Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.672Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "timestamp": "2024-02-14T19:09:35.672Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "timestamp": "2024-02-14T19:09:35.672Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "timestamp": "2024-02-14T19:09:35.672Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "timestamp": "2024-02-14T19:09:35.672Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "timestamp": "2024-02-14T19:09:35.672Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "completion_len": 136,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:35.693Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "raw_completion_len": 136,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.693Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 15
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "timestamp": "2024-02-14T19:09:35.693Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 70,
    "character": 15
  },
  "timestamp": "2024-02-14T19:09:35.693Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.695Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_})",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.696Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 17
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_})",
  "timestamp": "2024-02-14T19:09:35.696Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_})",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 70,
    "character": 17
  },
  "timestamp": "2024-02-14T19:09:35.696Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.698Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "timestamp": "2024-02-14T19:09:35.698Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "timestamp": "2024-02-14T19:09:35.698Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "timestamp": "2024-02-14T19:09:35.698Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "timestamp": "2024-02-14T19:09:35.698Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "timestamp": "2024-02-14T19:09:35.698Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "completion_len": 140,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:35.732Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "raw_completion_len": 140,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.732Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 19
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "timestamp": "2024-02-14T19:09:35.732Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 70,
    "character": 19
  },
  "timestamp": "2024-02-14T19:09:35.732Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.735Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name})",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.735Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 21
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name})",
  "timestamp": "2024-02-14T19:09:35.735Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name})",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 70,
    "character": 21
  },
  "timestamp": "2024-02-14T19:09:35.735Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.737Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "timestamp": "2024-02-14T19:09:35.737Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "timestamp": "2024-02-14T19:09:35.737Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "timestamp": "2024-02-14T19:09:35.737Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "timestamp": "2024-02-14T19:09:35.737Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "timestamp": "2024-02-14T19:09:35.737Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "completion_len": 142,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:35.748Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "raw_completion_len": 142,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.748Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 21
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "timestamp": "2024-02-14T19:09:35.749Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 70,
    "character": 21
  },
  "timestamp": "2024-02-14T19:09:35.749Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 2,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "parse_error_count_complete": 5,
  "timestamp": "2024-02-14T19:09:35.755Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':})",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.756Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 23
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':})",
  "timestamp": "2024-02-14T19:09:35.756Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':})",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 70,
    "character": 23
  },
  "timestamp": "2024-02-14T19:09:35.756Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.759Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "timestamp": "2024-02-14T19:09:35.759Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "timestamp": "2024-02-14T19:09:35.759Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "timestamp": "2024-02-14T19:09:35.759Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "timestamp": "2024-02-14T19:09:35.759Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "timestamp": "2024-02-14T19:09:35.759Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "completion_len": 144,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:35.775Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "raw_completion_len": 144,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.775Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 23
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "timestamp": "2024-02-14T19:09:35.775Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 70,
    "character": 23
  },
  "timestamp": "2024-02-14T19:09:35.775Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.778Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '})",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.778Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 25
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '})",
  "timestamp": "2024-02-14T19:09:35.778Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '})",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 70,
    "character": 25
  },
  "timestamp": "2024-02-14T19:09:35.778Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.780Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "timestamp": "2024-02-14T19:09:35.780Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "timestamp": "2024-02-14T19:09:35.780Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "timestamp": "2024-02-14T19:09:35.780Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "timestamp": "2024-02-14T19:09:35.780Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "timestamp": "2024-02-14T19:09:35.780Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "completion_len": 146,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:35.805Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "raw_completion_len": 146,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.805Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 25
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "timestamp": "2024-02-14T19:09:35.805Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 70,
    "character": 25
  },
  "timestamp": "2024-02-14T19:09:35.805Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.808Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab})",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.808Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 27
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab})",
  "timestamp": "2024-02-14T19:09:35.808Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab})",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 70,
    "character": 27
  },
  "timestamp": "2024-02-14T19:09:35.808Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.811Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "timestamp": "2024-02-14T19:09:35.811Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "timestamp": "2024-02-14T19:09:35.811Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "timestamp": "2024-02-14T19:09:35.811Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "timestamp": "2024-02-14T19:09:35.811Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "timestamp": "2024-02-14T19:09:35.811Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort",
  "completion_len": 149,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:35.833Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort",
  "raw_completion_len": 149,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.833Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 28
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort",
  "timestamp": "2024-02-14T19:09:35.833Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 70,
    "character": 28
  },
  "timestamp": "2024-02-14T19:09:35.833Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.835Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort})",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.835Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 30
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort})",
  "timestamp": "2024-02-14T19:09:35.835Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort})",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 70,
    "character": 30
  },
  "timestamp": "2024-02-14T19:09:35.835Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.837Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort",
  "timestamp": "2024-02-14T19:09:35.837Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort",
  "timestamp": "2024-02-14T19:09:35.837Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort",
  "timestamp": "2024-02-14T19:09:35.837Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort",
  "timestamp": "2024-02-14T19:09:35.837Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort",
  "timestamp": "2024-02-14T19:09:35.837Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',",
  "completion_len": 151,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:35.860Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',",
  "raw_completion_len": 151,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.860Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 30
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',",
  "timestamp": "2024-02-14T19:09:35.861Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 70,
    "character": 30
  },
  "timestamp": "2024-02-14T19:09:35.861Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',",
  "parse_error_count_complete": 3,
  "timestamp": "2024-02-14T19:09:35.863Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',})",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.863Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 32
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',})",
  "timestamp": "2024-02-14T19:09:35.864Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',})",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 70,
    "character": 32
  },
  "timestamp": "2024-02-14T19:09:35.864Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.866Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',",
  "timestamp": "2024-02-14T19:09:35.866Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',",
  "timestamp": "2024-02-14T19:09:35.866Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',",
  "timestamp": "2024-02-14T19:09:35.866Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',",
  "timestamp": "2024-02-14T19:09:35.866Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',",
  "timestamp": "2024-02-14T19:09:35.866Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n",
  "completion_len": 152,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:35.916Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n",
  "raw_completion_len": 152,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.916Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 30
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',",
  "timestamp": "2024-02-14T19:09:35.916Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 70,
    "character": 30
  },
  "timestamp": "2024-02-14T19:09:35.916Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',",
  "parse_error_count_complete": 3,
  "timestamp": "2024-02-14T19:09:35.919Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',})",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.919Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 32
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',})",
  "timestamp": "2024-02-14T19:09:35.919Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',})",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 70,
    "character": 32
  },
  "timestamp": "2024-02-14T19:09:35.919Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.922Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',",
  "timestamp": "2024-02-14T19:09:35.922Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n",
  "timestamp": "2024-02-14T19:09:35.922Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n",
  "timestamp": "2024-02-14T19:09:35.922Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n",
  "timestamp": "2024-02-14T19:09:35.922Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n",
  "timestamp": "2024-02-14T19:09:35.922Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t",
  "completion_len": 156,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:35.922Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t",
  "raw_completion_len": 156,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.922Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 30
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',",
  "timestamp": "2024-02-14T19:09:35.922Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 70,
    "character": 30
  },
  "timestamp": "2024-02-14T19:09:35.922Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',",
  "parse_error_count_complete": 3,
  "timestamp": "2024-02-14T19:09:35.925Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',})",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.926Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 32
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',})",
  "timestamp": "2024-02-14T19:09:35.926Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',})",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 70,
    "character": 32
  },
  "timestamp": "2024-02-14T19:09:35.926Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.928Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',",
  "timestamp": "2024-02-14T19:09:35.928Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t",
  "timestamp": "2024-02-14T19:09:35.928Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t",
  "timestamp": "2024-02-14T19:09:35.928Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t",
  "timestamp": "2024-02-14T19:09:35.928Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t",
  "timestamp": "2024-02-14T19:09:35.928Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'",
  "completion_len": 158,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:35.943Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'",
  "raw_completion_len": 158,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.943Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 9
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'",
  "timestamp": "2024-02-14T19:09:35.943Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 71,
    "character": 9
  },
  "timestamp": "2024-02-14T19:09:35.943Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.946Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'})",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.946Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 11
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'})",
  "timestamp": "2024-02-14T19:09:35.946Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'})",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 71,
    "character": 11
  },
  "timestamp": "2024-02-14T19:09:35.946Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.949Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'",
  "timestamp": "2024-02-14T19:09:35.949Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'",
  "timestamp": "2024-02-14T19:09:35.949Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'",
  "timestamp": "2024-02-14T19:09:35.949Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'",
  "timestamp": "2024-02-14T19:09:35.949Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'",
  "timestamp": "2024-02-14T19:09:35.949Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id",
  "completion_len": 160,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:35.971Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id",
  "raw_completion_len": 160,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.971Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 11
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id",
  "timestamp": "2024-02-14T19:09:35.971Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 71,
    "character": 11
  },
  "timestamp": "2024-02-14T19:09:35.971Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.973Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id})",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:35.974Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 13
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id})",
  "timestamp": "2024-02-14T19:09:35.974Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id})",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 71,
    "character": 13
  },
  "timestamp": "2024-02-14T19:09:35.974Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:35.976Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id",
  "timestamp": "2024-02-14T19:09:35.976Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id",
  "timestamp": "2024-02-14T19:09:35.976Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id",
  "timestamp": "2024-02-14T19:09:35.976Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id",
  "timestamp": "2024-02-14T19:09:35.976Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id",
  "timestamp": "2024-02-14T19:09:35.976Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id':",
  "completion_len": 162,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:36.005Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id':",
  "raw_completion_len": 162,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.005Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 13
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id':",
  "timestamp": "2024-02-14T19:09:36.006Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id':",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id':\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 71,
    "character": 13
  },
  "timestamp": "2024-02-14T19:09:36.006Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 2,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id':",
  "parse_error_count_complete": 5,
  "timestamp": "2024-02-14T19:09:36.008Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id':",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id':})",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.008Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 15
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id':})",
  "timestamp": "2024-02-14T19:09:36.009Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id':})",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id':})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 71,
    "character": 15
  },
  "timestamp": "2024-02-14T19:09:36.009Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id':})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:36.011Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id':",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id':",
  "timestamp": "2024-02-14T19:09:36.011Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id':",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id':",
  "timestamp": "2024-02-14T19:09:36.011Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id':",
  "timestamp": "2024-02-14T19:09:36.011Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id':",
  "timestamp": "2024-02-14T19:09:36.011Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id':",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id':",
  "timestamp": "2024-02-14T19:09:36.011Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this",
  "completion_len": 167,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:36.026Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this",
  "raw_completion_len": 167,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.026Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 18
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this",
  "timestamp": "2024-02-14T19:09:36.027Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 71,
    "character": 18
  },
  "timestamp": "2024-02-14T19:09:36.027Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 3,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this",
  "parse_error_count_complete": 5,
  "timestamp": "2024-02-14T19:09:36.029Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this})",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.030Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 20
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this})",
  "timestamp": "2024-02-14T19:09:36.030Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this})",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 71,
    "character": 20
  },
  "timestamp": "2024-02-14T19:09:36.030Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:36.032Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this",
  "timestamp": "2024-02-14T19:09:36.032Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this",
  "timestamp": "2024-02-14T19:09:36.032Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this",
  "timestamp": "2024-02-14T19:09:36.032Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this",
  "timestamp": "2024-02-14T19:09:36.032Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this",
  "timestamp": "2024-02-14T19:09:36.032Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.",
  "completion_len": 168,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:36.053Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.",
  "raw_completion_len": 168,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.053Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 19
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.",
  "timestamp": "2024-02-14T19:09:36.053Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 71,
    "character": 19
  },
  "timestamp": "2024-02-14T19:09:36.053Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 2,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.",
  "parse_error_count_complete": 5,
  "timestamp": "2024-02-14T19:09:36.056Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.})",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.056Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 21
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.})",
  "timestamp": "2024-02-14T19:09:36.056Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.})",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 71,
    "character": 21
  },
  "timestamp": "2024-02-14T19:09:36.056Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:36.059Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.",
  "timestamp": "2024-02-14T19:09:36.059Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.",
  "timestamp": "2024-02-14T19:09:36.059Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.",
  "timestamp": "2024-02-14T19:09:36.059Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.",
  "timestamp": "2024-02-14T19:09:36.059Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.",
  "timestamp": "2024-02-14T19:09:36.059Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options",
  "completion_len": 175,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:36.082Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options",
  "raw_completion_len": 175,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.082Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 26
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options",
  "timestamp": "2024-02-14T19:09:36.082Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 71,
    "character": 26
  },
  "timestamp": "2024-02-14T19:09:36.082Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 2,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options",
  "parse_error_count_complete": 5,
  "timestamp": "2024-02-14T19:09:36.086Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options})",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.086Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 28
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options})",
  "timestamp": "2024-02-14T19:09:36.086Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options})",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 71,
    "character": 28
  },
  "timestamp": "2024-02-14T19:09:36.086Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:36.089Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options",
  "timestamp": "2024-02-14T19:09:36.089Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options",
  "timestamp": "2024-02-14T19:09:36.089Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options",
  "timestamp": "2024-02-14T19:09:36.089Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options",
  "timestamp": "2024-02-14T19:09:36.089Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options",
  "timestamp": "2024-02-14T19:09:36.089Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.",
  "completion_len": 176,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:36.113Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.",
  "raw_completion_len": 176,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.113Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 27
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.",
  "timestamp": "2024-02-14T19:09:36.113Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 71,
    "character": 27
  },
  "timestamp": "2024-02-14T19:09:36.113Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 2,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.",
  "parse_error_count_complete": 5,
  "timestamp": "2024-02-14T19:09:36.116Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.})",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.116Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 29
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.})",
  "timestamp": "2024-02-14T19:09:36.117Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.})",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 71,
    "character": 29
  },
  "timestamp": "2024-02-14T19:09:36.117Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:36.119Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.",
  "timestamp": "2024-02-14T19:09:36.119Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.",
  "timestamp": "2024-02-14T19:09:36.119Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.",
  "timestamp": "2024-02-14T19:09:36.119Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.",
  "timestamp": "2024-02-14T19:09:36.119Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.",
  "timestamp": "2024-02-14T19:09:36.119Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.span",
  "completion_len": 180,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:36.137Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.span",
  "raw_completion_len": 180,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.137Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 31
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.span",
  "timestamp": "2024-02-14T19:09:36.138Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.span",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.span\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 71,
    "character": 31
  },
  "timestamp": "2024-02-14T19:09:36.138Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 2,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.span",
  "parse_error_count_complete": 5,
  "timestamp": "2024-02-14T19:09:36.140Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.span",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.span})",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.140Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 33
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.span})",
  "timestamp": "2024-02-14T19:09:36.141Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.span})",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.span})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 71,
    "character": 33
  },
  "timestamp": "2024-02-14T19:09:36.141Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.span})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:36.143Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.span",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.span",
  "timestamp": "2024-02-14T19:09:36.143Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.span",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.span",
  "timestamp": "2024-02-14T19:09:36.143Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.span",
  "timestamp": "2024-02-14T19:09:36.143Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.span",
  "timestamp": "2024-02-14T19:09:36.143Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.span",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.span",
  "timestamp": "2024-02-14T19:09:36.143Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId",
  "completion_len": 182,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:36.170Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId",
  "raw_completion_len": 182,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.170Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 33
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId",
  "timestamp": "2024-02-14T19:09:36.170Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 71,
    "character": 33
  },
  "timestamp": "2024-02-14T19:09:36.170Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 2,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId",
  "parse_error_count_complete": 5,
  "timestamp": "2024-02-14T19:09:36.173Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId})",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.173Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 35
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId})",
  "timestamp": "2024-02-14T19:09:36.173Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId})",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 71,
    "character": 35
  },
  "timestamp": "2024-02-14T19:09:36.173Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:36.176Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId",
  "timestamp": "2024-02-14T19:09:36.176Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId",
  "timestamp": "2024-02-14T19:09:36.176Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId",
  "timestamp": "2024-02-14T19:09:36.176Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId",
  "timestamp": "2024-02-14T19:09:36.176Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId",
  "timestamp": "2024-02-14T19:09:36.176Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,",
  "completion_len": 183,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:36.193Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,",
  "raw_completion_len": 183,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.193Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 34
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,",
  "timestamp": "2024-02-14T19:09:36.193Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 71,
    "character": 34
  },
  "timestamp": "2024-02-14T19:09:36.193Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,",
  "parse_error_count_complete": 3,
  "timestamp": "2024-02-14T19:09:36.195Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,})",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.196Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 36
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,})",
  "timestamp": "2024-02-14T19:09:36.196Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,})",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 71,
    "character": 36
  },
  "timestamp": "2024-02-14T19:09:36.196Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:36.198Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,",
  "timestamp": "2024-02-14T19:09:36.198Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,",
  "timestamp": "2024-02-14T19:09:36.198Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,",
  "timestamp": "2024-02-14T19:09:36.198Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,",
  "timestamp": "2024-02-14T19:09:36.198Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,",
  "timestamp": "2024-02-14T19:09:36.198Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n",
  "completion_len": 184,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:36.255Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n",
  "raw_completion_len": 184,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.255Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 34
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,",
  "timestamp": "2024-02-14T19:09:36.255Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 71,
    "character": 34
  },
  "timestamp": "2024-02-14T19:09:36.255Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,",
  "parse_error_count_complete": 3,
  "timestamp": "2024-02-14T19:09:36.257Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,})",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.258Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 36
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,})",
  "timestamp": "2024-02-14T19:09:36.258Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,})",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 71,
    "character": 36
  },
  "timestamp": "2024-02-14T19:09:36.258Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:36.260Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,",
  "timestamp": "2024-02-14T19:09:36.260Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n",
  "timestamp": "2024-02-14T19:09:36.260Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n",
  "timestamp": "2024-02-14T19:09:36.260Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n",
  "timestamp": "2024-02-14T19:09:36.260Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n",
  "timestamp": "2024-02-14T19:09:36.260Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t",
  "completion_len": 187,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:36.261Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t",
  "raw_completion_len": 187,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.261Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 34
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,",
  "timestamp": "2024-02-14T19:09:36.261Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 71,
    "character": 34
  },
  "timestamp": "2024-02-14T19:09:36.261Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,",
  "parse_error_count_complete": 3,
  "timestamp": "2024-02-14T19:09:36.263Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,})",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.263Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 36
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,})",
  "timestamp": "2024-02-14T19:09:36.264Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,})",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 71,
    "character": 36
  },
  "timestamp": "2024-02-14T19:09:36.264Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:36.266Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,",
  "timestamp": "2024-02-14T19:09:36.266Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t",
  "timestamp": "2024-02-14T19:09:36.266Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t",
  "timestamp": "2024-02-14T19:09:36.266Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t",
  "timestamp": "2024-02-14T19:09:36.266Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t",
  "timestamp": "2024-02-14T19:09:36.266Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "completion_len": 189,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:36.278Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "raw_completion_len": 189,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.278Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 72,
    "character": 8
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-14T19:09:36.278Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 72,
    "character": 8
  },
  "timestamp": "2024-02-14T19:09:36.279Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 2,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:36.281Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.281Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 72,
    "character": 9
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})",
  "timestamp": "2024-02-14T19:09:36.281Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 72,
    "character": 9
  },
  "timestamp": "2024-02-14T19:09:36.281Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:36.284Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-14T19:09:36.284Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-14T19:09:36.284Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-14T19:09:36.284Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-14T19:09:36.284Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-14T19:09:36.284Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n",
  "completion_len": 190,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:36.332Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n",
  "raw_completion_len": 190,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.332Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 72,
    "character": 8
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-14T19:09:36.332Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 72,
    "character": 8
  },
  "timestamp": "2024-02-14T19:09:36.333Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 2,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:36.335Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.335Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 72,
    "character": 9
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})",
  "timestamp": "2024-02-14T19:09:36.336Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 72,
    "character": 9
  },
  "timestamp": "2024-02-14T19:09:36.336Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:36.341Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-14T19:09:36.341Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n",
  "timestamp": "2024-02-14T19:09:36.341Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n",
  "timestamp": "2024-02-14T19:09:36.341Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n",
  "timestamp": "2024-02-14T19:09:36.341Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n",
  "timestamp": "2024-02-14T19:09:36.341Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t",
  "completion_len": 192,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:36.341Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t",
  "raw_completion_len": 192,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.341Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 72,
    "character": 8
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-14T19:09:36.342Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 72,
    "character": 8
  },
  "timestamp": "2024-02-14T19:09:36.342Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 2,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:36.344Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.345Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 72,
    "character": 9
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})",
  "timestamp": "2024-02-14T19:09:36.345Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 72,
    "character": 9
  },
  "timestamp": "2024-02-14T19:09:36.345Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:36.347Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-14T19:09:36.347Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t",
  "timestamp": "2024-02-14T19:09:36.347Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t",
  "timestamp": "2024-02-14T19:09:36.347Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t",
  "timestamp": "2024-02-14T19:09:36.347Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t",
  "timestamp": "2024-02-14T19:09:36.347Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t",
  "completion_len": 193,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:36.362Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t",
  "raw_completion_len": 193,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.362Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 72,
    "character": 8
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-14T19:09:36.362Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 72,
    "character": 8
  },
  "timestamp": "2024-02-14T19:09:36.362Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 2,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:36.365Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.365Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 72,
    "character": 9
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})",
  "timestamp": "2024-02-14T19:09:36.365Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 72,
    "character": 9
  },
  "timestamp": "2024-02-14T19:09:36.365Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:36.367Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-14T19:09:36.367Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t",
  "timestamp": "2024-02-14T19:09:36.367Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t",
  "timestamp": "2024-02-14T19:09:36.367Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t",
  "timestamp": "2024-02-14T19:09:36.367Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t",
  "timestamp": "2024-02-14T19:09:36.367Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "completion_len": 195,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:36.387Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "raw_completion_len": 195,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.387Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 73,
    "character": 8
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "timestamp": "2024-02-14T19:09:36.388Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 73,
    "character": 8
  },
  "timestamp": "2024-02-14T19:09:36.388Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:36.390Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.390Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "timestamp": "2024-02-14T19:09:36.390Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "timestamp": "2024-02-14T19:09:36.390Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "timestamp": "2024-02-14T19:09:36.390Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "timestamp": "2024-02-14T19:09:36.390Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "timestamp": "2024-02-14T19:09:36.390Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n",
  "completion_len": 196,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:36.460Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n",
  "raw_completion_len": 196,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.460Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 73,
    "character": 8
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "timestamp": "2024-02-14T19:09:36.460Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 73,
    "character": 8
  },
  "timestamp": "2024-02-14T19:09:36.460Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:36.462Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.462Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "timestamp": "2024-02-14T19:09:36.463Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n",
  "timestamp": "2024-02-14T19:09:36.463Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n",
  "timestamp": "2024-02-14T19:09:36.463Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n",
  "timestamp": "2024-02-14T19:09:36.463Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n",
  "timestamp": "2024-02-14T19:09:36.463Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t",
  "completion_len": 197,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:36.463Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t",
  "raw_completion_len": 197,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.463Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 73,
    "character": 8
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "timestamp": "2024-02-14T19:09:36.463Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 73,
    "character": 8
  },
  "timestamp": "2024-02-14T19:09:36.463Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 1,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:36.465Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.466Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "timestamp": "2024-02-14T19:09:36.466Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t",
  "timestamp": "2024-02-14T19:09:36.466Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t",
  "timestamp": "2024-02-14T19:09:36.466Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t",
  "timestamp": "2024-02-14T19:09:36.466Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t",
  "timestamp": "2024-02-14T19:09:36.466Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "completion_len": 201,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:36.474Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "raw_completion_len": 201,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.474Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 74,
    "character": 8
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-14T19:09:36.474Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 74,
    "character": 8
  },
  "timestamp": "2024-02-14T19:09:36.474Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 0,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-14T19:09:36.477Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.477Z"
}
{
  "message": "sidecar.truncate_parsed_completion.overlap",
  "event_name": "sidecar.truncate_parsed_completion.overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "overlap": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-14T19:09:36.477Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-14T19:09:36.477Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-14T19:09:36.477Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-14T19:09:36.477Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-14T19:09:36.477Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "completion_len": 201,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:36.540Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "raw_completion_len": 201,
  "is_request_ended": false,
  "updated_document_context": "abortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.540Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 3
  },
  "completion_end_position": {
    "line": 74,
    "character": 8
  },
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-14T19:09:36.541Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-49",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 74,
    "character": 8
  },
  "timestamp": "2024-02-14T19:09:36.541Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-49",
  "parse_error_count": 0,
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-14T19:09:36.543Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "fixed_string": "\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "id": "completions-49",
  "timestamp": "2024-02-14T19:09:36.544Z"
}
{
  "message": "sidecar.truncate_parsed_completion.overlap",
  "event_name": "sidecar.truncate_parsed_completion.overlap",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "overlap": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "final_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-14T19:09:36.544Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-49",
  "insert_text": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-14T19:09:36.544Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-49",
  "partial_response": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-14T19:09:36.544Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-49",
  "is_request_ended": false,
  "unprocessedCompletion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-14T19:09:36.544Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-49",
  "raw_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "unprocessed_completion": "this._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-14T19:09:36.544Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:37.175Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-51",
  "multiline_trigger": "{",
  "timestamp": "2024-02-14T19:09:37.175Z"
}
{
  "message": "sidecar.inlineProvider",
  "event_name": "generate_completions",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:37.306Z"
}
{
  "message": "sidecar.inlineProvider.send_completion_request",
  "event_name": "send_completion_request",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:37.306Z"
}
{
  "message": "sidecar.inlineProvider.responseStream",
  "event_name": "response_stream",
  "id": "completions-51",
  "time_taken": 0.014042019844055176,
  "timestamp": "2024-02-14T19:09:37.306Z"
}
{
  "message": "sidecar.completion_request.generator",
  "event_name": "sidecar.completion_request.generator",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:37.306Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": true,
  "completion": "\n",
  "completion_len": 1,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T19:09:38.157Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": true,
  "completion": "\n\t\t",
  "completion_len": 3,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T19:09:38.157Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": true,
  "completion": "\n\t\t\tthis",
  "completion_len": 8,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T19:09:38.179Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": true,
  "completion": "\n\t\t\tthis._",
  "completion_len": 10,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T19:09:38.208Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger",
  "completion_len": 16,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T19:09:38.236Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.",
  "completion_len": 17,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T19:09:38.264Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.log",
  "completion_len": 20,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T19:09:38.294Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo",
  "completion_len": 24,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-14T19:09:38.324Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 66,
    "character": 58
  },
  "completion_end_position": {
    "line": 67,
    "character": 81
  },
  "completion": "\n\t\t\tthis._logger.logInfo",
  "timestamp": "2024-02-14T19:09:38.325Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\n\t\t\tthis._logger.logInfo",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 58
  },
  "end_position": {
    "line": 67,
    "character": 81
  },
  "timestamp": "2024-02-14T19:09:38.325Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 1,
  "completion": "\n\t\t\tthis._logger.logInfo",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-14T19:09:38.327Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo})",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.328Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 66,
    "character": 58
  },
  "completion_end_position": {
    "line": 67,
    "character": 83
  },
  "completion": "\n\t\t\tthis._logger.logInfo})",
  "timestamp": "2024-02-14T19:09:38.328Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\n\t\t\tthis._logger.logInfo})",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 58
  },
  "end_position": {
    "line": 67,
    "character": 83
  },
  "timestamp": "2024-02-14T19:09:38.328Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 0,
  "completion": "\n\t\t\tthis._logger.logInfo})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-14T19:09:38.330Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "\n\t\t\tthis._logger.logInfo",
  "final_completion": "\n\t\t\tthis._logger.logInfo",
  "timestamp": "2024-02-14T19:09:38.330Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\n\t\t\tthis._logger.logInfo",
  "completion": "\n\t\t\tthis._logger.logInfo",
  "timestamp": "2024-02-14T19:09:38.330Z"
}
{
  "message": "sidecar.multiline.completion_extract",
  "event_name": "sidecar.multiline.completion_extract",
  "completion": "\n\t\t\tthis._logger.logInfo",
  "raw_completion": "\n\t\t\tthis._logger.logInfo",
  "timestamp": "2024-02-14T19:09:38.330Z"
}
{
  "message": "sidecar.stop_streamind_and_use_partial_response",
  "event_name": "sidecar.stop_streaming_and_use_partial_response_first",
  "completion": "\n\t\t\tthis._logger.logInfo",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.331Z"
}
{
  "message": "sidecar.request_manager.hotstreak.completions",
  "event_name": "sidecar.request_manager.hotstreak.completions",
  "id": "completions-51",
  "completions": 0,
  "timestamp": "2024-02-14T19:09:38.331Z"
}
{
  "message": "sidecar.hotstreak.create",
  "event_name": "hotstreak.create",
  "raw_completion": {
    "insertText": "\n\t\t\tthis._logger.logInfo",
    "points": {
      "start": {
        "row": 66,
        "column": 58
      },
      "end": {
        "row": 67,
        "column": 81
      },
      "trigger": {
        "row": 66,
        "column": 57
      }
    },
    "tree": {
      "0": 15594664,
      "language": {
        "0": 1071456,
        "types": [
          null,
          "identifier",
          "hash_bang_line",
          "export",
          "*",
          "default",
          "type",
          "=",
          "as",
          "namespace",
          "{",
          ",",
          "}",
          "typeof",
          "import",
          "from",
          "var",
          "let",
          "const",
          "!",
          "else",
          "if",
          "switch",
          "for",
          "(",
          ")",
          "await",
          "in",
          "of",
          "while",
          "do",
          "try",
          "with",
          "break",
          "continue",
          "debugger",
          "return",
          "throw",
          ";",
          ":",
          "case",
          "catch",
          "finally",
          "yield",
          "[",
          "]",
          "<",
          ">",
          "/",
          ".",
          "class",
          "async",
          "function",
          "=>",
          "?.",
          "new",
          "+=",
          "-=",
          "*=",
          "/=",
          "%=",
          "^=",
          "&=",
          "|=",
          ">>=",
          ">>>=",
          "<<=",
          "**=",
          "&&=",
          "||=",
          "??=",
          "...",
          "&&",
          "||",
          ">>",
          ">>>",
          "<<",
          "&",
          "^",
          "|",
          "+",
          "-",
          "%",
          "**",
          "<=",
          "==",
          "===",
          "!=",
          "!==",
          ">=",
          "??",
          "instanceof",
          "~",
          "void",
          "delete",
          "++",
          "--",
          "\"",
          "'",
          "string_fragment",
          "string_fragment",
          "escape_sequence",
          "comment",
          "`",
          "${",
          "/",
          "regex_pattern",
          "regex_flags",
          "number",
          "private_property_identifier",
          "target",
          "this",
          "super",
          "true",
          "false",
          "null",
          "undefined",
          "@",
          "static",
          "readonly",
          "get",
          "set",
          "?",
          "declare",
          "public",
          "private",
          "protected",
          "override",
          "module",
          "any",
          "number",
          "boolean",
          "string",
          "symbol",
          "abstract",
          "require",
          "extends",
          "implements",
          "global",
          "interface",
          "enum",
          "-?:",
          "?:",
          "asserts",
          "infer",
          "is",
          "keyof",
          "unknown",
          "never",
          "object",
          "{|",
          "|}",
          null,
          null,
          "?",
          null,
          "program",
          "export_statement",
          "export_clause",
          "export_specifier",
          null,
          "import",
          "import_statement",
          "import_clause",
          null,
          "namespace_import",
          "named_imports",
          "expression_statement",
          "variable_declaration",
          "lexical_declaration",
          "variable_declarator",
          "statement_block",
          "else_clause",
          "if_statement",
          "switch_statement",
          "for_statement",
          "for_in_statement",
          null,
          "while_statement",
          "do_statement",
          "try_statement",
          "with_statement",
          "break_statement",
          "continue_statement",
          "debugger_statement",
          "return_statement",
          "throw_statement",
          "empty_statement",
          "labeled_statement",
          "switch_body",
          "switch_case",
          "switch_default",
          "catch_clause",
          "finally_clause",
          "parenthesized_expression",
          null,
          null,
          "yield_expression",
          "object",
          "object_pattern",
          "assignment_pattern",
          "object_assignment_pattern",
          "array",
          "array_pattern",
          "nested_identifier",
          "class",
          "class_declaration",
          "class_heritage",
          "function",
          "function_declaration",
          "generator_function",
          "generator_function_declaration",
          "arrow_function",
          null,
          null,
          "call_expression",
          "new_expression",
          "await_expression",
          "member_expression",
          "subscript_expression",
          "assignment_expression",
          null,
          "augmented_assignment_expression",
          null,
          null,
          "spread_element",
          "ternary_expression",
          "binary_expression",
          "unary_expression",
          "update_expression",
          "sequence_expression",
          "string",
          "template_string",
          "template_substitution",
          "regex",
          "meta_property",
          "arguments",
          "decorator",
          "member_expression",
          "call_expression",
          "class_body",
          "formal_parameters",
          null,
          "rest_pattern",
          "method_definition",
          "pair",
          "pair_pattern",
          null,
          "computed_property_name",
          "public_field_definition",
          "non_null_expression",
          "method_signature",
          "abstract_method_signature",
          "function_signature",
          "type_assertion",
          "as_expression",
          "import_require_clause",
          "extends_clause",
          "implements_clause",
          "ambient_declaration",
          "abstract_class_declaration",
          "module",
          "internal_module",
          null,
          "import_alias",
          "nested_type_identifier",
          "interface_declaration",
          "extends_type_clause",
          "enum_declaration",
          "enum_body",
          "enum_assignment",
          "type_alias_declaration",
          "accessibility_modifier",
          "override_modifier",
          "required_parameter",
          "optional_parameter",
          null,
          "omitting_type_annotation",
          "opting_type_annotation",
          "type_annotation",
          "asserts",
          null,
          "required_parameter",
          "optional_parameter",
          "optional_type",
          "rest_type",
          null,
          "constructor_type",
          null,
          "template_type",
          "template_literal_type",
          "infer_type",
          "conditional_type",
          "generic_type",
          "type_predicate",
          "type_predicate_annotation",
          "member_expression",
          "subscript_expression",
          "call_expression",
          "type_query",
          "index_type_query",
          "lookup_type",
          "mapped_type_clause",
          "literal_type",
          "unary_expression",
          "existential_type",
          "flow_maybe_type",
          "parenthesized_type",
          "predefined_type",
          "type_arguments",
          "object_type",
          "call_signature",
          "property_signature",
          "type_parameters",
          "type_parameter",
          "default_type",
          "constraint",
          "construct_signature",
          "index_signature",
          "array_type",
          "tuple_type",
          "readonly_type",
          "union_type",
          "intersection_type",
          "function_type",
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          "import_specifier",
          "namespace_export",
          "property_identifier",
          "shorthand_property_identifier",
          "shorthand_property_identifier_pattern",
          "statement_identifier",
          "this_type",
          "type_identifier"
        ],
        "fields": [
          null,
          "alias",
          "alternative",
          "argument",
          "arguments",
          "body",
          "condition",
          "consequence",
          "constraint",
          "constructor",
          "declaration",
          "decorator",
          "finalizer",
          "flags",
          "function",
          "handler",
          "increment",
          "index",
          "index_type",
          "initializer",
          "key",
          "kind",
          "label",
          "left",
          "module",
          "name",
          "object",
          "operator",
          "parameter",
          "parameters",
          "pattern",
          "property",
          "return_type",
          "right",
          "sign",
          "source",
          "type",
          "type_arguments",
          "type_parameters",
          "value"
        ]
      }
    },
    "parseErrorCount": 1,
    "lineTruncatedCount": 0,
    "truncatedWith": "tree-sitter",
    "nodeTypes": {
      "atCursor": "{",
      "parent": "statement_block",
      "grandparent": "arrow_function",
      "greatGrandparent": "ERROR",
      "lastAncestorOnTheSameLine": "ERROR"
    },
    "nodeTypesWithCompletion": {
      "atCursor": "{",
      "parent": "statement_block",
      "grandparent": "arrow_function",
      "greatGrandparent": "ERROR",
      "lastAncestorOnTheSameLine": "ERROR"
    }
  },
  "raw_completion_len": 24,
  "timestamp": "2024-02-14T19:09:38.331Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo",
  "raw_completion_len": 24,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.332Z"
}
{
  "message": "sidecar.hotstreak.unprocessedCompletion",
  "event_name": "sidecar.hotstreak.unprocessedCompletion.empty",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.332Z"
}
{
  "message": "sidecar.providerInlineCompletionItems.COMPLETE",
  "event_name": "sidecar.provide_inline_completions.COMPLETE",
  "inline_completions": [
    "\n\t\t\tthis._logger.logInfo"
  ],
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.332Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-52",
  "timestamp": "2024-02-14T19:09:38.335Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-52",
  "multiline_trigger": "{",
  "timestamp": "2024-02-14T19:09:38.335Z"
}
{
  "message": "sidecar.reuseLastCandidate",
  "reuse": true,
  "id": "completions-52",
  "timestamp": "2024-02-14T19:09:38.335Z"
}
{
  "message": "sidecar.providerInlineCompletionItems.COMPLETE",
  "event_name": "sidecar.provide_inline_completions.COMPLETE",
  "inline_completions": [
    "\n\t\t\tthis._logger.logInfo"
  ],
  "id": "completions-52",
  "timestamp": "2024-02-14T19:09:38.335Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(",
  "completion_len": 25,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:38.347Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(",
  "raw_completion_len": 25,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.347Z"
}
{
  "message": "sidecar.hotstreak.unprocessedCompletion",
  "event_name": "sidecar.hotstreak.unprocessedCompletion.empty",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.347Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n",
  "completion_len": 26,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:38.414Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n",
  "raw_completion_len": 26,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.414Z"
}
{
  "message": "sidecar.hotstreak.unprocessedCompletion",
  "event_name": "sidecar.hotstreak.unprocessedCompletion.empty",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.414Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t",
  "completion_len": 29,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:38.415Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t",
  "raw_completion_len": 29,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.415Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-51",
  "partial_response": "\t",
  "timestamp": "2024-02-14T19:09:38.415Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t",
  "timestamp": "2024-02-14T19:09:38.415Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t",
  "unprocessed_completion": "\t",
  "timestamp": "2024-02-14T19:09:38.415Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'",
  "completion_len": 31,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:38.435Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'",
  "raw_completion_len": 31,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.436Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-51",
  "partial_response": "\t\t'",
  "timestamp": "2024-02-14T19:09:38.436Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t'",
  "timestamp": "2024-02-14T19:09:38.436Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'",
  "unprocessed_completion": "\t\t'",
  "timestamp": "2024-02-14T19:09:38.436Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side",
  "completion_len": 35,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:38.550Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side",
  "raw_completion_len": 35,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.550Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-51",
  "partial_response": "\t\t'side",
  "timestamp": "2024-02-14T19:09:38.550Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t'side",
  "timestamp": "2024-02-14T19:09:38.550Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side",
  "unprocessed_completion": "\t\t'side",
  "timestamp": "2024-02-14T19:09:38.550Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar",
  "completion_len": 38,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:38.550Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar",
  "raw_completion_len": 38,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.550Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-51",
  "partial_response": "\t\t'sidecar",
  "timestamp": "2024-02-14T19:09:38.550Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t'sidecar",
  "timestamp": "2024-02-14T19:09:38.550Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar",
  "unprocessed_completion": "\t\t'sidecar",
  "timestamp": "2024-02-14T19:09:38.550Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.",
  "completion_len": 39,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:38.550Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.",
  "raw_completion_len": 39,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.550Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-51",
  "partial_response": "\t\t'sidecar.",
  "timestamp": "2024-02-14T19:09:38.550Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t'sidecar.",
  "timestamp": "2024-02-14T19:09:38.550Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.",
  "unprocessed_completion": "\t\t'sidecar.",
  "timestamp": "2024-02-14T19:09:38.550Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "completion_len": 45,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:38.551Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "raw_completion_len": 45,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.551Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-51",
  "partial_response": "\t\t'sidecar.inline",
  "timestamp": "2024-02-14T19:09:38.551Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t'sidecar.inline",
  "timestamp": "2024-02-14T19:09:38.551Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "unprocessed_completion": "\t\t'sidecar.inline",
  "timestamp": "2024-02-14T19:09:38.551Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "completion_len": 53,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:38.573Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "raw_completion_len": 53,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.573Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-51",
  "partial_response": "\t\t'sidecar.inlineProvider",
  "timestamp": "2024-02-14T19:09:38.573Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t'sidecar.inlineProvider",
  "timestamp": "2024-02-14T19:09:38.573Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "unprocessed_completion": "\t\t'sidecar.inlineProvider",
  "timestamp": "2024-02-14T19:09:38.573Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "completion_len": 54,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:38.599Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "raw_completion_len": 54,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.599Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-51",
  "partial_response": "\t\t'sidecar.inlineProvider.",
  "timestamp": "2024-02-14T19:09:38.599Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t'sidecar.inlineProvider.",
  "timestamp": "2024-02-14T19:09:38.599Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "unprocessed_completion": "\t\t'sidecar.inlineProvider.",
  "timestamp": "2024-02-14T19:09:38.599Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "completion_len": 56,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:38.638Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "raw_completion_len": 56,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.638Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-51",
  "partial_response": "\t\t'sidecar.inlineProvider.ab",
  "timestamp": "2024-02-14T19:09:38.638Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t'sidecar.inlineProvider.ab",
  "timestamp": "2024-02-14T19:09:38.638Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "unprocessed_completion": "\t\t'sidecar.inlineProvider.ab",
  "timestamp": "2024-02-14T19:09:38.638Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted",
  "completion_len": 61,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:38.666Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted",
  "raw_completion_len": 61,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.666Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-51",
  "partial_response": "\t\t'sidecar.inlineProvider.aborted",
  "timestamp": "2024-02-14T19:09:38.666Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t'sidecar.inlineProvider.aborted",
  "timestamp": "2024-02-14T19:09:38.666Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted",
  "unprocessed_completion": "\t\t'sidecar.inlineProvider.aborted",
  "timestamp": "2024-02-14T19:09:38.666Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',",
  "completion_len": 63,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:38.682Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',",
  "raw_completion_len": 63,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.682Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-51",
  "partial_response": "\t\t'sidecar.inlineProvider.aborted',",
  "timestamp": "2024-02-14T19:09:38.682Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t'sidecar.inlineProvider.aborted',",
  "timestamp": "2024-02-14T19:09:38.682Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',",
  "unprocessed_completion": "\t\t'sidecar.inlineProvider.aborted',",
  "timestamp": "2024-02-14T19:09:38.682Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n",
  "completion_len": 64,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:38.740Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n",
  "raw_completion_len": 64,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.740Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 68,
    "character": 3
  },
  "completion_end_position": {
    "line": 68,
    "character": 38
  },
  "completion": "\t\t'sidecar.inlineProvider.aborted',",
  "timestamp": "2024-02-14T19:09:38.740Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t'sidecar.inlineProvider.aborted',",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo\n\t\t\t",
  "suffix": "\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo\n\t\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 58
  },
  "end_position": {
    "line": 68,
    "character": 38
  },
  "timestamp": "2024-02-14T19:09:38.740Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 1,
  "completion": "\t\t'sidecar.inlineProvider.aborted',",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:38.743Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\t\t'sidecar.inlineProvider.aborted',",
  "completion": "\t\t'sidecar.inlineProvider.aborted',\n",
  "timestamp": "2024-02-14T19:09:38.743Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-51",
  "partial_response": "\t\t'sidecar.inlineProvider.aborted',\n",
  "timestamp": "2024-02-14T19:09:38.743Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": {
    "insertText": "\t\t'sidecar.inlineProvider.aborted',",
    "points": {
      "start": {
        "row": 68,
        "column": 3
      },
      "end": {
        "row": 68,
        "column": 38
      }
    },
    "tree": {
      "0": 14255568,
      "language": {
        "0": 1071456,
        "types": [
          null,
          "identifier",
          "hash_bang_line",
          "export",
          "*",
          "default",
          "type",
          "=",
          "as",
          "namespace",
          "{",
          ",",
          "}",
          "typeof",
          "import",
          "from",
          "var",
          "let",
          "const",
          "!",
          "else",
          "if",
          "switch",
          "for",
          "(",
          ")",
          "await",
          "in",
          "of",
          "while",
          "do",
          "try",
          "with",
          "break",
          "continue",
          "debugger",
          "return",
          "throw",
          ";",
          ":",
          "case",
          "catch",
          "finally",
          "yield",
          "[",
          "]",
          "<",
          ">",
          "/",
          ".",
          "class",
          "async",
          "function",
          "=>",
          "?.",
          "new",
          "+=",
          "-=",
          "*=",
          "/=",
          "%=",
          "^=",
          "&=",
          "|=",
          ">>=",
          ">>>=",
          "<<=",
          "**=",
          "&&=",
          "||=",
          "??=",
          "...",
          "&&",
          "||",
          ">>",
          ">>>",
          "<<",
          "&",
          "^",
          "|",
          "+",
          "-",
          "%",
          "**",
          "<=",
          "==",
          "===",
          "!=",
          "!==",
          ">=",
          "??",
          "instanceof",
          "~",
          "void",
          "delete",
          "++",
          "--",
          "\"",
          "'",
          "string_fragment",
          "string_fragment",
          "escape_sequence",
          "comment",
          "`",
          "${",
          "/",
          "regex_pattern",
          "regex_flags",
          "number",
          "private_property_identifier",
          "target",
          "this",
          "super",
          "true",
          "false",
          "null",
          "undefined",
          "@",
          "static",
          "readonly",
          "get",
          "set",
          "?",
          "declare",
          "public",
          "private",
          "protected",
          "override",
          "module",
          "any",
          "number",
          "boolean",
          "string",
          "symbol",
          "abstract",
          "require",
          "extends",
          "implements",
          "global",
          "interface",
          "enum",
          "-?:",
          "?:",
          "asserts",
          "infer",
          "is",
          "keyof",
          "unknown",
          "never",
          "object",
          "{|",
          "|}",
          null,
          null,
          "?",
          null,
          "program",
          "export_statement",
          "export_clause",
          "export_specifier",
          null,
          "import",
          "import_statement",
          "import_clause",
          null,
          "namespace_import",
          "named_imports",
          "expression_statement",
          "variable_declaration",
          "lexical_declaration",
          "variable_declarator",
          "statement_block",
          "else_clause",
          "if_statement",
          "switch_statement",
          "for_statement",
          "for_in_statement",
          null,
          "while_statement",
          "do_statement",
          "try_statement",
          "with_statement",
          "break_statement",
          "continue_statement",
          "debugger_statement",
          "return_statement",
          "throw_statement",
          "empty_statement",
          "labeled_statement",
          "switch_body",
          "switch_case",
          "switch_default",
          "catch_clause",
          "finally_clause",
          "parenthesized_expression",
          null,
          null,
          "yield_expression",
          "object",
          "object_pattern",
          "assignment_pattern",
          "object_assignment_pattern",
          "array",
          "array_pattern",
          "nested_identifier",
          "class",
          "class_declaration",
          "class_heritage",
          "function",
          "function_declaration",
          "generator_function",
          "generator_function_declaration",
          "arrow_function",
          null,
          null,
          "call_expression",
          "new_expression",
          "await_expression",
          "member_expression",
          "subscript_expression",
          "assignment_expression",
          null,
          "augmented_assignment_expression",
          null,
          null,
          "spread_element",
          "ternary_expression",
          "binary_expression",
          "unary_expression",
          "update_expression",
          "sequence_expression",
          "string",
          "template_string",
          "template_substitution",
          "regex",
          "meta_property",
          "arguments",
          "decorator",
          "member_expression",
          "call_expression",
          "class_body",
          "formal_parameters",
          null,
          "rest_pattern",
          "method_definition",
          "pair",
          "pair_pattern",
          null,
          "computed_property_name",
          "public_field_definition",
          "non_null_expression",
          "method_signature",
          "abstract_method_signature",
          "function_signature",
          "type_assertion",
          "as_expression",
          "import_require_clause",
          "extends_clause",
          "implements_clause",
          "ambient_declaration",
          "abstract_class_declaration",
          "module",
          "internal_module",
          null,
          "import_alias",
          "nested_type_identifier",
          "interface_declaration",
          "extends_type_clause",
          "enum_declaration",
          "enum_body",
          "enum_assignment",
          "type_alias_declaration",
          "accessibility_modifier",
          "override_modifier",
          "required_parameter",
          "optional_parameter",
          null,
          "omitting_type_annotation",
          "opting_type_annotation",
          "type_annotation",
          "asserts",
          null,
          "required_parameter",
          "optional_parameter",
          "optional_type",
          "rest_type",
          null,
          "constructor_type",
          null,
          "template_type",
          "template_literal_type",
          "infer_type",
          "conditional_type",
          "generic_type",
          "type_predicate",
          "type_predicate_annotation",
          "member_expression",
          "subscript_expression",
          "call_expression",
          "type_query",
          "index_type_query",
          "lookup_type",
          "mapped_type_clause",
          "literal_type",
          "unary_expression",
          "existential_type",
          "flow_maybe_type",
          "parenthesized_type",
          "predefined_type",
          "type_arguments",
          "object_type",
          "call_signature",
          "property_signature",
          "type_parameters",
          "type_parameter",
          "default_type",
          "constraint",
          "construct_signature",
          "index_signature",
          "array_type",
          "tuple_type",
          "readonly_type",
          "union_type",
          "intersection_type",
          "function_type",
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          "import_specifier",
          "namespace_export",
          "property_identifier",
          "shorthand_property_identifier",
          "shorthand_property_identifier_pattern",
          "statement_identifier",
          "this_type",
          "type_identifier"
        ],
        "fields": [
          null,
          "alias",
          "alternative",
          "argument",
          "arguments",
          "body",
          "condition",
          "consequence",
          "constraint",
          "constructor",
          "declaration",
          "decorator",
          "finalizer",
          "flags",
          "function",
          "handler",
          "increment",
          "index",
          "index_type",
          "initializer",
          "key",
          "kind",
          "label",
          "left",
          "module",
          "name",
          "object",
          "operator",
          "parameter",
          "parameters",
          "pattern",
          "property",
          "return_type",
          "right",
          "sign",
          "source",
          "type",
          "type_arguments",
          "type_parameters",
          "value"
        ]
      }
    },
    "parseErrorCount": 1
  },
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t'sidecar.inlineProvider.aborted',\n",
  "timestamp": "2024-02-14T19:09:38.743Z"
}
{
  "message": "sidecar.request_manager.hotstreak.completions",
  "event_name": "sidecar.request_manager.hotstreak.completions",
  "id": "completions-51",
  "completions": 1,
  "timestamp": "2024-02-14T19:09:38.744Z"
}
{
  "message": "sidecar.hotstreak.unprocessedCompletion",
  "event_name": "sidecar.hotstreak.unprocessedCompletion.empty",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.744Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "completion_len": 67,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:38.744Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "raw_completion_len": 67,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.744Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-51",
  "partial_response": "\t\t",
  "timestamp": "2024-02-14T19:09:38.744Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t",
  "timestamp": "2024-02-14T19:09:38.744Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "unprocessed_completion": "\t\t",
  "timestamp": "2024-02-14T19:09:38.744Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{",
  "completion_len": 69,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:38.766Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{",
  "raw_completion_len": 69,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.767Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-51",
  "partial_response": "\t\t\t{",
  "timestamp": "2024-02-14T19:09:38.767Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t\t{",
  "timestamp": "2024-02-14T19:09:38.767Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{",
  "unprocessed_completion": "\t\t\t{",
  "timestamp": "2024-02-14T19:09:38.767Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n",
  "completion_len": 70,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:38.824Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n",
  "raw_completion_len": 70,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.824Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 69,
    "character": 7
  },
  "completion": "\t\t\t{",
  "timestamp": "2024-02-14T19:09:38.824Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 69,
    "character": 7
  },
  "timestamp": "2024-02-14T19:09:38.824Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:38.827Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\t\t\t\t{",
  "fixed_string": "\t\t\t\t\t\t{}",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.827Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 69,
    "character": 8
  },
  "completion": "\t\t\t{}",
  "timestamp": "2024-02-14T19:09:38.827Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{}completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 69,
    "character": 8
  },
  "timestamp": "2024-02-14T19:09:38.827Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{}",
  "parse_error_count_complete": 10,
  "timestamp": "2024-02-14T19:09:38.830Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "\t\t\t{",
  "final_completion": "\t\t\t{",
  "timestamp": "2024-02-14T19:09:38.830Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\t\t\t{",
  "completion": "\t\t\t{\n",
  "timestamp": "2024-02-14T19:09:38.830Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-51",
  "partial_response": "\t\t\t{\n",
  "timestamp": "2024-02-14T19:09:38.830Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t\t{\n",
  "timestamp": "2024-02-14T19:09:38.830Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n",
  "unprocessed_completion": "\t\t\t{\n",
  "timestamp": "2024-02-14T19:09:38.830Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t",
  "completion_len": 74,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:38.831Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t",
  "raw_completion_len": 74,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.831Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 69,
    "character": 7
  },
  "completion": "\t\t\t{",
  "timestamp": "2024-02-14T19:09:38.831Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 69,
    "character": 7
  },
  "timestamp": "2024-02-14T19:09:38.831Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:38.834Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\t\t\t\t{",
  "fixed_string": "\t\t\t\t\t\t{}",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.834Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 69,
    "character": 8
  },
  "completion": "\t\t\t{}",
  "timestamp": "2024-02-14T19:09:38.834Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{}completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 69,
    "character": 8
  },
  "timestamp": "2024-02-14T19:09:38.834Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{}",
  "parse_error_count_complete": 10,
  "timestamp": "2024-02-14T19:09:38.836Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "\t\t\t{",
  "final_completion": "\t\t\t{",
  "timestamp": "2024-02-14T19:09:38.836Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\t\t\t{",
  "completion": "\t\t\t{\n\t\t\t\t",
  "timestamp": "2024-02-14T19:09:38.836Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-51",
  "partial_response": "\t\t\t{\n\t\t\t\t",
  "timestamp": "2024-02-14T19:09:38.836Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t\t{\n\t\t\t\t",
  "timestamp": "2024-02-14T19:09:38.836Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t",
  "unprocessed_completion": "\t\t\t{\n\t\t\t\t",
  "timestamp": "2024-02-14T19:09:38.836Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'",
  "completion_len": 76,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:38.861Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'",
  "raw_completion_len": 76,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.861Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 9
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'",
  "timestamp": "2024-02-14T19:09:38.861Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 70,
    "character": 9
  },
  "timestamp": "2024-02-14T19:09:38.861Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:38.863Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'",
  "fixed_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'}",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.863Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 10
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'}",
  "timestamp": "2024-02-14T19:09:38.864Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'}completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 70,
    "character": 10
  },
  "timestamp": "2024-02-14T19:09:38.864Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'}",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:38.866Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "\t\t\t{\n\t\t\t\t\t'",
  "final_completion": "\t\t\t{\n\t\t\t\t\t'",
  "timestamp": "2024-02-14T19:09:38.866Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\t\t\t{\n\t\t\t\t\t'",
  "completion": "\t\t\t{\n\t\t\t\t\t'",
  "timestamp": "2024-02-14T19:09:38.866Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-51",
  "partial_response": "\t\t\t{\n\t\t\t\t\t'",
  "timestamp": "2024-02-14T19:09:38.866Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t\t{\n\t\t\t\t\t'",
  "timestamp": "2024-02-14T19:09:38.866Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'",
  "unprocessed_completion": "\t\t\t{\n\t\t\t\t\t'",
  "timestamp": "2024-02-14T19:09:38.866Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "completion_len": 81,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:38.881Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "raw_completion_len": 81,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.881Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 14
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event",
  "timestamp": "2024-02-14T19:09:38.881Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'eventcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 70,
    "character": 14
  },
  "timestamp": "2024-02-14T19:09:38.881Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:38.883Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event",
  "fixed_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event}",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.883Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 15
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event}",
  "timestamp": "2024-02-14T19:09:38.884Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event}completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 70,
    "character": 15
  },
  "timestamp": "2024-02-14T19:09:38.884Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event}",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:38.886Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "\t\t\t{\n\t\t\t\t\t'event",
  "final_completion": "\t\t\t{\n\t\t\t\t\t'event",
  "timestamp": "2024-02-14T19:09:38.886Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\t\t\t{\n\t\t\t\t\t'event",
  "completion": "\t\t\t{\n\t\t\t\t\t'event",
  "timestamp": "2024-02-14T19:09:38.886Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-51",
  "partial_response": "\t\t\t{\n\t\t\t\t\t'event",
  "timestamp": "2024-02-14T19:09:38.886Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t\t{\n\t\t\t\t\t'event",
  "timestamp": "2024-02-14T19:09:38.886Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "unprocessed_completion": "\t\t\t{\n\t\t\t\t\t'event",
  "timestamp": "2024-02-14T19:09:38.886Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "completion_len": 82,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:38.907Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "raw_completion_len": 82,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.907Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 15
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_",
  "timestamp": "2024-02-14T19:09:38.908Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 70,
    "character": 15
  },
  "timestamp": "2024-02-14T19:09:38.908Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:38.911Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_",
  "fixed_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_}",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.911Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 16
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_}",
  "timestamp": "2024-02-14T19:09:38.911Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_}completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 70,
    "character": 16
  },
  "timestamp": "2024-02-14T19:09:38.911Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_}",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:38.913Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_",
  "final_completion": "\t\t\t{\n\t\t\t\t\t'event_",
  "timestamp": "2024-02-14T19:09:38.913Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\t\t\t{\n\t\t\t\t\t'event_",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_",
  "timestamp": "2024-02-14T19:09:38.913Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-51",
  "partial_response": "\t\t\t{\n\t\t\t\t\t'event_",
  "timestamp": "2024-02-14T19:09:38.913Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t\t{\n\t\t\t\t\t'event_",
  "timestamp": "2024-02-14T19:09:38.913Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "unprocessed_completion": "\t\t\t{\n\t\t\t\t\t'event_",
  "timestamp": "2024-02-14T19:09:38.913Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "completion_len": 86,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:38.937Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "raw_completion_len": 86,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.937Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 19
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name",
  "timestamp": "2024-02-14T19:09:38.937Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_namecompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 70,
    "character": 19
  },
  "timestamp": "2024-02-14T19:09:38.937Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:38.940Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name",
  "fixed_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name}",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.940Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 20
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name}",
  "timestamp": "2024-02-14T19:09:38.940Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name}completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 70,
    "character": 20
  },
  "timestamp": "2024-02-14T19:09:38.941Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name}",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:38.945Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name",
  "final_completion": "\t\t\t{\n\t\t\t\t\t'event_name",
  "timestamp": "2024-02-14T19:09:38.945Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\t\t\t{\n\t\t\t\t\t'event_name",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name",
  "timestamp": "2024-02-14T19:09:38.945Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-51",
  "partial_response": "\t\t\t{\n\t\t\t\t\t'event_name",
  "timestamp": "2024-02-14T19:09:38.945Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t\t{\n\t\t\t\t\t'event_name",
  "timestamp": "2024-02-14T19:09:38.945Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "unprocessed_completion": "\t\t\t{\n\t\t\t\t\t'event_name",
  "timestamp": "2024-02-14T19:09:38.945Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "completion_len": 88,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:38.961Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "raw_completion_len": 88,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.961Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 21
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name':",
  "timestamp": "2024-02-14T19:09:38.961Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name':",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name':completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 70,
    "character": 21
  },
  "timestamp": "2024-02-14T19:09:38.961Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name':",
  "parse_error_count_complete": 3,
  "timestamp": "2024-02-14T19:09:38.964Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "fixed_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name':}",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.964Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 22
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name':}",
  "timestamp": "2024-02-14T19:09:38.964Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name':}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name':}completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 70,
    "character": 22
  },
  "timestamp": "2024-02-14T19:09:38.964Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name':}",
  "parse_error_count_complete": 3,
  "timestamp": "2024-02-14T19:09:38.967Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name':",
  "final_completion": "\t\t\t{\n\t\t\t\t\t'event_name':",
  "timestamp": "2024-02-14T19:09:38.967Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\t\t\t{\n\t\t\t\t\t'event_name':",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name':",
  "timestamp": "2024-02-14T19:09:38.967Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-51",
  "partial_response": "\t\t\t{\n\t\t\t\t\t'event_name':",
  "timestamp": "2024-02-14T19:09:38.967Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t\t{\n\t\t\t\t\t'event_name':",
  "timestamp": "2024-02-14T19:09:38.967Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "unprocessed_completion": "\t\t\t{\n\t\t\t\t\t'event_name':",
  "timestamp": "2024-02-14T19:09:38.967Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "completion_len": 90,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:38.989Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "raw_completion_len": 90,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.989Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 23
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': '",
  "timestamp": "2024-02-14T19:09:38.989Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': '",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 70,
    "character": 23
  },
  "timestamp": "2024-02-14T19:09:38.989Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': '",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:38.992Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "fixed_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': '}",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:38.992Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 24
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': '}",
  "timestamp": "2024-02-14T19:09:38.992Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': '}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': '}completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 70,
    "character": 24
  },
  "timestamp": "2024-02-14T19:09:38.992Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': '}",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:38.994Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': '",
  "final_completion": "\t\t\t{\n\t\t\t\t\t'event_name': '",
  "timestamp": "2024-02-14T19:09:38.994Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\t\t\t{\n\t\t\t\t\t'event_name': '",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': '",
  "timestamp": "2024-02-14T19:09:38.994Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-51",
  "partial_response": "\t\t\t{\n\t\t\t\t\t'event_name': '",
  "timestamp": "2024-02-14T19:09:38.994Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t\t{\n\t\t\t\t\t'event_name': '",
  "timestamp": "2024-02-14T19:09:38.994Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "unprocessed_completion": "\t\t\t{\n\t\t\t\t\t'event_name': '",
  "timestamp": "2024-02-14T19:09:38.994Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "completion_len": 92,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:39.024Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "raw_completion_len": 92,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.024Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 25
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "timestamp": "2024-02-14T19:09:39.024Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'abcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 70,
    "character": 25
  },
  "timestamp": "2024-02-14T19:09:39.024Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:39.027Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "fixed_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab}",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.027Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 26
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'ab}",
  "timestamp": "2024-02-14T19:09:39.027Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'ab}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab}completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 70,
    "character": 26
  },
  "timestamp": "2024-02-14T19:09:39.027Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'ab}",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:39.029Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "final_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "timestamp": "2024-02-14T19:09:39.029Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "timestamp": "2024-02-14T19:09:39.029Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-51",
  "partial_response": "\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "timestamp": "2024-02-14T19:09:39.029Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "timestamp": "2024-02-14T19:09:39.029Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "unprocessed_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "timestamp": "2024-02-14T19:09:39.029Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted",
  "completion_len": 97,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:39.056Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted",
  "raw_completion_len": 97,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.056Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 30
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted",
  "timestamp": "2024-02-14T19:09:39.056Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'abortedcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 70,
    "character": 30
  },
  "timestamp": "2024-02-14T19:09:39.056Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:39.058Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted",
  "fixed_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted}",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.058Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 31
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted}",
  "timestamp": "2024-02-14T19:09:39.058Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted}completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 70,
    "character": 31
  },
  "timestamp": "2024-02-14T19:09:39.059Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted}",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:39.061Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted",
  "final_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted",
  "timestamp": "2024-02-14T19:09:39.061Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted",
  "timestamp": "2024-02-14T19:09:39.061Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-51",
  "partial_response": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted",
  "timestamp": "2024-02-14T19:09:39.061Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted",
  "timestamp": "2024-02-14T19:09:39.061Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted",
  "unprocessed_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted",
  "timestamp": "2024-02-14T19:09:39.061Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',",
  "completion_len": 99,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:39.080Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',",
  "raw_completion_len": 99,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.080Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 32
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',",
  "timestamp": "2024-02-14T19:09:39.081Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 70,
    "character": 32
  },
  "timestamp": "2024-02-14T19:09:39.081Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:39.083Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',",
  "fixed_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',}",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.083Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 33
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',}",
  "timestamp": "2024-02-14T19:09:39.084Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',}completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 70,
    "character": 33
  },
  "timestamp": "2024-02-14T19:09:39.084Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',}",
  "parse_error_count_complete": 10,
  "timestamp": "2024-02-14T19:09:39.086Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',",
  "final_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',",
  "timestamp": "2024-02-14T19:09:39.086Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',",
  "timestamp": "2024-02-14T19:09:39.086Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-51",
  "partial_response": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',",
  "timestamp": "2024-02-14T19:09:39.086Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',",
  "timestamp": "2024-02-14T19:09:39.086Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',",
  "unprocessed_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',",
  "timestamp": "2024-02-14T19:09:39.086Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n",
  "completion_len": 100,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:39.131Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n",
  "raw_completion_len": 100,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.131Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 32
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',",
  "timestamp": "2024-02-14T19:09:39.132Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 70,
    "character": 32
  },
  "timestamp": "2024-02-14T19:09:39.132Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:39.134Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',",
  "fixed_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',}",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.134Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 33
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',}",
  "timestamp": "2024-02-14T19:09:39.135Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',}completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 70,
    "character": 33
  },
  "timestamp": "2024-02-14T19:09:39.135Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',}",
  "parse_error_count_complete": 10,
  "timestamp": "2024-02-14T19:09:39.137Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',",
  "final_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',",
  "timestamp": "2024-02-14T19:09:39.137Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n",
  "timestamp": "2024-02-14T19:09:39.137Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-51",
  "partial_response": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n",
  "timestamp": "2024-02-14T19:09:39.137Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n",
  "timestamp": "2024-02-14T19:09:39.137Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n",
  "unprocessed_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n",
  "timestamp": "2024-02-14T19:09:39.137Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t",
  "completion_len": 104,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:39.138Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t",
  "raw_completion_len": 104,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.138Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 32
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',",
  "timestamp": "2024-02-14T19:09:39.138Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 70,
    "character": 32
  },
  "timestamp": "2024-02-14T19:09:39.138Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:39.140Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',",
  "fixed_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',}",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.141Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 70,
    "character": 33
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',}",
  "timestamp": "2024-02-14T19:09:39.141Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',}completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 70,
    "character": 33
  },
  "timestamp": "2024-02-14T19:09:39.141Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',}",
  "parse_error_count_complete": 10,
  "timestamp": "2024-02-14T19:09:39.143Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',",
  "final_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',",
  "timestamp": "2024-02-14T19:09:39.143Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t",
  "timestamp": "2024-02-14T19:09:39.143Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-51",
  "partial_response": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t",
  "timestamp": "2024-02-14T19:09:39.143Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t",
  "timestamp": "2024-02-14T19:09:39.143Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t",
  "unprocessed_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t",
  "timestamp": "2024-02-14T19:09:39.143Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'",
  "completion_len": 106,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:39.161Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'",
  "raw_completion_len": 106,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.161Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 9
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'",
  "timestamp": "2024-02-14T19:09:39.161Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 71,
    "character": 9
  },
  "timestamp": "2024-02-14T19:09:39.161Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:39.164Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'",
  "fixed_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'}",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.164Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 10
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'}",
  "timestamp": "2024-02-14T19:09:39.164Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'}completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 71,
    "character": 10
  },
  "timestamp": "2024-02-14T19:09:39.164Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'}",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:39.167Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'",
  "final_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'",
  "timestamp": "2024-02-14T19:09:39.167Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'",
  "timestamp": "2024-02-14T19:09:39.167Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-51",
  "partial_response": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'",
  "timestamp": "2024-02-14T19:09:39.167Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'",
  "timestamp": "2024-02-14T19:09:39.167Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'",
  "unprocessed_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'",
  "timestamp": "2024-02-14T19:09:39.167Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id",
  "completion_len": 108,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:39.196Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id",
  "raw_completion_len": 108,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.196Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 11
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id",
  "timestamp": "2024-02-14T19:09:39.196Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'idcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 71,
    "character": 11
  },
  "timestamp": "2024-02-14T19:09:39.196Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:39.199Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id",
  "fixed_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id}",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.199Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 12
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id}",
  "timestamp": "2024-02-14T19:09:39.199Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id}completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 71,
    "character": 12
  },
  "timestamp": "2024-02-14T19:09:39.199Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id}",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:39.201Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id",
  "final_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id",
  "timestamp": "2024-02-14T19:09:39.201Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id",
  "timestamp": "2024-02-14T19:09:39.201Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-51",
  "partial_response": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id",
  "timestamp": "2024-02-14T19:09:39.201Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id",
  "timestamp": "2024-02-14T19:09:39.201Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id",
  "unprocessed_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id",
  "timestamp": "2024-02-14T19:09:39.201Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id':",
  "completion_len": 110,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:39.219Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id':",
  "raw_completion_len": 110,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.219Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 13
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id':",
  "timestamp": "2024-02-14T19:09:39.220Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id':",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id':completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 71,
    "character": 13
  },
  "timestamp": "2024-02-14T19:09:39.220Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id':",
  "parse_error_count_complete": 3,
  "timestamp": "2024-02-14T19:09:39.222Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id':",
  "fixed_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id':}",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.222Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 14
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id':}",
  "timestamp": "2024-02-14T19:09:39.223Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id':}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id':}completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 71,
    "character": 14
  },
  "timestamp": "2024-02-14T19:09:39.223Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id':}",
  "parse_error_count_complete": 3,
  "timestamp": "2024-02-14T19:09:39.225Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id':",
  "final_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id':",
  "timestamp": "2024-02-14T19:09:39.225Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id':",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id':",
  "timestamp": "2024-02-14T19:09:39.225Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-51",
  "partial_response": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id':",
  "timestamp": "2024-02-14T19:09:39.225Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id':",
  "timestamp": "2024-02-14T19:09:39.225Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id':",
  "unprocessed_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id':",
  "timestamp": "2024-02-14T19:09:39.225Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this",
  "completion_len": 115,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:39.243Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this",
  "raw_completion_len": 115,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.243Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 18
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this",
  "timestamp": "2024-02-14T19:09:39.243Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': thiscompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 71,
    "character": 18
  },
  "timestamp": "2024-02-14T19:09:39.243Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this",
  "parse_error_count_complete": 3,
  "timestamp": "2024-02-14T19:09:39.246Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this",
  "fixed_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this}",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.246Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 19
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this}",
  "timestamp": "2024-02-14T19:09:39.246Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this}completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 71,
    "character": 19
  },
  "timestamp": "2024-02-14T19:09:39.246Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this}",
  "parse_error_count_complete": 10,
  "timestamp": "2024-02-14T19:09:39.249Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this",
  "final_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this",
  "timestamp": "2024-02-14T19:09:39.249Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this",
  "timestamp": "2024-02-14T19:09:39.249Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-51",
  "partial_response": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this",
  "timestamp": "2024-02-14T19:09:39.249Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this",
  "timestamp": "2024-02-14T19:09:39.249Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this",
  "unprocessed_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this",
  "timestamp": "2024-02-14T19:09:39.249Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.",
  "completion_len": 116,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:39.271Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.",
  "raw_completion_len": 116,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.271Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 19
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.",
  "timestamp": "2024-02-14T19:09:39.271Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 71,
    "character": 19
  },
  "timestamp": "2024-02-14T19:09:39.271Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.",
  "parse_error_count_complete": 3,
  "timestamp": "2024-02-14T19:09:39.274Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.",
  "fixed_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.}",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.274Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 20
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.}",
  "timestamp": "2024-02-14T19:09:39.274Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.}completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 71,
    "character": 20
  },
  "timestamp": "2024-02-14T19:09:39.274Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.}",
  "parse_error_count_complete": 4,
  "timestamp": "2024-02-14T19:09:39.276Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.",
  "final_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.",
  "timestamp": "2024-02-14T19:09:39.276Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.",
  "timestamp": "2024-02-14T19:09:39.276Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-51",
  "partial_response": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.",
  "timestamp": "2024-02-14T19:09:39.276Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.",
  "timestamp": "2024-02-14T19:09:39.276Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.",
  "unprocessed_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.",
  "timestamp": "2024-02-14T19:09:39.276Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options",
  "completion_len": 123,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:39.299Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options",
  "raw_completion_len": 123,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.299Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 26
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options",
  "timestamp": "2024-02-14T19:09:39.299Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.optionscompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 71,
    "character": 26
  },
  "timestamp": "2024-02-14T19:09:39.299Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options",
  "parse_error_count_complete": 3,
  "timestamp": "2024-02-14T19:09:39.301Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options",
  "fixed_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options}",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.301Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 27
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options}",
  "timestamp": "2024-02-14T19:09:39.302Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options}completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 71,
    "character": 27
  },
  "timestamp": "2024-02-14T19:09:39.302Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options}",
  "parse_error_count_complete": 10,
  "timestamp": "2024-02-14T19:09:39.304Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options",
  "final_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options",
  "timestamp": "2024-02-14T19:09:39.304Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options",
  "timestamp": "2024-02-14T19:09:39.304Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-51",
  "partial_response": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options",
  "timestamp": "2024-02-14T19:09:39.304Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options",
  "timestamp": "2024-02-14T19:09:39.304Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options",
  "unprocessed_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options",
  "timestamp": "2024-02-14T19:09:39.304Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.",
  "completion_len": 124,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:39.327Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.",
  "raw_completion_len": 124,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.327Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 27
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.",
  "timestamp": "2024-02-14T19:09:39.327Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 71,
    "character": 27
  },
  "timestamp": "2024-02-14T19:09:39.327Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.",
  "parse_error_count_complete": 3,
  "timestamp": "2024-02-14T19:09:39.330Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.",
  "fixed_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.}",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.330Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 28
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.}",
  "timestamp": "2024-02-14T19:09:39.330Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.}completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 71,
    "character": 28
  },
  "timestamp": "2024-02-14T19:09:39.330Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.}",
  "parse_error_count_complete": 4,
  "timestamp": "2024-02-14T19:09:39.332Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.",
  "final_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.",
  "timestamp": "2024-02-14T19:09:39.332Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.",
  "timestamp": "2024-02-14T19:09:39.332Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-51",
  "partial_response": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.",
  "timestamp": "2024-02-14T19:09:39.332Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.",
  "timestamp": "2024-02-14T19:09:39.332Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.",
  "unprocessed_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.",
  "timestamp": "2024-02-14T19:09:39.332Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.span",
  "completion_len": 128,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:39.360Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.span",
  "raw_completion_len": 128,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.360Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 31
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.span",
  "timestamp": "2024-02-14T19:09:39.360Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.span",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spancompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 71,
    "character": 31
  },
  "timestamp": "2024-02-14T19:09:39.360Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.span",
  "parse_error_count_complete": 3,
  "timestamp": "2024-02-14T19:09:39.363Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.span",
  "fixed_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.span}",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.363Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 32
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.span}",
  "timestamp": "2024-02-14T19:09:39.363Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.span}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.span}completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 71,
    "character": 32
  },
  "timestamp": "2024-02-14T19:09:39.363Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.span}",
  "parse_error_count_complete": 10,
  "timestamp": "2024-02-14T19:09:39.366Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.span",
  "final_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.span",
  "timestamp": "2024-02-14T19:09:39.366Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.span",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.span",
  "timestamp": "2024-02-14T19:09:39.366Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-51",
  "partial_response": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.span",
  "timestamp": "2024-02-14T19:09:39.366Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.span",
  "timestamp": "2024-02-14T19:09:39.366Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.span",
  "unprocessed_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.span",
  "timestamp": "2024-02-14T19:09:39.366Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId",
  "completion_len": 130,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:39.394Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId",
  "raw_completion_len": 130,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.394Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 33
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId",
  "timestamp": "2024-02-14T19:09:39.394Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanIdcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 71,
    "character": 33
  },
  "timestamp": "2024-02-14T19:09:39.394Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId",
  "parse_error_count_complete": 3,
  "timestamp": "2024-02-14T19:09:39.397Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId",
  "fixed_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId}",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.397Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 34
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId}",
  "timestamp": "2024-02-14T19:09:39.398Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId}completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 71,
    "character": 34
  },
  "timestamp": "2024-02-14T19:09:39.398Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId}",
  "parse_error_count_complete": 10,
  "timestamp": "2024-02-14T19:09:39.400Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId",
  "final_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId",
  "timestamp": "2024-02-14T19:09:39.400Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId",
  "timestamp": "2024-02-14T19:09:39.400Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-51",
  "partial_response": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId",
  "timestamp": "2024-02-14T19:09:39.400Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId",
  "timestamp": "2024-02-14T19:09:39.400Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId",
  "unprocessed_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId",
  "timestamp": "2024-02-14T19:09:39.400Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "completion_len": 131,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:39.416Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "raw_completion_len": 131,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.416Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 34
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "timestamp": "2024-02-14T19:09:39.417Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 71,
    "character": 34
  },
  "timestamp": "2024-02-14T19:09:39.417Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:39.419Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "fixed_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,}",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.419Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 35
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,}",
  "timestamp": "2024-02-14T19:09:39.419Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,}completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 71,
    "character": 35
  },
  "timestamp": "2024-02-14T19:09:39.419Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,}",
  "parse_error_count_complete": 10,
  "timestamp": "2024-02-14T19:09:39.422Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "final_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "timestamp": "2024-02-14T19:09:39.422Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "timestamp": "2024-02-14T19:09:39.422Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-51",
  "partial_response": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "timestamp": "2024-02-14T19:09:39.422Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "timestamp": "2024-02-14T19:09:39.422Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "unprocessed_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "timestamp": "2024-02-14T19:09:39.422Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n",
  "completion_len": 132,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:39.471Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n",
  "raw_completion_len": 132,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.471Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 34
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "timestamp": "2024-02-14T19:09:39.471Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 71,
    "character": 34
  },
  "timestamp": "2024-02-14T19:09:39.471Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:39.474Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "fixed_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,}",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.474Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 35
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,}",
  "timestamp": "2024-02-14T19:09:39.474Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,}completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 71,
    "character": 35
  },
  "timestamp": "2024-02-14T19:09:39.474Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,}",
  "parse_error_count_complete": 10,
  "timestamp": "2024-02-14T19:09:39.477Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "final_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "timestamp": "2024-02-14T19:09:39.477Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n",
  "timestamp": "2024-02-14T19:09:39.477Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-51",
  "partial_response": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n",
  "timestamp": "2024-02-14T19:09:39.477Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n",
  "timestamp": "2024-02-14T19:09:39.477Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n",
  "unprocessed_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n",
  "timestamp": "2024-02-14T19:09:39.477Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t",
  "completion_len": 135,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:39.478Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t",
  "raw_completion_len": 135,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.478Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 34
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "timestamp": "2024-02-14T19:09:39.478Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 71,
    "character": 34
  },
  "timestamp": "2024-02-14T19:09:39.478Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-14T19:09:39.480Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "fixed_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,}",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.480Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 71,
    "character": 35
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,}",
  "timestamp": "2024-02-14T19:09:39.481Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,}completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 71,
    "character": 35
  },
  "timestamp": "2024-02-14T19:09:39.481Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,}",
  "parse_error_count_complete": 10,
  "timestamp": "2024-02-14T19:09:39.483Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "final_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "timestamp": "2024-02-14T19:09:39.483Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t",
  "timestamp": "2024-02-14T19:09:39.483Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-51",
  "partial_response": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t",
  "timestamp": "2024-02-14T19:09:39.483Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t",
  "timestamp": "2024-02-14T19:09:39.483Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t",
  "unprocessed_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t",
  "timestamp": "2024-02-14T19:09:39.483Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "completion_len": 137,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:39.492Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "raw_completion_len": 137,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.492Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 72,
    "character": 8
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-14T19:09:39.492Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 72,
    "character": 8
  },
  "timestamp": "2024-02-14T19:09:39.492Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "parse_error_count_complete": 10,
  "timestamp": "2024-02-14T19:09:39.495Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "fixed_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.495Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "final_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-14T19:09:39.495Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-14T19:09:39.495Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-51",
  "partial_response": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-14T19:09:39.495Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-14T19:09:39.495Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "unprocessed_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-14T19:09:39.495Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n",
  "completion_len": 138,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:39.557Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n",
  "raw_completion_len": 138,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.557Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 72,
    "character": 8
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-14T19:09:39.557Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 72,
    "character": 8
  },
  "timestamp": "2024-02-14T19:09:39.557Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "parse_error_count_complete": 10,
  "timestamp": "2024-02-14T19:09:39.560Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "fixed_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.560Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "final_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-14T19:09:39.560Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n",
  "timestamp": "2024-02-14T19:09:39.560Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-51",
  "partial_response": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n",
  "timestamp": "2024-02-14T19:09:39.560Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n",
  "timestamp": "2024-02-14T19:09:39.560Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n",
  "unprocessed_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n",
  "timestamp": "2024-02-14T19:09:39.560Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t",
  "completion_len": 140,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:39.561Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t",
  "raw_completion_len": 140,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.561Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 72,
    "character": 8
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-14T19:09:39.561Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 72,
    "character": 8
  },
  "timestamp": "2024-02-14T19:09:39.561Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "parse_error_count_complete": 10,
  "timestamp": "2024-02-14T19:09:39.563Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "fixed_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.564Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "final_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-14T19:09:39.564Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t",
  "timestamp": "2024-02-14T19:09:39.564Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-51",
  "partial_response": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t",
  "timestamp": "2024-02-14T19:09:39.564Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t",
  "timestamp": "2024-02-14T19:09:39.564Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t",
  "unprocessed_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t",
  "timestamp": "2024-02-14T19:09:39.564Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t",
  "completion_len": 141,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:39.577Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t",
  "raw_completion_len": 141,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.577Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 72,
    "character": 8
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-14T19:09:39.577Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 72,
    "character": 8
  },
  "timestamp": "2024-02-14T19:09:39.577Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "parse_error_count_complete": 10,
  "timestamp": "2024-02-14T19:09:39.580Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "fixed_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.580Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "final_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-14T19:09:39.580Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t",
  "timestamp": "2024-02-14T19:09:39.580Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-51",
  "partial_response": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t",
  "timestamp": "2024-02-14T19:09:39.580Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t",
  "timestamp": "2024-02-14T19:09:39.580Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t",
  "unprocessed_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t",
  "timestamp": "2024-02-14T19:09:39.580Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "completion_len": 143,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:39.605Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "raw_completion_len": 143,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.605Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 73,
    "character": 8
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "timestamp": "2024-02-14T19:09:39.606Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 73,
    "character": 8
  },
  "timestamp": "2024-02-14T19:09:39.606Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "parse_error_count_complete": 4,
  "timestamp": "2024-02-14T19:09:39.608Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "fixed_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.609Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "final_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "timestamp": "2024-02-14T19:09:39.609Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "timestamp": "2024-02-14T19:09:39.609Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-51",
  "partial_response": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "timestamp": "2024-02-14T19:09:39.609Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "timestamp": "2024-02-14T19:09:39.609Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "unprocessed_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "timestamp": "2024-02-14T19:09:39.609Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n",
  "completion_len": 144,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:39.664Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n",
  "raw_completion_len": 144,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.664Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 73,
    "character": 8
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "timestamp": "2024-02-14T19:09:39.665Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 73,
    "character": 8
  },
  "timestamp": "2024-02-14T19:09:39.665Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "parse_error_count_complete": 4,
  "timestamp": "2024-02-14T19:09:39.667Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "fixed_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.667Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "final_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "timestamp": "2024-02-14T19:09:39.667Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n",
  "timestamp": "2024-02-14T19:09:39.667Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-51",
  "partial_response": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n",
  "timestamp": "2024-02-14T19:09:39.667Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n",
  "timestamp": "2024-02-14T19:09:39.667Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n",
  "unprocessed_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n",
  "timestamp": "2024-02-14T19:09:39.667Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t",
  "completion_len": 145,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:39.668Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t",
  "raw_completion_len": 145,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.668Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 73,
    "character": 8
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "timestamp": "2024-02-14T19:09:39.668Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 73,
    "character": 8
  },
  "timestamp": "2024-02-14T19:09:39.668Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 2,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "parse_error_count_complete": 4,
  "timestamp": "2024-02-14T19:09:39.671Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "fixed_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.671Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "final_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "timestamp": "2024-02-14T19:09:39.671Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t",
  "timestamp": "2024-02-14T19:09:39.671Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-51",
  "partial_response": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t",
  "timestamp": "2024-02-14T19:09:39.671Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t",
  "timestamp": "2024-02-14T19:09:39.671Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t",
  "unprocessed_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t",
  "timestamp": "2024-02-14T19:09:39.671Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "completion_len": 149,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:39.688Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "raw_completion_len": 149,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.688Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 74,
    "character": 8
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-14T19:09:39.688Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 74,
    "character": 8
  },
  "timestamp": "2024-02-14T19:09:39.688Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 1,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "parse_error_count_complete": 3,
  "timestamp": "2024-02-14T19:09:39.691Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "fixed_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.691Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "final_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-14T19:09:39.691Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-14T19:09:39.691Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-51",
  "partial_response": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-14T19:09:39.691Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-14T19:09:39.691Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "unprocessed_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-14T19:09:39.691Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": true,
  "completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "completion_len": 149,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-14T19:09:39.758Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "raw_completion_len": 149,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.758Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 69,
    "character": 3
  },
  "completion_end_position": {
    "line": 74,
    "character": 8
  },
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-14T19:09:39.758Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-51",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "prefix": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t",
  "suffix": "completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log if the signal was aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\t\n\t\t\tthis._logger.logInfo\n\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});completionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 68,
    "character": 3
  },
  "end_position": {
    "line": 74,
    "character": 8
  },
  "timestamp": "2024-02-14T19:09:39.758Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-51",
  "parse_error_count": 1,
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "parse_error_count_complete": 3,
  "timestamp": "2024-02-14T19:09:39.761Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "fixed_string": "\t\t\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "id": "completions-51",
  "timestamp": "2024-02-14T19:09:39.761Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "final_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-14T19:09:39.761Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-51",
  "insert_text": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-14T19:09:39.761Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-51",
  "partial_response": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-14T19:09:39.761Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": null,
  "id": "completions-51",
  "is_request_ended": false,
  "unprocessedCompletion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-14T19:09:39.761Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-51",
  "raw_completion": "\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "unprocessed_completion": "\t\t\t{\n\t\t\t\t\t'event_name': 'aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-14T19:09:39.761Z"
}
