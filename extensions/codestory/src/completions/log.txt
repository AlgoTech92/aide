{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-1",
  "timestamp": "2024-02-15T00:46:29.207Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-1",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-15T00:46:29.208Z"
}
{
  "message": "sidecar.get_inline_completions.request",
  "event_name": "sidecar.get_inline_completions.request",
  "id": "completions-1",
  "doc_context_multiline": "not_present",
  "prefix": "\t\t",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:29.208Z"
}
{
  "message": "sidecar.inlineProvider",
  "event_name": "generate_completions",
  "id": "completions-1",
  "timestamp": "2024-02-15T00:46:29.335Z"
}
{
  "message": "sidecar.inlineProvider.send_completion_request",
  "event_name": "send_completion_request",
  "id": "completions-1",
  "timestamp": "2024-02-15T00:46:29.336Z"
}
{
  "message": "sidecar.inlineProvider.responseStream",
  "event_name": "response_stream",
  "id": "completions-1",
  "time_taken": 0.09954199939966202,
  "timestamp": "2024-02-15T00:46:29.336Z"
}
{
  "message": "sidecar.completion_request.generator",
  "event_name": "sidecar.completion_request.generator",
  "id": "completions-1",
  "timestamp": "2024-02-15T00:46:29.336Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-1",
  "timestamp": "2024-02-15T00:46:29.489Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "",
  "completion_len": 0,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-15T00:46:29.496Z"
}
{
  "message": "sidecar.DO_NOT_LOG",
  "event_name": "DO_NOT_LOG_EVER",
  "id": "completions-1",
  "timestamp": "2024-02-15T00:46:29.496Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 66,
    "character": 2
  },
  "completion_end_position": {
    "line": 66,
    "character": 2
  },
  "completion": "",
  "timestamp": "2024-02-15T00:46:29.497Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-1",
  "completion": "",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t/\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 2
  },
  "end_position": {
    "line": 66,
    "character": 2
  },
  "timestamp": "2024-02-15T00:46:29.497Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-1",
  "parse_error_count": 0,
  "completion": "",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:29.505Z"
}
{
  "message": "sidecar.stop_streaming_and_use_partial_response",
  "event_name": "sidecar.stop_streaming_and_use_partial_response_first",
  "completion": "",
  "id": "completions-1",
  "timestamp": "2024-02-15T00:46:29.505Z"
}
{
  "message": "sidecar.request_manager.current.completions",
  "event_name": "sidecar.request_manager.current.completions",
  "id": "completions-1",
  "completion": 1,
  "timestamp": "2024-02-15T00:46:29.506Z"
}
{
  "message": "sidecar.request_manager.hotstreak.completions",
  "event_name": "sidecar.request_manager.hotstreak.completions",
  "id": "completions-1",
  "completions": 0,
  "timestamp": "2024-02-15T00:46:29.506Z"
}
{
  "message": "sidecar.hotstreak.create",
  "event_name": "hotstreak.create",
  "raw_completion_insert_text": "",
  "raw_completion_parse_error_count": 0,
  "raw_completion_len": 0,
  "timestamp": "2024-02-15T00:46:29.506Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "",
  "raw_completion_len": 0,
  "is_request_ended": true,
  "updated_document_context": "\n\t\t",
  "id": "completions-1",
  "timestamp": "2024-02-15T00:46:29.506Z"
}
{
  "message": "sidecar.hotstreak.unprocessedCompletion",
  "event_name": "sidecar.hotstreak.unprocessedCompletion.empty",
  "id": "completions-1",
  "timestamp": "2024-02-15T00:46:29.506Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-2",
  "timestamp": "2024-02-15T00:46:29.580Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-2",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-15T00:46:29.580Z"
}
{
  "message": "sidecar.get_inline_completions.request",
  "event_name": "sidecar.get_inline_completions.request",
  "id": "completions-2",
  "doc_context_multiline": "not_present",
  "prefix": "\t\t/",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:29.580Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-2",
  "timestamp": "2024-02-15T00:46:29.619Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-3",
  "timestamp": "2024-02-15T00:46:29.671Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-3",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-15T00:46:29.671Z"
}
{
  "message": "sidecar.get_inline_completions.request",
  "event_name": "sidecar.get_inline_completions.request",
  "id": "completions-3",
  "doc_context_multiline": "not_present",
  "prefix": "\t\t//",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:29.671Z"
}
{
  "message": "sidecar.get_inline_completion_results",
  "event_name": "sidecar.get_inline_completion_results",
  "id": "completions-2",
  "prefix": "\t\t/",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:29.707Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-3",
  "timestamp": "2024-02-15T00:46:29.730Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-4",
  "timestamp": "2024-02-15T00:46:29.781Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-4",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-15T00:46:29.781Z"
}
{
  "message": "sidecar.get_inline_completions.request",
  "event_name": "sidecar.get_inline_completions.request",
  "id": "completions-4",
  "doc_context_multiline": "not_present",
  "prefix": "\t\t// ",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:29.781Z"
}
{
  "message": "sidecar.get_inline_completion_results",
  "event_name": "sidecar.get_inline_completion_results",
  "id": "completions-3",
  "prefix": "\t\t//",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:29.798Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-4",
  "timestamp": "2024-02-15T00:46:29.860Z"
}
{
  "message": "sidecar.get_inline_completion_results",
  "event_name": "sidecar.get_inline_completion_results",
  "id": "completions-4",
  "prefix": "\t\t// ",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:29.910Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-5",
  "timestamp": "2024-02-15T00:46:29.911Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-5",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-15T00:46:29.911Z"
}
{
  "message": "sidecar.get_inline_completions.request",
  "event_name": "sidecar.get_inline_completions.request",
  "id": "completions-5",
  "doc_context_multiline": "not_present",
  "prefix": "\t\t// l",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:29.911Z"
}
{
  "message": "sidecar.inlineProvider",
  "event_name": "generate_completions",
  "id": "completions-5",
  "timestamp": "2024-02-15T00:46:30.040Z"
}
{
  "message": "sidecar.inlineProvider.send_completion_request",
  "event_name": "send_completion_request",
  "id": "completions-5",
  "timestamp": "2024-02-15T00:46:30.040Z"
}
{
  "message": "sidecar.inlineProvider.responseStream",
  "event_name": "response_stream",
  "id": "completions-5",
  "time_taken": 0.02808300033211708,
  "timestamp": "2024-02-15T00:46:30.040Z"
}
{
  "message": "sidecar.completion_request.generator",
  "event_name": "sidecar.completion_request.generator",
  "id": "completions-5",
  "timestamp": "2024-02-15T00:46:30.040Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-5",
  "timestamp": "2024-02-15T00:46:30.070Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "",
  "completion_len": 0,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-15T00:46:30.118Z"
}
{
  "message": "sidecar.DO_NOT_LOG",
  "event_name": "DO_NOT_LOG_EVER",
  "id": "completions-5",
  "timestamp": "2024-02-15T00:46:30.118Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 66,
    "character": 6
  },
  "completion_end_position": {
    "line": 66,
    "character": 6
  },
  "completion": "",
  "timestamp": "2024-02-15T00:46:30.119Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-5",
  "completion": "",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// lo\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 6
  },
  "end_position": {
    "line": 66,
    "character": 6
  },
  "timestamp": "2024-02-15T00:46:30.119Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-5",
  "parse_error_count": 0,
  "completion": "",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:30.127Z"
}
{
  "message": "sidecar.stop_streaming_and_use_partial_response",
  "event_name": "sidecar.stop_streaming_and_use_partial_response_first",
  "completion": "",
  "id": "completions-5",
  "timestamp": "2024-02-15T00:46:30.127Z"
}
{
  "message": "sidecar.request_manager.current.completions",
  "event_name": "sidecar.request_manager.current.completions",
  "id": "completions-5",
  "completion": 1,
  "timestamp": "2024-02-15T00:46:30.127Z"
}
{
  "message": "sidecar.request_manager.hotstreak.completions",
  "event_name": "sidecar.request_manager.hotstreak.completions",
  "id": "completions-5",
  "completions": 0,
  "timestamp": "2024-02-15T00:46:30.127Z"
}
{
  "message": "sidecar.hotstreak.create",
  "event_name": "hotstreak.create",
  "raw_completion_insert_text": "",
  "raw_completion_parse_error_count": 0,
  "raw_completion_len": 0,
  "timestamp": "2024-02-15T00:46:30.128Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "",
  "raw_completion_len": 0,
  "is_request_ended": true,
  "updated_document_context": "\n\t\t",
  "id": "completions-5",
  "timestamp": "2024-02-15T00:46:30.128Z"
}
{
  "message": "sidecar.hotstreak.unprocessedCompletion",
  "event_name": "sidecar.hotstreak.unprocessedCompletion.empty",
  "id": "completions-5",
  "timestamp": "2024-02-15T00:46:30.128Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-6",
  "timestamp": "2024-02-15T00:46:30.130Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-6",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-15T00:46:30.130Z"
}
{
  "message": "sidecar.get_inline_completions.request",
  "event_name": "sidecar.get_inline_completions.request",
  "id": "completions-6",
  "doc_context_multiline": "not_present",
  "prefix": "\t\t// lo",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:30.130Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-6",
  "timestamp": "2024-02-15T00:46:30.154Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-7",
  "timestamp": "2024-02-15T00:46:30.214Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-7",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-15T00:46:30.214Z"
}
{
  "message": "sidecar.get_inline_completions.request",
  "event_name": "sidecar.get_inline_completions.request",
  "id": "completions-7",
  "doc_context_multiline": "not_present",
  "prefix": "\t\t// log",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:30.215Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-7",
  "timestamp": "2024-02-15T00:46:30.251Z"
}
{
  "message": "sidecar.get_inline_completion_results",
  "event_name": "sidecar.get_inline_completion_results",
  "id": "completions-6",
  "prefix": "\t\t// lo",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:30.256Z"
}
{
  "message": "sidecar.get_inline_completion_results",
  "event_name": "sidecar.get_inline_completion_results",
  "id": "completions-7",
  "prefix": "\t\t// log",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:30.342Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-8",
  "timestamp": "2024-02-15T00:46:30.383Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-8",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-15T00:46:30.384Z"
}
{
  "message": "sidecar.get_inline_completions.request",
  "event_name": "sidecar.get_inline_completions.request",
  "id": "completions-8",
  "doc_context_multiline": "not_present",
  "prefix": "\t\t// log w",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:30.384Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-8",
  "timestamp": "2024-02-15T00:46:30.394Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-9",
  "timestamp": "2024-02-15T00:46:30.447Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-9",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-15T00:46:30.447Z"
}
{
  "message": "sidecar.get_inline_completions.request",
  "event_name": "sidecar.get_inline_completions.request",
  "id": "completions-9",
  "doc_context_multiline": "not_present",
  "prefix": "\t\t// log wh",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:30.447Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-9",
  "timestamp": "2024-02-15T00:46:30.490Z"
}
{
  "message": "sidecar.get_inline_completion_results",
  "event_name": "sidecar.get_inline_completion_results",
  "id": "completions-8",
  "prefix": "\t\t// log w",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:30.512Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-10",
  "timestamp": "2024-02-15T00:46:30.544Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-10",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-15T00:46:30.544Z"
}
{
  "message": "sidecar.get_inline_completions.request",
  "event_name": "sidecar.get_inline_completions.request",
  "id": "completions-10",
  "doc_context_multiline": "not_present",
  "prefix": "\t\t// log whe",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:30.544Z"
}
{
  "message": "sidecar.get_inline_completion_results",
  "event_name": "sidecar.get_inline_completion_results",
  "id": "completions-9",
  "prefix": "\t\t// log wh",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:30.572Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-10",
  "timestamp": "2024-02-15T00:46:30.599Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-11",
  "timestamp": "2024-02-15T00:46:30.667Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-11",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-15T00:46:30.667Z"
}
{
  "message": "sidecar.get_inline_completions.request",
  "event_name": "sidecar.get_inline_completions.request",
  "id": "completions-11",
  "doc_context_multiline": "not_present",
  "prefix": "\t\t// log when",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:30.667Z"
}
{
  "message": "sidecar.get_inline_completion_results",
  "event_name": "sidecar.get_inline_completion_results",
  "id": "completions-10",
  "prefix": "\t\t// log whe",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:30.669Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-11",
  "timestamp": "2024-02-15T00:46:30.690Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-12",
  "timestamp": "2024-02-15T00:46:30.741Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-12",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-15T00:46:30.741Z"
}
{
  "message": "sidecar.get_inline_completions.request",
  "event_name": "sidecar.get_inline_completions.request",
  "id": "completions-12",
  "doc_context_multiline": "not_present",
  "prefix": "\t\t// log when ",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:30.741Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-12",
  "timestamp": "2024-02-15T00:46:30.785Z"
}
{
  "message": "sidecar.get_inline_completion_results",
  "event_name": "sidecar.get_inline_completion_results",
  "id": "completions-11",
  "prefix": "\t\t// log when",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:30.794Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-13",
  "timestamp": "2024-02-15T00:46:30.864Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-13",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-15T00:46:30.864Z"
}
{
  "message": "sidecar.get_inline_completions.request",
  "event_name": "sidecar.get_inline_completions.request",
  "id": "completions-13",
  "doc_context_multiline": "not_present",
  "prefix": "\t\t// log when t",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:30.864Z"
}
{
  "message": "sidecar.get_inline_completion_results",
  "event_name": "sidecar.get_inline_completion_results",
  "id": "completions-12",
  "prefix": "\t\t// log when ",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:30.867Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-13",
  "timestamp": "2024-02-15T00:46:30.883Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-14",
  "timestamp": "2024-02-15T00:46:30.991Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-14",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-15T00:46:30.991Z"
}
{
  "message": "sidecar.get_inline_completions.request",
  "event_name": "sidecar.get_inline_completions.request",
  "id": "completions-14",
  "doc_context_multiline": "not_present",
  "prefix": "\t\t// log when the",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:30.991Z"
}
{
  "message": "sidecar.get_inline_completion_results",
  "event_name": "sidecar.get_inline_completion_results",
  "id": "completions-13",
  "prefix": "\t\t// log when t",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:30.992Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-14",
  "timestamp": "2024-02-15T00:46:31.018Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-15",
  "timestamp": "2024-02-15T00:46:31.073Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-15",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-15T00:46:31.073Z"
}
{
  "message": "sidecar.get_inline_completions.request",
  "event_name": "sidecar.get_inline_completions.request",
  "id": "completions-15",
  "doc_context_multiline": "not_present",
  "prefix": "\t\t// log when the ",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:31.073Z"
}
{
  "message": "sidecar.get_inline_completion_results",
  "event_name": "sidecar.get_inline_completion_results",
  "id": "completions-14",
  "prefix": "\t\t// log when the",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:31.120Z"
}
{
  "message": "sidecar.inlineProvider",
  "event_name": "generate_completions",
  "id": "completions-15",
  "timestamp": "2024-02-15T00:46:31.201Z"
}
{
  "message": "sidecar.inlineProvider.send_completion_request",
  "event_name": "send_completion_request",
  "id": "completions-15",
  "timestamp": "2024-02-15T00:46:31.201Z"
}
{
  "message": "sidecar.inlineProvider.responseStream",
  "event_name": "response_stream",
  "id": "completions-15",
  "time_taken": 0.03524999879300594,
  "timestamp": "2024-02-15T00:46:31.202Z"
}
{
  "message": "sidecar.completion_request.generator",
  "event_name": "sidecar.completion_request.generator",
  "id": "completions-15",
  "timestamp": "2024-02-15T00:46:31.202Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "ab",
  "completion_len": 2,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-15T00:46:32.039Z"
}
{
  "message": "sidecar.DO_NOT_LOG",
  "event_name": "DO_NOT_LOG_EVER",
  "id": "completions-15",
  "timestamp": "2024-02-15T00:46:32.039Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-15",
  "partial_response": "ab",
  "timestamp": "2024-02-15T00:46:32.039Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "abort",
  "completion_len": 5,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-15T00:46:32.068Z"
}
{
  "message": "sidecar.DO_NOT_LOG",
  "event_name": "DO_NOT_LOG_EVER",
  "id": "completions-15",
  "timestamp": "2024-02-15T00:46:32.068Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-15",
  "partial_response": "abort",
  "timestamp": "2024-02-15T00:46:32.068Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "abort signal",
  "completion_len": 12,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-15T00:46:32.096Z"
}
{
  "message": "sidecar.DO_NOT_LOG",
  "event_name": "DO_NOT_LOG_EVER",
  "id": "completions-15",
  "timestamp": "2024-02-15T00:46:32.096Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-15",
  "partial_response": "abort signal",
  "timestamp": "2024-02-15T00:46:32.096Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "abort signal is",
  "completion_len": 15,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-15T00:46:32.124Z"
}
{
  "message": "sidecar.DO_NOT_LOG",
  "event_name": "DO_NOT_LOG_EVER",
  "id": "completions-15",
  "timestamp": "2024-02-15T00:46:32.124Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-15",
  "partial_response": "abort signal is",
  "timestamp": "2024-02-15T00:46:32.124Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-15",
  "timestamp": "2024-02-15T00:46:32.148Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "abort signal is",
  "completion_len": 15,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-15T00:46:32.151Z"
}
{
  "message": "sidecar.DO_NOT_LOG",
  "event_name": "DO_NOT_LOG_EVER",
  "id": "completions-15",
  "timestamp": "2024-02-15T00:46:32.151Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 66,
    "character": 18
  },
  "completion_end_position": {
    "line": 66,
    "character": 33
  },
  "completion": "abort signal is",
  "timestamp": "2024-02-15T00:46:32.151Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-15",
  "completion": "abort signal is",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the abort signal isc\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 18
  },
  "end_position": {
    "line": 66,
    "character": 33
  },
  "timestamp": "2024-02-15T00:46:32.151Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-15",
  "parse_error_count": 0,
  "completion": "abort signal is",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:32.156Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-15",
  "insert_text": "abort signal is",
  "completion": "abort signal is",
  "timestamp": "2024-02-15T00:46:32.156Z"
}
{
  "message": "sidecar.stop_streaming_and_use_partial_response",
  "event_name": "sidecar.stop_streaming_and_use_partial_response_first",
  "completion": "abort signal is",
  "id": "completions-15",
  "timestamp": "2024-02-15T00:46:32.158Z"
}
{
  "message": "sidecar.request_manager.current.completions",
  "event_name": "sidecar.request_manager.current.completions",
  "id": "completions-15",
  "completion": 1,
  "timestamp": "2024-02-15T00:46:32.158Z"
}
{
  "message": "sidecar.request_manager.hotstreak.completions",
  "event_name": "sidecar.request_manager.hotstreak.completions",
  "id": "completions-15",
  "completions": 0,
  "timestamp": "2024-02-15T00:46:32.158Z"
}
{
  "message": "sidecar.hotstreak.create",
  "event_name": "hotstreak.create",
  "raw_completion_insert_text": "abort signal is",
  "raw_completion_parse_error_count": 0,
  "raw_completion_len": 15,
  "timestamp": "2024-02-15T00:46:32.158Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "abort signal is",
  "raw_completion_len": 15,
  "is_request_ended": true,
  "updated_document_context": "abort signal is\n\t\t",
  "id": "completions-15",
  "timestamp": "2024-02-15T00:46:32.158Z"
}
{
  "message": "sidecar.hotstreak.unprocessedCompletion",
  "event_name": "sidecar.hotstreak.unprocessedCompletion.empty",
  "id": "completions-15",
  "timestamp": "2024-02-15T00:46:32.158Z"
}
{
  "message": "sidecar.get_inline_completion_results",
  "event_name": "sidecar.get_inline_completion_results",
  "id": "completions-15",
  "prefix": "\t\t// log when the ",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "result": "abort signal is",
  "timestamp": "2024-02-15T00:46:32.159Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-16",
  "timestamp": "2024-02-15T00:46:32.321Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-16",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-15T00:46:32.321Z"
}
{
  "message": "sidecar.get_inline_completions.request",
  "event_name": "sidecar.get_inline_completions.request",
  "id": "completions-16",
  "doc_context_multiline": "not_present",
  "prefix": "\t\t// log when the con",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:32.321Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-16",
  "timestamp": "2024-02-15T00:46:32.409Z"
}
{
  "message": "sidecar.get_inline_completion_results",
  "event_name": "sidecar.get_inline_completion_results",
  "id": "completions-16",
  "prefix": "\t\t// log when the con",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:32.448Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-17",
  "timestamp": "2024-02-15T00:46:32.491Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-17",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-15T00:46:32.491Z"
}
{
  "message": "sidecar.get_inline_completions.request",
  "event_name": "sidecar.get_inline_completions.request",
  "id": "completions-17",
  "doc_context_multiline": "not_present",
  "prefix": "\t\t// log when the cont",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:32.491Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-17",
  "timestamp": "2024-02-15T00:46:32.553Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-18",
  "timestamp": "2024-02-15T00:46:32.602Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-18",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-15T00:46:32.603Z"
}
{
  "message": "sidecar.get_inline_completions.request",
  "event_name": "sidecar.get_inline_completions.request",
  "id": "completions-18",
  "doc_context_multiline": "not_present",
  "prefix": "\t\t// log when the contr",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:32.603Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-18",
  "timestamp": "2024-02-15T00:46:32.608Z"
}
{
  "message": "sidecar.get_inline_completion_results",
  "event_name": "sidecar.get_inline_completion_results",
  "id": "completions-17",
  "prefix": "\t\t// log when the cont",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:32.619Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-19",
  "timestamp": "2024-02-15T00:46:32.666Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-19",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-15T00:46:32.666Z"
}
{
  "message": "sidecar.get_inline_completions.request",
  "event_name": "sidecar.get_inline_completions.request",
  "id": "completions-19",
  "doc_context_multiline": "not_present",
  "prefix": "\t\t// log when the contro",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:32.666Z"
}
{
  "message": "sidecar.get_inline_completion_results",
  "event_name": "sidecar.get_inline_completion_results",
  "id": "completions-18",
  "prefix": "\t\t// log when the contr",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:32.729Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-19",
  "timestamp": "2024-02-15T00:46:32.789Z"
}
{
  "message": "sidecar.get_inline_completion_results",
  "event_name": "sidecar.get_inline_completion_results",
  "id": "completions-19",
  "prefix": "\t\t// log when the contro",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:32.794Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-20",
  "timestamp": "2024-02-15T00:46:32.842Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-20",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-15T00:46:32.842Z"
}
{
  "message": "sidecar.get_inline_completions.request",
  "event_name": "sidecar.get_inline_completions.request",
  "id": "completions-20",
  "doc_context_multiline": "not_present",
  "prefix": "\t\t// log when the control",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:32.842Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-20",
  "timestamp": "2024-02-15T00:46:32.924Z"
}
{
  "message": "sidecar.get_inline_completion_results",
  "event_name": "sidecar.get_inline_completion_results",
  "id": "completions-20",
  "prefix": "\t\t// log when the control",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:32.969Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-21",
  "timestamp": "2024-02-15T00:46:33.023Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-21",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-15T00:46:33.023Z"
}
{
  "message": "sidecar.get_inline_completions.request",
  "event_name": "sidecar.get_inline_completions.request",
  "id": "completions-21",
  "doc_context_multiline": "not_present",
  "prefix": "\t\t// log when the controlle",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:33.023Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-21",
  "timestamp": "2024-02-15T00:46:33.034Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-22",
  "timestamp": "2024-02-15T00:46:33.132Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-22",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-15T00:46:33.133Z"
}
{
  "message": "sidecar.get_inline_completions.request",
  "event_name": "sidecar.get_inline_completions.request",
  "id": "completions-22",
  "doc_context_multiline": "not_present",
  "prefix": "\t\t// log when the controller ",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:33.133Z"
}
{
  "message": "sidecar.get_inline_completion_results",
  "event_name": "sidecar.get_inline_completion_results",
  "id": "completions-21",
  "prefix": "\t\t// log when the controlle",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:33.151Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-22",
  "timestamp": "2024-02-15T00:46:33.197Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-23",
  "timestamp": "2024-02-15T00:46:33.247Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-23",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-15T00:46:33.248Z"
}
{
  "message": "sidecar.get_inline_completions.request",
  "event_name": "sidecar.get_inline_completions.request",
  "id": "completions-23",
  "doc_context_multiline": "not_present",
  "prefix": "\t\t// log when the controller i",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:33.248Z"
}
{
  "message": "sidecar.get_inline_completion_results",
  "event_name": "sidecar.get_inline_completion_results",
  "id": "completions-22",
  "prefix": "\t\t// log when the controller ",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:33.260Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-23",
  "timestamp": "2024-02-15T00:46:33.296Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-24",
  "timestamp": "2024-02-15T00:46:33.365Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-24",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-15T00:46:33.366Z"
}
{
  "message": "sidecar.get_inline_completions.request",
  "event_name": "sidecar.get_inline_completions.request",
  "id": "completions-24",
  "doc_context_multiline": "not_present",
  "prefix": "\t\t// log when the controller is",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:33.366Z"
}
{
  "message": "sidecar.get_inline_completion_results",
  "event_name": "sidecar.get_inline_completion_results",
  "id": "completions-23",
  "prefix": "\t\t// log when the controller i",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:33.373Z"
}
{
  "message": "sidecar.providerOnCancellationRequested",
  "event_name": "aborting",
  "id": "completions-24",
  "timestamp": "2024-02-15T00:46:33.399Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:33.460Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-25",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-15T00:46:33.460Z"
}
{
  "message": "sidecar.get_inline_completions.request",
  "event_name": "sidecar.get_inline_completions.request",
  "id": "completions-25",
  "doc_context_multiline": "not_present",
  "prefix": "\t\t// log when the controller is ",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:33.460Z"
}
{
  "message": "sidecar.get_inline_completion_results",
  "event_name": "sidecar.get_inline_completion_results",
  "id": "completions-24",
  "prefix": "\t\t// log when the controller is",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:33.496Z"
}
{
  "message": "sidecar.inlineProvider",
  "event_name": "generate_completions",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:33.590Z"
}
{
  "message": "sidecar.inlineProvider.send_completion_request",
  "event_name": "send_completion_request",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:33.590Z"
}
{
  "message": "sidecar.inlineProvider.responseStream",
  "event_name": "response_stream",
  "id": "completions-25",
  "time_taken": 0.04345900006592274,
  "timestamp": "2024-02-15T00:46:33.590Z"
}
{
  "message": "sidecar.completion_request.generator",
  "event_name": "sidecar.completion_request.generator",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:33.590Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "ab",
  "completion_len": 2,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-15T00:46:34.175Z"
}
{
  "message": "sidecar.DO_NOT_LOG",
  "event_name": "DO_NOT_LOG_EVER",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.175Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-25",
  "partial_response": "ab",
  "timestamp": "2024-02-15T00:46:34.175Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "aborted",
  "completion_len": 7,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-15T00:46:34.212Z"
}
{
  "message": "sidecar.DO_NOT_LOG",
  "event_name": "DO_NOT_LOG_EVER",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.212Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-25",
  "partial_response": "aborted",
  "timestamp": "2024-02-15T00:46:34.212Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "aborted\n",
  "completion_len": 8,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-15T00:46:34.261Z"
}
{
  "message": "sidecar.DO_NOT_LOG",
  "event_name": "DO_NOT_LOG_EVER",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.261Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 66,
    "character": 32
  },
  "completion_end_position": {
    "line": 66,
    "character": 39
  },
  "completion": "aborted",
  "timestamp": "2024-02-15T00:46:34.261Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "aborted",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 66,
    "character": 39
  },
  "timestamp": "2024-02-15T00:46:34.261Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 0,
  "completion": "aborted",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:34.266Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-25",
  "insert_text": "aborted",
  "completion": "aborted\n",
  "timestamp": "2024-02-15T00:46:34.266Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-25",
  "partial_response": "aborted\n",
  "timestamp": "2024-02-15T00:46:34.266Z"
}
{
  "message": "sidecar.stop_streaming_and_use_partial_response",
  "event_name": "sidecar.stop_streaming_and_use_partial_response_first",
  "completion": "aborted",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.267Z"
}
{
  "message": "sidecar.request_manager.current.completions",
  "event_name": "sidecar.request_manager.current.completions",
  "id": "completions-25",
  "completion": 1,
  "timestamp": "2024-02-15T00:46:34.267Z"
}
{
  "message": "sidecar.request_manager.hotstreak.completions",
  "event_name": "sidecar.request_manager.hotstreak.completions",
  "id": "completions-25",
  "completions": 0,
  "timestamp": "2024-02-15T00:46:34.267Z"
}
{
  "message": "sidecar.hotstreak.create",
  "event_name": "hotstreak.create",
  "raw_completion_insert_text": "aborted",
  "raw_completion_parse_error_count": 0,
  "raw_completion_len": 7,
  "timestamp": "2024-02-15T00:46:34.268Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n",
  "raw_completion_len": 8,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.268Z"
}
{
  "message": "sidecar.hotstreak.unprocessedCompletion",
  "event_name": "sidecar.hotstreak.unprocessedCompletion.empty",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.268Z"
}
{
  "message": "sidecar.get_inline_completion_results",
  "event_name": "sidecar.get_inline_completion_results",
  "id": "completions-25",
  "prefix": "\t\t// log when the controller is ",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "result": "aborted",
  "timestamp": "2024-02-15T00:46:34.268Z"
}
{
  "message": "sidecar.providerInlineCompletionItems.COMPLETE",
  "event_name": "sidecar.provide_inline_completions.COMPLETE",
  "inline_completions": [
    "aborted"
  ],
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.269Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "aborted\n\t",
  "completion_len": 9,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:34.269Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t",
  "raw_completion_len": 9,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.269Z"
}
{
  "message": "sidecar.hotstreak.unprocessedCompletion",
  "event_name": "sidecar.hotstreak.unprocessedCompletion.empty",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.269Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-26",
  "timestamp": "2024-02-15T00:46:34.273Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-26",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-15T00:46:34.273Z"
}
{
  "message": "sidecar.get_inline_completions.request",
  "event_name": "sidecar.get_inline_completions.request",
  "id": "completions-26",
  "doc_context_multiline": "not_present",
  "prefix": "\t\t// log when the controller is ",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:34.274Z"
}
{
  "message": "sidecar.reuseLastCandidate",
  "reuse": true,
  "id": "completions-26",
  "timestamp": "2024-02-15T00:46:34.274Z"
}
{
  "message": "sidecar.get_inline_completion_results",
  "event_name": "sidecar.get_inline_completion_results",
  "id": "completions-26",
  "prefix": "\t\t// log when the controller is ",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "result": "aborted",
  "timestamp": "2024-02-15T00:46:34.274Z"
}
{
  "message": "sidecar.providerInlineCompletionItems.COMPLETE",
  "event_name": "sidecar.provide_inline_completions.COMPLETE",
  "inline_completions": [
    "aborted"
  ],
  "id": "completions-26",
  "timestamp": "2024-02-15T00:46:34.274Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "aborted\n\t\t",
  "completion_len": 10,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:34.287Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\t",
  "raw_completion_len": 10,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.287Z"
}
{
  "message": "sidecar.hotstreak.unprocessedCompletion",
  "event_name": "sidecar.hotstreak.unprocessedCompletion.empty",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.287Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "aborted\n\t\tab",
  "completion_len": 12,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:34.314Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tab",
  "raw_completion_len": 12,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.314Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-25",
  "partial_response": "ab",
  "timestamp": "2024-02-15T00:46:34.314Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "ab",
  "timestamp": "2024-02-15T00:46:34.314Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tab",
  "unprocessed_completion": "ab",
  "timestamp": "2024-02-15T00:46:34.314Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "aborted\n\t\tabort",
  "completion_len": 15,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:34.340Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabort",
  "raw_completion_len": 15,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.340Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-25",
  "partial_response": "abort",
  "timestamp": "2024-02-15T00:46:34.340Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abort",
  "timestamp": "2024-02-15T00:46:34.340Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabort",
  "unprocessed_completion": "abort",
  "timestamp": "2024-02-15T00:46:34.340Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "aborted\n\t\tabortSign",
  "completion_len": 19,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:34.376Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSign",
  "raw_completion_len": 19,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.376Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-25",
  "partial_response": "abortSign",
  "timestamp": "2024-02-15T00:46:34.376Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSign",
  "timestamp": "2024-02-15T00:46:34.376Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSign",
  "unprocessed_completion": "abortSign",
  "timestamp": "2024-02-15T00:46:34.376Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal",
  "completion_len": 21,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:34.398Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal",
  "raw_completion_len": 21,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.398Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-25",
  "partial_response": "abortSignal",
  "timestamp": "2024-02-15T00:46:34.398Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal",
  "timestamp": "2024-02-15T00:46:34.398Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal",
  "unprocessed_completion": "abortSignal",
  "timestamp": "2024-02-15T00:46:34.398Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.",
  "completion_len": 22,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:34.427Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.",
  "raw_completion_len": 22,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.427Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-25",
  "partial_response": "abortSignal.",
  "timestamp": "2024-02-15T00:46:34.427Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.",
  "timestamp": "2024-02-15T00:46:34.427Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.",
  "unprocessed_completion": "abortSignal.",
  "timestamp": "2024-02-15T00:46:34.427Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener",
  "completion_len": 38,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:34.458Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener",
  "raw_completion_len": 38,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.458Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener",
  "timestamp": "2024-02-15T00:46:34.458Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener",
  "timestamp": "2024-02-15T00:46:34.458Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener",
  "unprocessed_completion": "abortSignal.addEventListener",
  "timestamp": "2024-02-15T00:46:34.458Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('",
  "completion_len": 40,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:34.494Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('",
  "raw_completion_len": 40,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.494Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('",
  "timestamp": "2024-02-15T00:46:34.494Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('",
  "timestamp": "2024-02-15T00:46:34.494Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('",
  "unprocessed_completion": "abortSignal.addEventListener('",
  "timestamp": "2024-02-15T00:46:34.494Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('ab",
  "completion_len": 42,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:34.509Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('ab",
  "raw_completion_len": 42,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.509Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('ab",
  "timestamp": "2024-02-15T00:46:34.509Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('ab",
  "timestamp": "2024-02-15T00:46:34.509Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('ab",
  "unprocessed_completion": "abortSignal.addEventListener('ab",
  "timestamp": "2024-02-15T00:46:34.509Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort",
  "completion_len": 45,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:34.536Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort",
  "raw_completion_len": 45,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.536Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort",
  "timestamp": "2024-02-15T00:46:34.537Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort",
  "timestamp": "2024-02-15T00:46:34.537Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort",
  "unprocessed_completion": "abortSignal.addEventListener('abort",
  "timestamp": "2024-02-15T00:46:34.537Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort',",
  "completion_len": 47,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:34.567Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort',",
  "raw_completion_len": 47,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.567Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort',",
  "timestamp": "2024-02-15T00:46:34.567Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort',",
  "timestamp": "2024-02-15T00:46:34.567Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort',",
  "unprocessed_completion": "abortSignal.addEventListener('abort',",
  "timestamp": "2024-02-15T00:46:34.567Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort', ()",
  "completion_len": 50,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:34.592Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', ()",
  "raw_completion_len": 50,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.592Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort', ()",
  "timestamp": "2024-02-15T00:46:34.592Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort', ()",
  "timestamp": "2024-02-15T00:46:34.592Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', ()",
  "unprocessed_completion": "abortSignal.addEventListener('abort', ()",
  "timestamp": "2024-02-15T00:46:34.592Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort', () =>",
  "completion_len": 53,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:34.632Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () =>",
  "raw_completion_len": 53,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.632Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort', () =>",
  "timestamp": "2024-02-15T00:46:34.632Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort', () =>",
  "timestamp": "2024-02-15T00:46:34.632Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () =>",
  "unprocessed_completion": "abortSignal.addEventListener('abort', () =>",
  "timestamp": "2024-02-15T00:46:34.632Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {",
  "completion_len": 55,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:34.648Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {",
  "raw_completion_len": 55,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.648Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortSignal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:34.649Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort', () => {",
  "timestamp": "2024-02-15T00:46:34.649Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort', () => {",
  "timestamp": "2024-02-15T00:46:34.649Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {",
  "unprocessed_completion": "abortSignal.addEventListener('abort', () => {",
  "timestamp": "2024-02-15T00:46:34.649Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n",
  "completion_len": 56,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:34.708Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n",
  "raw_completion_len": 56,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.708Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortSignal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:34.708Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 67,
    "character": 47
  },
  "completion": "abortSignal.addEventListener('abort', () => {",
  "timestamp": "2024-02-15T00:46:34.709Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 67,
    "character": 47
  },
  "timestamp": "2024-02-15T00:46:34.709Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:34.714Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortSignal.addEventListener('abort', () => {",
  "fixed_string": "\t\tabortSignal.addEventListener('abort', () => {})",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.715Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 67,
    "character": 49
  },
  "completion": "abortSignal.addEventListener('abort', () => {})",
  "timestamp": "2024-02-15T00:46:34.715Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 67,
    "character": 49
  },
  "timestamp": "2024-02-15T00:46:34.715Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 0,
  "completion": "abortSignal.addEventListener('abort', () => {})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:34.719Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortSignal.addEventListener('abort', () => {",
  "final_completion": "abortSignal.addEventListener('abort', () => {",
  "timestamp": "2024-02-15T00:46:34.720Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-25",
  "insert_text": "abortSignal.addEventListener('abort', () => {",
  "completion": "abortSignal.addEventListener('abort', () => {\n",
  "timestamp": "2024-02-15T00:46:34.720Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort', () => {\n",
  "timestamp": "2024-02-15T00:46:34.720Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort', () => {\n",
  "timestamp": "2024-02-15T00:46:34.720Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n",
  "unprocessed_completion": "abortSignal.addEventListener('abort', () => {\n",
  "timestamp": "2024-02-15T00:46:34.720Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t",
  "completion_len": 58,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:34.720Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t",
  "raw_completion_len": 58,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.720Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortSignal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:34.721Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 67,
    "character": 47
  },
  "completion": "abortSignal.addEventListener('abort', () => {",
  "timestamp": "2024-02-15T00:46:34.721Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 67,
    "character": 47
  },
  "timestamp": "2024-02-15T00:46:34.721Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:34.726Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortSignal.addEventListener('abort', () => {",
  "fixed_string": "\t\tabortSignal.addEventListener('abort', () => {})",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.726Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 67,
    "character": 49
  },
  "completion": "abortSignal.addEventListener('abort', () => {})",
  "timestamp": "2024-02-15T00:46:34.726Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 67,
    "character": 49
  },
  "timestamp": "2024-02-15T00:46:34.726Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 0,
  "completion": "abortSignal.addEventListener('abort', () => {})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:34.730Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortSignal.addEventListener('abort', () => {",
  "final_completion": "abortSignal.addEventListener('abort', () => {",
  "timestamp": "2024-02-15T00:46:34.731Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-25",
  "insert_text": "abortSignal.addEventListener('abort', () => {",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t",
  "timestamp": "2024-02-15T00:46:34.731Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort', () => {\n\t\t",
  "timestamp": "2024-02-15T00:46:34.731Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort', () => {\n\t\t",
  "timestamp": "2024-02-15T00:46:34.731Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t",
  "unprocessed_completion": "abortSignal.addEventListener('abort', () => {\n\t\t",
  "timestamp": "2024-02-15T00:46:34.731Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis",
  "completion_len": 63,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:34.733Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis",
  "raw_completion_len": 63,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.733Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortSignal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:34.733Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 9
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis",
  "timestamp": "2024-02-15T00:46:34.733Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 68,
    "character": 9
  },
  "timestamp": "2024-02-15T00:46:34.733Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:34.738Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis",
  "fixed_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis})",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.738Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 11
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis})",
  "timestamp": "2024-02-15T00:46:34.738Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 68,
    "character": 11
  },
  "timestamp": "2024-02-15T00:46:34.738Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 0,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:34.743Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis",
  "final_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis",
  "timestamp": "2024-02-15T00:46:34.743Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-25",
  "insert_text": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis",
  "timestamp": "2024-02-15T00:46:34.743Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis",
  "timestamp": "2024-02-15T00:46:34.743Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis",
  "timestamp": "2024-02-15T00:46:34.743Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis",
  "unprocessed_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis",
  "timestamp": "2024-02-15T00:46:34.743Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._",
  "completion_len": 65,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:34.765Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._",
  "raw_completion_len": 65,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.765Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortSignal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:34.765Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 11
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._",
  "timestamp": "2024-02-15T00:46:34.765Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 68,
    "character": 11
  },
  "timestamp": "2024-02-15T00:46:34.765Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:34.770Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._",
  "fixed_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._})",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.771Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 13
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._})",
  "timestamp": "2024-02-15T00:46:34.771Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 68,
    "character": 13
  },
  "timestamp": "2024-02-15T00:46:34.771Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 0,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:34.775Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._",
  "final_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._",
  "timestamp": "2024-02-15T00:46:34.775Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-25",
  "insert_text": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._",
  "timestamp": "2024-02-15T00:46:34.775Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._",
  "timestamp": "2024-02-15T00:46:34.775Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._",
  "timestamp": "2024-02-15T00:46:34.775Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._",
  "unprocessed_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._",
  "timestamp": "2024-02-15T00:46:34.775Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger",
  "completion_len": 71,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:34.788Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger",
  "raw_completion_len": 71,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.788Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortSignal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:34.788Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 17
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger",
  "timestamp": "2024-02-15T00:46:34.789Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 68,
    "character": 17
  },
  "timestamp": "2024-02-15T00:46:34.789Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:34.793Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger",
  "fixed_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger})",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.793Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 19
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger})",
  "timestamp": "2024-02-15T00:46:34.794Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 68,
    "character": 19
  },
  "timestamp": "2024-02-15T00:46:34.794Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 0,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:34.798Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger",
  "final_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger",
  "timestamp": "2024-02-15T00:46:34.799Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-25",
  "insert_text": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger",
  "timestamp": "2024-02-15T00:46:34.799Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger",
  "timestamp": "2024-02-15T00:46:34.799Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger",
  "timestamp": "2024-02-15T00:46:34.799Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger",
  "unprocessed_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger",
  "timestamp": "2024-02-15T00:46:34.799Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.",
  "completion_len": 72,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:34.817Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.",
  "raw_completion_len": 72,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.817Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortSignal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:34.817Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 18
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.",
  "timestamp": "2024-02-15T00:46:34.817Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 68,
    "character": 18
  },
  "timestamp": "2024-02-15T00:46:34.817Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-15T00:46:34.822Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.",
  "fixed_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.})",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.823Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 20
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.})",
  "timestamp": "2024-02-15T00:46:34.823Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 68,
    "character": 20
  },
  "timestamp": "2024-02-15T00:46:34.823Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:34.827Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.",
  "final_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.",
  "timestamp": "2024-02-15T00:46:34.827Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-25",
  "insert_text": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.",
  "timestamp": "2024-02-15T00:46:34.827Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.",
  "timestamp": "2024-02-15T00:46:34.827Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.",
  "timestamp": "2024-02-15T00:46:34.827Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.",
  "unprocessed_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.",
  "timestamp": "2024-02-15T00:46:34.827Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.log",
  "completion_len": 75,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:34.846Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.log",
  "raw_completion_len": 75,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.846Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortSignal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:34.846Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 21
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.log",
  "timestamp": "2024-02-15T00:46:34.846Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.log",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.log\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 68,
    "character": 21
  },
  "timestamp": "2024-02-15T00:46:34.846Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.log",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:34.851Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.log",
  "fixed_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.log})",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.852Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 23
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.log})",
  "timestamp": "2024-02-15T00:46:34.852Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.log})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.log})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 68,
    "character": 23
  },
  "timestamp": "2024-02-15T00:46:34.852Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 0,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.log})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:34.856Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.log",
  "final_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.log",
  "timestamp": "2024-02-15T00:46:34.856Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-25",
  "insert_text": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.log",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.log",
  "timestamp": "2024-02-15T00:46:34.856Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.log",
  "timestamp": "2024-02-15T00:46:34.856Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.log",
  "timestamp": "2024-02-15T00:46:34.856Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.log",
  "unprocessed_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.log",
  "timestamp": "2024-02-15T00:46:34.857Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo",
  "completion_len": 79,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:34.875Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo",
  "raw_completion_len": 79,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.875Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortSignal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:34.875Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 25
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo",
  "timestamp": "2024-02-15T00:46:34.875Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 68,
    "character": 25
  },
  "timestamp": "2024-02-15T00:46:34.875Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:34.880Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo",
  "fixed_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo})",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.880Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 27
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo})",
  "timestamp": "2024-02-15T00:46:34.880Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 68,
    "character": 27
  },
  "timestamp": "2024-02-15T00:46:34.881Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 0,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:34.885Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo",
  "final_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo",
  "timestamp": "2024-02-15T00:46:34.885Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-25",
  "insert_text": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo",
  "timestamp": "2024-02-15T00:46:34.885Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo",
  "timestamp": "2024-02-15T00:46:34.885Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo",
  "timestamp": "2024-02-15T00:46:34.885Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo",
  "unprocessed_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo",
  "timestamp": "2024-02-15T00:46:34.885Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "completion_len": 80,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:34.898Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "raw_completion_len": 80,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.898Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortSignal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:34.898Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 26
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "timestamp": "2024-02-15T00:46:34.899Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 68,
    "character": 26
  },
  "timestamp": "2024-02-15T00:46:34.899Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-15T00:46:34.905Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "fixed_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo()})",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.905Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 29
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo()})",
  "timestamp": "2024-02-15T00:46:34.905Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo()})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo()})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 68,
    "character": 29
  },
  "timestamp": "2024-02-15T00:46:34.905Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 0,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo()})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:34.910Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "final_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "timestamp": "2024-02-15T00:46:34.910Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-25",
  "insert_text": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "timestamp": "2024-02-15T00:46:34.910Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "timestamp": "2024-02-15T00:46:34.910Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "timestamp": "2024-02-15T00:46:34.910Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "unprocessed_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "timestamp": "2024-02-15T00:46:34.910Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n",
  "completion_len": 81,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:34.963Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n",
  "raw_completion_len": 81,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.963Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortSignal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:34.963Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 26
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "timestamp": "2024-02-15T00:46:34.963Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 68,
    "character": 26
  },
  "timestamp": "2024-02-15T00:46:34.963Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-15T00:46:34.969Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "fixed_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo()})",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.969Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 29
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo()})",
  "timestamp": "2024-02-15T00:46:34.970Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo()})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo()})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 68,
    "character": 29
  },
  "timestamp": "2024-02-15T00:46:34.970Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 0,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo()})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:34.974Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "final_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "timestamp": "2024-02-15T00:46:34.975Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-25",
  "insert_text": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n",
  "timestamp": "2024-02-15T00:46:34.975Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n",
  "timestamp": "2024-02-15T00:46:34.975Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n",
  "timestamp": "2024-02-15T00:46:34.975Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n",
  "unprocessed_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n",
  "timestamp": "2024-02-15T00:46:34.975Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t",
  "completion_len": 84,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:34.975Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t",
  "raw_completion_len": 84,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.975Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortSignal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:34.975Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 26
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "timestamp": "2024-02-15T00:46:34.976Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 68,
    "character": 26
  },
  "timestamp": "2024-02-15T00:46:34.976Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-15T00:46:34.981Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "fixed_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo()})",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.981Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 29
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo()})",
  "timestamp": "2024-02-15T00:46:34.981Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo()})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo()})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 68,
    "character": 29
  },
  "timestamp": "2024-02-15T00:46:34.981Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 0,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo()})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:34.986Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "final_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "timestamp": "2024-02-15T00:46:34.986Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-25",
  "insert_text": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t",
  "timestamp": "2024-02-15T00:46:34.986Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t",
  "timestamp": "2024-02-15T00:46:34.986Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t",
  "timestamp": "2024-02-15T00:46:34.986Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t",
  "unprocessed_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t",
  "timestamp": "2024-02-15T00:46:34.986Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'",
  "completion_len": 86,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:34.987Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'",
  "raw_completion_len": 86,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.987Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortSignal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:34.987Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 7
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'",
  "timestamp": "2024-02-15T00:46:34.987Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 69,
    "character": 7
  },
  "timestamp": "2024-02-15T00:46:34.987Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:34.992Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'",
  "fixed_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t')})",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:34.992Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 10
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t')})",
  "timestamp": "2024-02-15T00:46:34.992Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t')})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t')})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 69,
    "character": 10
  },
  "timestamp": "2024-02-15T00:46:34.992Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t')})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:34.996Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'",
  "final_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'",
  "timestamp": "2024-02-15T00:46:34.996Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-25",
  "insert_text": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'",
  "timestamp": "2024-02-15T00:46:34.996Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'",
  "timestamp": "2024-02-15T00:46:34.996Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'",
  "timestamp": "2024-02-15T00:46:34.996Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'",
  "unprocessed_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'",
  "timestamp": "2024-02-15T00:46:34.996Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side",
  "completion_len": 90,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:35.016Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side",
  "raw_completion_len": 90,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.016Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortSignal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:35.016Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 11
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side",
  "timestamp": "2024-02-15T00:46:35.016Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 69,
    "character": 11
  },
  "timestamp": "2024-02-15T00:46:35.016Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:35.021Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side",
  "fixed_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side)})",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.022Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 14
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side)})",
  "timestamp": "2024-02-15T00:46:35.022Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side)})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side)})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 69,
    "character": 14
  },
  "timestamp": "2024-02-15T00:46:35.022Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side)})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:35.027Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side",
  "final_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side",
  "timestamp": "2024-02-15T00:46:35.027Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-25",
  "insert_text": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side",
  "timestamp": "2024-02-15T00:46:35.027Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side",
  "timestamp": "2024-02-15T00:46:35.027Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side",
  "timestamp": "2024-02-15T00:46:35.027Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side",
  "unprocessed_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side",
  "timestamp": "2024-02-15T00:46:35.027Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar",
  "completion_len": 93,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:35.041Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar",
  "raw_completion_len": 93,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.041Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortSignal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:35.041Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 14
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar",
  "timestamp": "2024-02-15T00:46:35.041Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 69,
    "character": 14
  },
  "timestamp": "2024-02-15T00:46:35.041Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:35.046Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar",
  "fixed_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar)})",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.046Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 17
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar)})",
  "timestamp": "2024-02-15T00:46:35.046Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar)})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar)})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 69,
    "character": 17
  },
  "timestamp": "2024-02-15T00:46:35.046Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar)})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:35.051Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar",
  "final_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar",
  "timestamp": "2024-02-15T00:46:35.051Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-25",
  "insert_text": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar",
  "timestamp": "2024-02-15T00:46:35.051Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar",
  "timestamp": "2024-02-15T00:46:35.051Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar",
  "timestamp": "2024-02-15T00:46:35.051Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar",
  "unprocessed_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar",
  "timestamp": "2024-02-15T00:46:35.051Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.",
  "completion_len": 94,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:35.074Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.",
  "raw_completion_len": 94,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.074Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortSignal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:35.075Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 15
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.",
  "timestamp": "2024-02-15T00:46:35.075Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 69,
    "character": 15
  },
  "timestamp": "2024-02-15T00:46:35.075Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:35.080Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.",
  "fixed_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.)})",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.080Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 18
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.)})",
  "timestamp": "2024-02-15T00:46:35.081Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.)})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.)})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 69,
    "character": 18
  },
  "timestamp": "2024-02-15T00:46:35.081Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.)})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:35.086Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.",
  "final_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.",
  "timestamp": "2024-02-15T00:46:35.086Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-25",
  "insert_text": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.",
  "timestamp": "2024-02-15T00:46:35.086Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.",
  "timestamp": "2024-02-15T00:46:35.086Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.",
  "timestamp": "2024-02-15T00:46:35.086Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.",
  "unprocessed_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.",
  "timestamp": "2024-02-15T00:46:35.086Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "completion_len": 100,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:35.094Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "raw_completion_len": 100,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.094Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortSignal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:35.094Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 21
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "timestamp": "2024-02-15T00:46:35.094Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 69,
    "character": 21
  },
  "timestamp": "2024-02-15T00:46:35.094Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:35.099Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "fixed_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline)})",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.099Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 24
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline)})",
  "timestamp": "2024-02-15T00:46:35.099Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline)})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline)})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 69,
    "character": 24
  },
  "timestamp": "2024-02-15T00:46:35.099Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline)})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:35.104Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "final_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "timestamp": "2024-02-15T00:46:35.104Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-25",
  "insert_text": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "timestamp": "2024-02-15T00:46:35.104Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "timestamp": "2024-02-15T00:46:35.104Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "timestamp": "2024-02-15T00:46:35.104Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "unprocessed_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "timestamp": "2024-02-15T00:46:35.104Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "completion_len": 108,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:35.121Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "raw_completion_len": 108,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.121Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortSignal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:35.121Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 29
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "timestamp": "2024-02-15T00:46:35.122Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 69,
    "character": 29
  },
  "timestamp": "2024-02-15T00:46:35.122Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:35.126Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "fixed_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider)})",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.127Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 32
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider)})",
  "timestamp": "2024-02-15T00:46:35.127Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider)})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider)})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 69,
    "character": 32
  },
  "timestamp": "2024-02-15T00:46:35.127Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider)})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:35.131Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "final_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "timestamp": "2024-02-15T00:46:35.131Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-25",
  "insert_text": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "timestamp": "2024-02-15T00:46:35.131Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "timestamp": "2024-02-15T00:46:35.131Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "timestamp": "2024-02-15T00:46:35.131Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "unprocessed_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "timestamp": "2024-02-15T00:46:35.131Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "completion_len": 109,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:35.157Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "raw_completion_len": 109,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.157Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortSignal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:35.158Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 30
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "timestamp": "2024-02-15T00:46:35.158Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 69,
    "character": 30
  },
  "timestamp": "2024-02-15T00:46:35.158Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:35.162Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "fixed_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.)})",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.163Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 33
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.)})",
  "timestamp": "2024-02-15T00:46:35.163Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.)})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.)})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 69,
    "character": 33
  },
  "timestamp": "2024-02-15T00:46:35.163Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.)})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:35.167Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "final_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "timestamp": "2024-02-15T00:46:35.167Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-25",
  "insert_text": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "timestamp": "2024-02-15T00:46:35.167Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "timestamp": "2024-02-15T00:46:35.167Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "timestamp": "2024-02-15T00:46:35.167Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "unprocessed_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "timestamp": "2024-02-15T00:46:35.167Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "completion_len": 111,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:35.188Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "raw_completion_len": 111,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.188Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortSignal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:35.188Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 32
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "timestamp": "2024-02-15T00:46:35.189Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 69,
    "character": 32
  },
  "timestamp": "2024-02-15T00:46:35.189Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:35.193Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "fixed_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab)})",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.193Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 35
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab)})",
  "timestamp": "2024-02-15T00:46:35.194Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab)})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab)})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 69,
    "character": 35
  },
  "timestamp": "2024-02-15T00:46:35.194Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab)})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:35.198Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "final_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "timestamp": "2024-02-15T00:46:35.198Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-25",
  "insert_text": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "timestamp": "2024-02-15T00:46:35.198Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "timestamp": "2024-02-15T00:46:35.198Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "timestamp": "2024-02-15T00:46:35.198Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "unprocessed_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "timestamp": "2024-02-15T00:46:35.198Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "completion_len": 114,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:35.207Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "raw_completion_len": 114,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.207Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortSignal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:35.207Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 35
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "timestamp": "2024-02-15T00:46:35.207Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 69,
    "character": 35
  },
  "timestamp": "2024-02-15T00:46:35.207Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:35.212Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "fixed_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort)})",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.212Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 38
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort)})",
  "timestamp": "2024-02-15T00:46:35.212Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort)})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort)})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 69,
    "character": 38
  },
  "timestamp": "2024-02-15T00:46:35.212Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort)})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:35.217Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "final_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "timestamp": "2024-02-15T00:46:35.217Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-25",
  "insert_text": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "timestamp": "2024-02-15T00:46:35.217Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "timestamp": "2024-02-15T00:46:35.217Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "timestamp": "2024-02-15T00:46:35.217Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "unprocessed_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "timestamp": "2024-02-15T00:46:35.217Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "completion_len": 116,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:35.236Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "raw_completion_len": 116,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.236Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortSignal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:35.236Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 37
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "timestamp": "2024-02-15T00:46:35.237Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 69,
    "character": 37
  },
  "timestamp": "2024-02-15T00:46:35.237Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-15T00:46:35.242Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "fixed_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',)})",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.242Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 40
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',)})",
  "timestamp": "2024-02-15T00:46:35.242Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',)})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',)})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 69,
    "character": 40
  },
  "timestamp": "2024-02-15T00:46:35.243Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 0,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',)})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:35.247Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "final_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "timestamp": "2024-02-15T00:46:35.247Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-25",
  "insert_text": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "timestamp": "2024-02-15T00:46:35.247Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "timestamp": "2024-02-15T00:46:35.247Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "timestamp": "2024-02-15T00:46:35.247Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "unprocessed_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "timestamp": "2024-02-15T00:46:35.247Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n",
  "completion_len": 117,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:35.293Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n",
  "raw_completion_len": 117,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.293Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortSignal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:35.294Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 37
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "timestamp": "2024-02-15T00:46:35.294Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 69,
    "character": 37
  },
  "timestamp": "2024-02-15T00:46:35.294Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-15T00:46:35.299Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "fixed_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',)})",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.299Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 40
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',)})",
  "timestamp": "2024-02-15T00:46:35.299Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',)})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',)})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 69,
    "character": 40
  },
  "timestamp": "2024-02-15T00:46:35.299Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 0,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',)})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:35.304Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "final_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "timestamp": "2024-02-15T00:46:35.304Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-25",
  "insert_text": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n",
  "timestamp": "2024-02-15T00:46:35.304Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n",
  "timestamp": "2024-02-15T00:46:35.304Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n",
  "timestamp": "2024-02-15T00:46:35.304Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n",
  "unprocessed_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n",
  "timestamp": "2024-02-15T00:46:35.304Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t",
  "completion_len": 120,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:35.305Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t",
  "raw_completion_len": 120,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.305Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortSignal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:35.305Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 37
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "timestamp": "2024-02-15T00:46:35.305Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 69,
    "character": 37
  },
  "timestamp": "2024-02-15T00:46:35.305Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-15T00:46:35.310Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "fixed_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',)})",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.310Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 40
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',)})",
  "timestamp": "2024-02-15T00:46:35.310Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',)})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',)})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 69,
    "character": 40
  },
  "timestamp": "2024-02-15T00:46:35.310Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 0,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',)})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:35.315Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "final_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "timestamp": "2024-02-15T00:46:35.315Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-25",
  "insert_text": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t",
  "timestamp": "2024-02-15T00:46:35.315Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t",
  "timestamp": "2024-02-15T00:46:35.315Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t",
  "timestamp": "2024-02-15T00:46:35.315Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t",
  "unprocessed_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t",
  "timestamp": "2024-02-15T00:46:35.315Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "completion_len": 122,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:35.316Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "raw_completion_len": 122,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.316Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortSignal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:35.316Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 70,
    "character": 7
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "timestamp": "2024-02-15T00:46:35.317Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 70,
    "character": 7
  },
  "timestamp": "2024-02-15T00:46:35.317Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 2,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "parse_error_count_complete": 5,
  "timestamp": "2024-02-15T00:46:35.322Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "fixed_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{})})",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.323Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 70,
    "character": 11
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{})})",
  "timestamp": "2024-02-15T00:46:35.323Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 70,
    "character": 11
  },
  "timestamp": "2024-02-15T00:46:35.323Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 0,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{})})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:35.328Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "final_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "timestamp": "2024-02-15T00:46:35.328Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-25",
  "insert_text": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "timestamp": "2024-02-15T00:46:35.328Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "timestamp": "2024-02-15T00:46:35.328Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "timestamp": "2024-02-15T00:46:35.328Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "unprocessed_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "timestamp": "2024-02-15T00:46:35.328Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n",
  "completion_len": 123,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:35.380Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n",
  "raw_completion_len": 123,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.380Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortSignal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:35.380Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 70,
    "character": 7
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "timestamp": "2024-02-15T00:46:35.380Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{aborted\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 70,
    "character": 7
  },
  "timestamp": "2024-02-15T00:46:35.380Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 2,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "parse_error_count_complete": 5,
  "timestamp": "2024-02-15T00:46:35.385Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "fixed_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{})})",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.386Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 70,
    "character": 11
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{})})",
  "timestamp": "2024-02-15T00:46:35.386Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{})})aborted\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 70,
    "character": 11
  },
  "timestamp": "2024-02-15T00:46:35.386Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 0,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{})})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:35.390Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "final_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "timestamp": "2024-02-15T00:46:35.390Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-25",
  "insert_text": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n",
  "timestamp": "2024-02-15T00:46:35.391Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n",
  "timestamp": "2024-02-15T00:46:35.391Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n",
  "timestamp": "2024-02-15T00:46:35.391Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n",
  "unprocessed_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n",
  "timestamp": "2024-02-15T00:46:35.391Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t",
  "completion_len": 127,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:35.391Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t",
  "raw_completion_len": 127,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.391Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortSignal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:35.391Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 70,
    "character": 7
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "timestamp": "2024-02-15T00:46:35.391Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{aborted\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 70,
    "character": 7
  },
  "timestamp": "2024-02-15T00:46:35.392Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 2,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "parse_error_count_complete": 5,
  "timestamp": "2024-02-15T00:46:35.397Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "fixed_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{})})",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.397Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 70,
    "character": 11
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{})})",
  "timestamp": "2024-02-15T00:46:35.397Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{})})aborted\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 70,
    "character": 11
  },
  "timestamp": "2024-02-15T00:46:35.397Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 0,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{})})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:35.402Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "final_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "timestamp": "2024-02-15T00:46:35.403Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-25",
  "insert_text": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t",
  "timestamp": "2024-02-15T00:46:35.403Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t",
  "timestamp": "2024-02-15T00:46:35.403Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t",
  "timestamp": "2024-02-15T00:46:35.403Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t",
  "unprocessed_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t",
  "timestamp": "2024-02-15T00:46:35.403Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'",
  "completion_len": 129,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:35.405Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'",
  "raw_completion_len": 129,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.405Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortSignal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:35.405Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 8
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'",
  "timestamp": "2024-02-15T00:46:35.405Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'aborted\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 71,
    "character": 8
  },
  "timestamp": "2024-02-15T00:46:35.405Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:35.410Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'",
  "fixed_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'})})",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.410Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 12
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'})})",
  "timestamp": "2024-02-15T00:46:35.410Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'})})aborted\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 71,
    "character": 12
  },
  "timestamp": "2024-02-15T00:46:35.410Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'})})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:35.414Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'",
  "final_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'",
  "timestamp": "2024-02-15T00:46:35.414Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-25",
  "insert_text": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'",
  "timestamp": "2024-02-15T00:46:35.414Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'",
  "timestamp": "2024-02-15T00:46:35.414Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'",
  "timestamp": "2024-02-15T00:46:35.414Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'",
  "unprocessed_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'",
  "timestamp": "2024-02-15T00:46:35.414Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "completion_len": 134,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:35.431Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "raw_completion_len": 134,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.431Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortSignal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:35.431Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 13
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "timestamp": "2024-02-15T00:46:35.432Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'eventaborted\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 71,
    "character": 13
  },
  "timestamp": "2024-02-15T00:46:35.432Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:35.439Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "fixed_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event})})",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.439Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 17
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event})})",
  "timestamp": "2024-02-15T00:46:35.439Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event})})aborted\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 71,
    "character": 17
  },
  "timestamp": "2024-02-15T00:46:35.439Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event})})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:35.444Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "final_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "timestamp": "2024-02-15T00:46:35.444Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-25",
  "insert_text": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "timestamp": "2024-02-15T00:46:35.444Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "timestamp": "2024-02-15T00:46:35.444Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "timestamp": "2024-02-15T00:46:35.444Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "unprocessed_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "timestamp": "2024-02-15T00:46:35.444Z"
}
{
  "message": "sidecar.providerInlineCompletionItems",
  "event_name": "start",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:35.445Z"
}
{
  "message": "sidecar.initialRequest.docContext",
  "event_name": "sidecar.initialRequest.docContext",
  "id": "completions-27",
  "multiline_trigger": "no_multiline_trigger",
  "timestamp": "2024-02-15T00:46:35.445Z"
}
{
  "message": "sidecar.get_inline_completions.request",
  "event_name": "sidecar.get_inline_completions.request",
  "id": "completions-27",
  "doc_context_multiline": "not_present",
  "prefix": "\t\t// log when the controller is aborted",
  "suffix": "",
  "prev_non_empty_line": "\t\tconst abortController = forkSignal(abortSignal);",
  "next_non_empty_line": "\t\tconst stream = fetchAndProcessCompletionsImpl({",
  "timestamp": "2024-02-15T00:46:35.445Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "completion_len": 135,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:35.467Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "raw_completion_len": 135,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.467Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortSignal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:35.467Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 14
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "timestamp": "2024-02-15T00:46:35.468Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_aborted\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 71,
    "character": 14
  },
  "timestamp": "2024-02-15T00:46:35.468Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:35.472Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "fixed_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_})})",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.473Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 18
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_})})",
  "timestamp": "2024-02-15T00:46:35.473Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_})})aborted\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 71,
    "character": 18
  },
  "timestamp": "2024-02-15T00:46:35.473Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_})})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:35.480Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "final_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "timestamp": "2024-02-15T00:46:35.480Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-25",
  "insert_text": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "timestamp": "2024-02-15T00:46:35.480Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "timestamp": "2024-02-15T00:46:35.480Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "timestamp": "2024-02-15T00:46:35.480Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "unprocessed_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "timestamp": "2024-02-15T00:46:35.480Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "completion_len": 139,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:35.483Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "raw_completion_len": 139,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.483Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortSignal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:35.483Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 18
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "timestamp": "2024-02-15T00:46:35.483Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_nameaborted\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 71,
    "character": 18
  },
  "timestamp": "2024-02-15T00:46:35.483Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:35.488Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "fixed_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name})})",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.488Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 22
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name})})",
  "timestamp": "2024-02-15T00:46:35.488Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name})})aborted\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 71,
    "character": 22
  },
  "timestamp": "2024-02-15T00:46:35.488Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name})})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:35.500Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "final_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "timestamp": "2024-02-15T00:46:35.500Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-25",
  "insert_text": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "timestamp": "2024-02-15T00:46:35.500Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "timestamp": "2024-02-15T00:46:35.500Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "timestamp": "2024-02-15T00:46:35.500Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "unprocessed_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "timestamp": "2024-02-15T00:46:35.500Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "completion_len": 141,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:35.510Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "raw_completion_len": 141,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.510Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortSignal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:35.510Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 20
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "timestamp": "2024-02-15T00:46:35.510Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':aborted\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 71,
    "character": 20
  },
  "timestamp": "2024-02-15T00:46:35.510Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 2,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "parse_error_count_complete": 5,
  "timestamp": "2024-02-15T00:46:35.516Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "fixed_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':})})",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.516Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 24
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':})})",
  "timestamp": "2024-02-15T00:46:35.516Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':})})aborted\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 71,
    "character": 24
  },
  "timestamp": "2024-02-15T00:46:35.516Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 0,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':})})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:35.521Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "final_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "timestamp": "2024-02-15T00:46:35.522Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-25",
  "insert_text": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "timestamp": "2024-02-15T00:46:35.522Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "timestamp": "2024-02-15T00:46:35.522Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "timestamp": "2024-02-15T00:46:35.522Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "unprocessed_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "timestamp": "2024-02-15T00:46:35.522Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "completion_len": 143,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:35.540Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "raw_completion_len": 143,
  "is_request_ended": false,
  "updated_document_context": "aborted\n\t\t",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.540Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortSignal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:35.540Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 22
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "timestamp": "2024-02-15T00:46:35.540Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'aborted\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 71,
    "character": 22
  },
  "timestamp": "2024-02-15T00:46:35.540Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:35.544Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "fixed_string": "\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '})})",
  "id": "completions-25",
  "timestamp": "2024-02-15T00:46:35.545Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 26
  },
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '})})",
  "timestamp": "2024-02-15T00:46:35.545Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-25",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '})})aborted\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 32
  },
  "end_position": {
    "line": 71,
    "character": 26
  },
  "timestamp": "2024-02-15T00:46:35.545Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-25",
  "parse_error_count": 1,
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '})})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:35.549Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "final_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "timestamp": "2024-02-15T00:46:35.549Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-25",
  "insert_text": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "timestamp": "2024-02-15T00:46:35.549Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-25",
  "partial_response": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "timestamp": "2024-02-15T00:46:35.549Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-25",
  "is_request_ended": false,
  "unprocessedCompletion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "timestamp": "2024-02-15T00:46:35.549Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-25",
  "raw_completion": "aborted\n\t\tabortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "unprocessed_completion": "abortSignal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "timestamp": "2024-02-15T00:46:35.549Z"
}
{
  "message": "sidecar.cancelIrrelevantRequests",
  "event_name": "cancel_irrelevant_requests",
  "request_id_reason": "completions-27",
  "request_id_broken_do_not_trust": "completions-27",
  "timestamp": "2024-02-15T00:46:35.575Z"
}
{
  "message": "sidecar.inlineProvider",
  "event_name": "generate_completions",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:35.575Z"
}
{
  "message": "sidecar.inlineProvider.send_completion_request",
  "event_name": "send_completion_request",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:35.575Z"
}
{
  "message": "sidecar.inlineProvider.responseStream",
  "event_name": "response_stream",
  "id": "completions-27",
  "time_taken": 0.023749999701976776,
  "timestamp": "2024-02-15T00:46:35.575Z"
}
{
  "message": "sidecar.completion_request.generator",
  "event_name": "sidecar.completion_request.generator",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:35.575Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "\n",
  "completion_len": 1,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-15T00:46:36.438Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "\n\t",
  "completion_len": 2,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-15T00:46:36.439Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "\n\t\t",
  "completion_len": 3,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-15T00:46:36.466Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "\n\t\tab",
  "completion_len": 5,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-15T00:46:36.494Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "\n\t\tabort",
  "completion_len": 8,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-15T00:46:36.523Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "\n\t\tabortController",
  "completion_len": 18,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-15T00:46:36.552Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "\n\t\tabortController.",
  "completion_len": 19,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-15T00:46:36.582Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "\n\t\tabortController.signal",
  "completion_len": 25,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-15T00:46:36.610Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.",
  "completion_len": 26,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-15T00:46:36.635Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener",
  "completion_len": 42,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-15T00:46:36.665Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('",
  "completion_len": 44,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-15T00:46:36.693Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('ab",
  "completion_len": 46,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-15T00:46:36.720Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": false,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort",
  "completion_len": 49,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-15T00:46:36.749Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort',",
  "completion_len": 51,
  "hotStreakExtractor": "not_present",
  "timestamp": "2024-02-15T00:46:36.788Z"
}
{
  "message": "sidecar.DO_NOT_LOG",
  "event_name": "DO_NOT_LOG_EVER",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:36.788Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 66,
    "character": 39
  },
  "completion_end_position": {
    "line": 67,
    "character": 89
  },
  "completion": "\n\t\tabortController.signal.addEventListener('abort',",
  "timestamp": "2024-02-15T00:46:36.788Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "\n\t\tabortController.signal.addEventListener('abort',",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort',\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 67,
    "character": 89
  },
  "timestamp": "2024-02-15T00:46:36.788Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "\n\t\tabortController.signal.addEventListener('abort',",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:36.794Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "\n\t\tabortController.signal.addEventListener('abort',",
  "completion": "\n\t\tabortController.signal.addEventListener('abort',",
  "timestamp": "2024-02-15T00:46:36.794Z"
}
{
  "message": "sidecar.stop_streaming_and_use_partial_response",
  "event_name": "sidecar.stop_streaming_and_use_partial_response_first",
  "completion": "",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:36.794Z"
}
{
  "message": "sidecar.request_manager.current.completions",
  "event_name": "sidecar.request_manager.current.completions",
  "id": "completions-27",
  "completion": 1,
  "timestamp": "2024-02-15T00:46:36.795Z"
}
{
  "message": "sidecar.request_manager.hotstreak.completions",
  "event_name": "sidecar.request_manager.hotstreak.completions",
  "id": "completions-27",
  "completions": 0,
  "timestamp": "2024-02-15T00:46:36.795Z"
}
{
  "message": "sidecar.hotstreak.create",
  "event_name": "hotstreak.create",
  "raw_completion_insert_text": "",
  "raw_completion_parse_error_count": 0,
  "raw_completion_len": 0,
  "timestamp": "2024-02-15T00:46:36.795Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort',",
  "raw_completion_len": 51,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:36.795Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort',",
  "timestamp": "2024-02-15T00:46:36.795Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort',",
  "timestamp": "2024-02-15T00:46:36.795Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort',",
  "unprocessed_completion": "abortController.signal.addEventListener('abort',",
  "timestamp": "2024-02-15T00:46:36.795Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', ()",
  "completion_len": 54,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:36.812Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', ()",
  "raw_completion_len": 54,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:36.812Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', ()",
  "timestamp": "2024-02-15T00:46:36.812Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', ()",
  "timestamp": "2024-02-15T00:46:36.812Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', ()",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', ()",
  "timestamp": "2024-02-15T00:46:36.812Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () =>",
  "completion_len": 57,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:36.841Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () =>",
  "raw_completion_len": 57,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:36.841Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () =>",
  "timestamp": "2024-02-15T00:46:36.841Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () =>",
  "timestamp": "2024-02-15T00:46:36.841Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () =>",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () =>",
  "timestamp": "2024-02-15T00:46:36.841Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {",
  "completion_len": 59,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:36.863Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {",
  "raw_completion_len": 59,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:36.863Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:36.863Z"
}
{
  "message": "sidecar.canUsePartialCompletion",
  "event_name": "sidecar.canUsePartialCompletion.has_complete_first_line",
  "event_value": "false",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {",
  "timestamp": "2024-02-15T00:46:36.863Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {",
  "timestamp": "2024-02-15T00:46:36.863Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {",
  "timestamp": "2024-02-15T00:46:36.863Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n",
  "completion_len": 60,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:36.919Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n",
  "raw_completion_len": 60,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:36.919Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:36.919Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 67,
    "character": 58
  },
  "completion": "abortController.signal.addEventListener('abort', () => {",
  "timestamp": "2024-02-15T00:46:36.919Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 67,
    "character": 58
  },
  "timestamp": "2024-02-15T00:46:36.919Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:36.925Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:36.926Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 67,
    "character": 60
  },
  "completion": "abortController.signal.addEventListener('abort', () => {})",
  "timestamp": "2024-02-15T00:46:36.926Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 67,
    "character": 60
  },
  "timestamp": "2024-02-15T00:46:36.926Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:36.931Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {",
  "final_completion": "abortController.signal.addEventListener('abort', () => {",
  "timestamp": "2024-02-15T00:46:36.931Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {",
  "completion": "abortController.signal.addEventListener('abort', () => {\n",
  "timestamp": "2024-02-15T00:46:36.931Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n",
  "timestamp": "2024-02-15T00:46:36.931Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n",
  "timestamp": "2024-02-15T00:46:36.931Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n",
  "timestamp": "2024-02-15T00:46:36.931Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t",
  "completion_len": 62,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:36.932Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t",
  "raw_completion_len": 62,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:36.932Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:36.932Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 67,
    "character": 58
  },
  "completion": "abortController.signal.addEventListener('abort', () => {",
  "timestamp": "2024-02-15T00:46:36.932Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 67,
    "character": 58
  },
  "timestamp": "2024-02-15T00:46:36.932Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:36.937Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:36.937Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 67,
    "character": 60
  },
  "completion": "abortController.signal.addEventListener('abort', () => {})",
  "timestamp": "2024-02-15T00:46:36.937Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 67,
    "character": 60
  },
  "timestamp": "2024-02-15T00:46:36.937Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:36.942Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {",
  "final_completion": "abortController.signal.addEventListener('abort', () => {",
  "timestamp": "2024-02-15T00:46:36.942Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t",
  "timestamp": "2024-02-15T00:46:36.942Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t",
  "timestamp": "2024-02-15T00:46:36.942Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t",
  "timestamp": "2024-02-15T00:46:36.942Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t",
  "timestamp": "2024-02-15T00:46:36.942Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis",
  "completion_len": 67,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:36.943Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis",
  "raw_completion_len": 67,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:36.943Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:36.943Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 9
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis",
  "timestamp": "2024-02-15T00:46:36.944Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 68,
    "character": 9
  },
  "timestamp": "2024-02-15T00:46:36.944Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:36.948Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:36.948Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 11
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis})",
  "timestamp": "2024-02-15T00:46:36.948Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 68,
    "character": 11
  },
  "timestamp": "2024-02-15T00:46:36.948Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:36.953Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis",
  "timestamp": "2024-02-15T00:46:36.953Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis",
  "timestamp": "2024-02-15T00:46:36.953Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis",
  "timestamp": "2024-02-15T00:46:36.953Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis",
  "timestamp": "2024-02-15T00:46:36.953Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis",
  "timestamp": "2024-02-15T00:46:36.953Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._",
  "completion_len": 69,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:36.971Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._",
  "raw_completion_len": 69,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:36.971Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:36.971Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 11
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._",
  "timestamp": "2024-02-15T00:46:36.972Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 68,
    "character": 11
  },
  "timestamp": "2024-02-15T00:46:36.972Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:36.976Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:36.977Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 13
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._})",
  "timestamp": "2024-02-15T00:46:36.977Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 68,
    "character": 13
  },
  "timestamp": "2024-02-15T00:46:36.977Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:36.981Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._",
  "timestamp": "2024-02-15T00:46:36.981Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._",
  "timestamp": "2024-02-15T00:46:36.981Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._",
  "timestamp": "2024-02-15T00:46:36.981Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._",
  "timestamp": "2024-02-15T00:46:36.981Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._",
  "timestamp": "2024-02-15T00:46:36.981Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger",
  "completion_len": 75,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:36.999Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger",
  "raw_completion_len": 75,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:36.999Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:36.999Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 17
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger",
  "timestamp": "2024-02-15T00:46:36.999Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 68,
    "character": 17
  },
  "timestamp": "2024-02-15T00:46:36.999Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.004Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.004Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 19
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger})",
  "timestamp": "2024-02-15T00:46:37.004Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 68,
    "character": 19
  },
  "timestamp": "2024-02-15T00:46:37.004Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:37.008Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger",
  "timestamp": "2024-02-15T00:46:37.008Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger",
  "timestamp": "2024-02-15T00:46:37.008Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger",
  "timestamp": "2024-02-15T00:46:37.008Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger",
  "timestamp": "2024-02-15T00:46:37.008Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger",
  "timestamp": "2024-02-15T00:46:37.008Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.",
  "completion_len": 76,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:37.030Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.",
  "raw_completion_len": 76,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.030Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:37.030Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 18
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.",
  "timestamp": "2024-02-15T00:46:37.030Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 68,
    "character": 18
  },
  "timestamp": "2024-02-15T00:46:37.030Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-15T00:46:37.035Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.035Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 20
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.})",
  "timestamp": "2024-02-15T00:46:37.036Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 68,
    "character": 20
  },
  "timestamp": "2024-02-15T00:46:37.036Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.040Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.",
  "timestamp": "2024-02-15T00:46:37.040Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.",
  "timestamp": "2024-02-15T00:46:37.040Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.",
  "timestamp": "2024-02-15T00:46:37.040Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.",
  "timestamp": "2024-02-15T00:46:37.040Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.",
  "timestamp": "2024-02-15T00:46:37.040Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.log",
  "completion_len": 79,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:37.065Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.log",
  "raw_completion_len": 79,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.065Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:37.065Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 21
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.log",
  "timestamp": "2024-02-15T00:46:37.065Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.log",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.log\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 68,
    "character": 21
  },
  "timestamp": "2024-02-15T00:46:37.065Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.log",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.071Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.log",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.log})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.071Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 23
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.log})",
  "timestamp": "2024-02-15T00:46:37.071Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.log})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.log})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 68,
    "character": 23
  },
  "timestamp": "2024-02-15T00:46:37.071Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.log})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:37.077Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.log",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.log",
  "timestamp": "2024-02-15T00:46:37.077Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.log",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.log",
  "timestamp": "2024-02-15T00:46:37.077Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.log",
  "timestamp": "2024-02-15T00:46:37.077Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.log",
  "timestamp": "2024-02-15T00:46:37.077Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.log",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.log",
  "timestamp": "2024-02-15T00:46:37.077Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo",
  "completion_len": 83,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:37.087Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo",
  "raw_completion_len": 83,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.087Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:37.087Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 25
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo",
  "timestamp": "2024-02-15T00:46:37.087Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 68,
    "character": 25
  },
  "timestamp": "2024-02-15T00:46:37.087Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.094Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.095Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 27
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo})",
  "timestamp": "2024-02-15T00:46:37.095Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 68,
    "character": 27
  },
  "timestamp": "2024-02-15T00:46:37.095Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:37.100Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo",
  "timestamp": "2024-02-15T00:46:37.100Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo",
  "timestamp": "2024-02-15T00:46:37.100Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo",
  "timestamp": "2024-02-15T00:46:37.100Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo",
  "timestamp": "2024-02-15T00:46:37.100Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo",
  "timestamp": "2024-02-15T00:46:37.100Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "completion_len": 84,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:37.114Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "raw_completion_len": 84,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.114Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:37.114Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 26
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "timestamp": "2024-02-15T00:46:37.114Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 68,
    "character": 26
  },
  "timestamp": "2024-02-15T00:46:37.114Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-15T00:46:37.119Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo()})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.119Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 29
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo()})",
  "timestamp": "2024-02-15T00:46:37.120Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo()})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo()})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 68,
    "character": 29
  },
  "timestamp": "2024-02-15T00:46:37.120Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo()})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:37.124Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "timestamp": "2024-02-15T00:46:37.124Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "timestamp": "2024-02-15T00:46:37.124Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "timestamp": "2024-02-15T00:46:37.124Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "timestamp": "2024-02-15T00:46:37.124Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "timestamp": "2024-02-15T00:46:37.124Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n",
  "completion_len": 85,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:37.170Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n",
  "raw_completion_len": 85,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.171Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:37.171Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 26
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "timestamp": "2024-02-15T00:46:37.171Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 68,
    "character": 26
  },
  "timestamp": "2024-02-15T00:46:37.171Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-15T00:46:37.176Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo()})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.176Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 29
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo()})",
  "timestamp": "2024-02-15T00:46:37.176Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo()})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo()})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 68,
    "character": 29
  },
  "timestamp": "2024-02-15T00:46:37.176Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo()})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:37.181Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "timestamp": "2024-02-15T00:46:37.181Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n",
  "timestamp": "2024-02-15T00:46:37.181Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n",
  "timestamp": "2024-02-15T00:46:37.181Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n",
  "timestamp": "2024-02-15T00:46:37.181Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n",
  "timestamp": "2024-02-15T00:46:37.181Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t",
  "completion_len": 88,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:37.182Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t",
  "raw_completion_len": 88,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.182Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:37.182Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 26
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "timestamp": "2024-02-15T00:46:37.182Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 68,
    "character": 26
  },
  "timestamp": "2024-02-15T00:46:37.182Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-15T00:46:37.187Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo()})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.188Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 68,
    "character": 29
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo()})",
  "timestamp": "2024-02-15T00:46:37.188Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo()})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo()})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 68,
    "character": 29
  },
  "timestamp": "2024-02-15T00:46:37.188Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo()})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:37.192Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "timestamp": "2024-02-15T00:46:37.192Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t",
  "timestamp": "2024-02-15T00:46:37.192Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t",
  "timestamp": "2024-02-15T00:46:37.192Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t",
  "timestamp": "2024-02-15T00:46:37.192Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t",
  "timestamp": "2024-02-15T00:46:37.192Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'",
  "completion_len": 90,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:37.197Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'",
  "raw_completion_len": 90,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.197Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:37.197Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 7
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'",
  "timestamp": "2024-02-15T00:46:37.197Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 69,
    "character": 7
  },
  "timestamp": "2024-02-15T00:46:37.197Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.201Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t')})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.201Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 10
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t')})",
  "timestamp": "2024-02-15T00:46:37.202Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t')})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t')})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 69,
    "character": 10
  },
  "timestamp": "2024-02-15T00:46:37.202Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t')})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.206Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'",
  "timestamp": "2024-02-15T00:46:37.206Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'",
  "timestamp": "2024-02-15T00:46:37.206Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'",
  "timestamp": "2024-02-15T00:46:37.206Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'",
  "timestamp": "2024-02-15T00:46:37.206Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'",
  "timestamp": "2024-02-15T00:46:37.206Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side",
  "completion_len": 94,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:37.233Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side",
  "raw_completion_len": 94,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.233Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:37.234Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 11
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side",
  "timestamp": "2024-02-15T00:46:37.234Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 69,
    "character": 11
  },
  "timestamp": "2024-02-15T00:46:37.234Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.238Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side)})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.239Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 14
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side)})",
  "timestamp": "2024-02-15T00:46:37.239Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side)})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side)})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 69,
    "character": 14
  },
  "timestamp": "2024-02-15T00:46:37.239Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side)})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.243Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side",
  "timestamp": "2024-02-15T00:46:37.243Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side",
  "timestamp": "2024-02-15T00:46:37.243Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side",
  "timestamp": "2024-02-15T00:46:37.243Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side",
  "timestamp": "2024-02-15T00:46:37.243Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'side",
  "timestamp": "2024-02-15T00:46:37.243Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar",
  "completion_len": 97,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:37.252Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar",
  "raw_completion_len": 97,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.252Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:37.252Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 14
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar",
  "timestamp": "2024-02-15T00:46:37.252Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 69,
    "character": 14
  },
  "timestamp": "2024-02-15T00:46:37.252Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.256Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar)})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.256Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 17
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar)})",
  "timestamp": "2024-02-15T00:46:37.257Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar)})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar)})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 69,
    "character": 17
  },
  "timestamp": "2024-02-15T00:46:37.257Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar)})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.261Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar",
  "timestamp": "2024-02-15T00:46:37.261Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar",
  "timestamp": "2024-02-15T00:46:37.261Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar",
  "timestamp": "2024-02-15T00:46:37.261Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar",
  "timestamp": "2024-02-15T00:46:37.261Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar",
  "timestamp": "2024-02-15T00:46:37.261Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.",
  "completion_len": 98,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:37.289Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.",
  "raw_completion_len": 98,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.290Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:37.290Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 15
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.",
  "timestamp": "2024-02-15T00:46:37.290Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 69,
    "character": 15
  },
  "timestamp": "2024-02-15T00:46:37.290Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.295Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.)})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.295Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 18
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.)})",
  "timestamp": "2024-02-15T00:46:37.295Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.)})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.)})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 69,
    "character": 18
  },
  "timestamp": "2024-02-15T00:46:37.295Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.)})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.300Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.",
  "timestamp": "2024-02-15T00:46:37.300Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.",
  "timestamp": "2024-02-15T00:46:37.300Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.",
  "timestamp": "2024-02-15T00:46:37.300Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.",
  "timestamp": "2024-02-15T00:46:37.300Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.",
  "timestamp": "2024-02-15T00:46:37.300Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "completion_len": 104,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:37.307Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "raw_completion_len": 104,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.307Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:37.308Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 21
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "timestamp": "2024-02-15T00:46:37.308Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 69,
    "character": 21
  },
  "timestamp": "2024-02-15T00:46:37.308Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.312Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline)})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.312Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 24
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline)})",
  "timestamp": "2024-02-15T00:46:37.312Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline)})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline)})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 69,
    "character": 24
  },
  "timestamp": "2024-02-15T00:46:37.312Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline)})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.317Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "timestamp": "2024-02-15T00:46:37.317Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "timestamp": "2024-02-15T00:46:37.317Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "timestamp": "2024-02-15T00:46:37.317Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "timestamp": "2024-02-15T00:46:37.317Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inline",
  "timestamp": "2024-02-15T00:46:37.317Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "completion_len": 112,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:37.333Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "raw_completion_len": 112,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.333Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:37.333Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 29
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "timestamp": "2024-02-15T00:46:37.333Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 69,
    "character": 29
  },
  "timestamp": "2024-02-15T00:46:37.333Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.338Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider)})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.339Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 32
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider)})",
  "timestamp": "2024-02-15T00:46:37.339Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider)})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider)})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 69,
    "character": 32
  },
  "timestamp": "2024-02-15T00:46:37.339Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider)})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.344Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "timestamp": "2024-02-15T00:46:37.344Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "timestamp": "2024-02-15T00:46:37.344Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "timestamp": "2024-02-15T00:46:37.344Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "timestamp": "2024-02-15T00:46:37.344Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider",
  "timestamp": "2024-02-15T00:46:37.344Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "completion_len": 113,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:37.369Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "raw_completion_len": 113,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.369Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:37.369Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 30
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "timestamp": "2024-02-15T00:46:37.369Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 69,
    "character": 30
  },
  "timestamp": "2024-02-15T00:46:37.369Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.375Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.)})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.375Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 33
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.)})",
  "timestamp": "2024-02-15T00:46:37.376Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.)})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.)})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 69,
    "character": 33
  },
  "timestamp": "2024-02-15T00:46:37.376Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.)})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.381Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "timestamp": "2024-02-15T00:46:37.381Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "timestamp": "2024-02-15T00:46:37.381Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "timestamp": "2024-02-15T00:46:37.381Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "timestamp": "2024-02-15T00:46:37.381Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.",
  "timestamp": "2024-02-15T00:46:37.381Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "completion_len": 115,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:37.389Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "raw_completion_len": 115,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.389Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:37.389Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 32
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "timestamp": "2024-02-15T00:46:37.390Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 69,
    "character": 32
  },
  "timestamp": "2024-02-15T00:46:37.390Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.394Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab)})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.395Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 35
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab)})",
  "timestamp": "2024-02-15T00:46:37.395Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab)})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab)})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 69,
    "character": 35
  },
  "timestamp": "2024-02-15T00:46:37.395Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab)})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.399Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "timestamp": "2024-02-15T00:46:37.399Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "timestamp": "2024-02-15T00:46:37.399Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "timestamp": "2024-02-15T00:46:37.399Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "timestamp": "2024-02-15T00:46:37.399Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.ab",
  "timestamp": "2024-02-15T00:46:37.399Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "completion_len": 118,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:37.421Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "raw_completion_len": 118,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.421Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:37.421Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 35
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "timestamp": "2024-02-15T00:46:37.421Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 69,
    "character": 35
  },
  "timestamp": "2024-02-15T00:46:37.421Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.426Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort)})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.427Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 38
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort)})",
  "timestamp": "2024-02-15T00:46:37.427Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort)})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort)})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 69,
    "character": 38
  },
  "timestamp": "2024-02-15T00:46:37.427Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort)})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.432Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "timestamp": "2024-02-15T00:46:37.432Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "timestamp": "2024-02-15T00:46:37.432Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "timestamp": "2024-02-15T00:46:37.432Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "timestamp": "2024-02-15T00:46:37.432Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort",
  "timestamp": "2024-02-15T00:46:37.432Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_",
  "completion_len": 119,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:37.447Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_",
  "raw_completion_len": 119,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.447Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:37.447Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 36
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_",
  "timestamp": "2024-02-15T00:46:37.448Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 69,
    "character": 36
  },
  "timestamp": "2024-02-15T00:46:37.448Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.452Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_)})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.453Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 39
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_)})",
  "timestamp": "2024-02-15T00:46:37.453Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_)})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_)})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 69,
    "character": 39
  },
  "timestamp": "2024-02-15T00:46:37.453Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_)})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.457Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_",
  "timestamp": "2024-02-15T00:46:37.458Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_",
  "timestamp": "2024-02-15T00:46:37.458Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_",
  "timestamp": "2024-02-15T00:46:37.458Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_",
  "timestamp": "2024-02-15T00:46:37.458Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_",
  "timestamp": "2024-02-15T00:46:37.458Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller",
  "completion_len": 129,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:37.486Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller",
  "raw_completion_len": 129,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.487Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:37.487Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 46
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller",
  "timestamp": "2024-02-15T00:46:37.487Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 69,
    "character": 46
  },
  "timestamp": "2024-02-15T00:46:37.487Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.492Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller)})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.492Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 49
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller)})",
  "timestamp": "2024-02-15T00:46:37.492Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller)})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller)})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 69,
    "character": 49
  },
  "timestamp": "2024-02-15T00:46:37.492Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller)})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.496Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller",
  "timestamp": "2024-02-15T00:46:37.496Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller",
  "timestamp": "2024-02-15T00:46:37.496Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller",
  "timestamp": "2024-02-15T00:46:37.496Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller",
  "timestamp": "2024-02-15T00:46:37.496Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller",
  "timestamp": "2024-02-15T00:46:37.496Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_",
  "completion_len": 130,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:37.503Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_",
  "raw_completion_len": 130,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.503Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:37.503Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 47
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_",
  "timestamp": "2024-02-15T00:46:37.503Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 69,
    "character": 47
  },
  "timestamp": "2024-02-15T00:46:37.503Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.508Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_)})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.508Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 50
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_)})",
  "timestamp": "2024-02-15T00:46:37.508Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_)})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_)})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 69,
    "character": 50
  },
  "timestamp": "2024-02-15T00:46:37.508Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_)})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.512Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_",
  "timestamp": "2024-02-15T00:46:37.512Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_",
  "timestamp": "2024-02-15T00:46:37.512Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_",
  "timestamp": "2024-02-15T00:46:37.512Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_",
  "timestamp": "2024-02-15T00:46:37.512Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_",
  "timestamp": "2024-02-15T00:46:37.512Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_ab",
  "completion_len": 132,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:37.546Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_ab",
  "raw_completion_len": 132,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.546Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:37.546Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 49
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_ab",
  "timestamp": "2024-02-15T00:46:37.547Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_ab",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_ab\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 69,
    "character": 49
  },
  "timestamp": "2024-02-15T00:46:37.547Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_ab",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.551Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_ab",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_ab)})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.551Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 52
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_ab)})",
  "timestamp": "2024-02-15T00:46:37.552Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_ab)})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_ab)})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 69,
    "character": 52
  },
  "timestamp": "2024-02-15T00:46:37.552Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_ab)})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.556Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_ab",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_ab",
  "timestamp": "2024-02-15T00:46:37.556Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_ab",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_ab",
  "timestamp": "2024-02-15T00:46:37.556Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_ab",
  "timestamp": "2024-02-15T00:46:37.556Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_ab",
  "timestamp": "2024-02-15T00:46:37.556Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_ab",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_ab",
  "timestamp": "2024-02-15T00:46:37.556Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted",
  "completion_len": 137,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:37.558Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted",
  "raw_completion_len": 137,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.558Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:37.558Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 54
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted",
  "timestamp": "2024-02-15T00:46:37.558Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 69,
    "character": 54
  },
  "timestamp": "2024-02-15T00:46:37.558Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.562Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted)})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.562Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 57
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted)})",
  "timestamp": "2024-02-15T00:46:37.562Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted)})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted)})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 69,
    "character": 57
  },
  "timestamp": "2024-02-15T00:46:37.562Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted)})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.567Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted",
  "timestamp": "2024-02-15T00:46:37.567Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted",
  "timestamp": "2024-02-15T00:46:37.567Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted",
  "timestamp": "2024-02-15T00:46:37.567Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted",
  "timestamp": "2024-02-15T00:46:37.567Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted",
  "timestamp": "2024-02-15T00:46:37.567Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',",
  "completion_len": 139,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:37.586Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',",
  "raw_completion_len": 139,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.586Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:37.586Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 56
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',",
  "timestamp": "2024-02-15T00:46:37.586Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 69,
    "character": 56
  },
  "timestamp": "2024-02-15T00:46:37.586Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-15T00:46:37.591Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',)})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.591Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 59
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',)})",
  "timestamp": "2024-02-15T00:46:37.592Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',)})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',)})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 69,
    "character": 59
  },
  "timestamp": "2024-02-15T00:46:37.592Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',)})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:37.596Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',",
  "timestamp": "2024-02-15T00:46:37.596Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',",
  "timestamp": "2024-02-15T00:46:37.596Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',",
  "timestamp": "2024-02-15T00:46:37.596Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',",
  "timestamp": "2024-02-15T00:46:37.596Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',",
  "timestamp": "2024-02-15T00:46:37.596Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n",
  "completion_len": 140,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:37.648Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n",
  "raw_completion_len": 140,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.648Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:37.648Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 56
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',",
  "timestamp": "2024-02-15T00:46:37.649Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 69,
    "character": 56
  },
  "timestamp": "2024-02-15T00:46:37.649Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-15T00:46:37.655Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',)})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.655Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 59
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',)})",
  "timestamp": "2024-02-15T00:46:37.655Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',)})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',)})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 69,
    "character": 59
  },
  "timestamp": "2024-02-15T00:46:37.655Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',)})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:37.660Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',",
  "timestamp": "2024-02-15T00:46:37.660Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n",
  "timestamp": "2024-02-15T00:46:37.660Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n",
  "timestamp": "2024-02-15T00:46:37.660Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n",
  "timestamp": "2024-02-15T00:46:37.660Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n",
  "timestamp": "2024-02-15T00:46:37.660Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t",
  "completion_len": 143,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:37.661Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t",
  "raw_completion_len": 143,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.661Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:37.661Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 56
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',",
  "timestamp": "2024-02-15T00:46:37.661Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 69,
    "character": 56
  },
  "timestamp": "2024-02-15T00:46:37.661Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-15T00:46:37.666Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',)})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.666Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 69,
    "character": 59
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',)})",
  "timestamp": "2024-02-15T00:46:37.667Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',)})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',)})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 69,
    "character": 59
  },
  "timestamp": "2024-02-15T00:46:37.667Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',)})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:37.672Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',",
  "timestamp": "2024-02-15T00:46:37.672Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t",
  "timestamp": "2024-02-15T00:46:37.672Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t",
  "timestamp": "2024-02-15T00:46:37.672Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t",
  "timestamp": "2024-02-15T00:46:37.672Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t",
  "timestamp": "2024-02-15T00:46:37.672Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{",
  "completion_len": 145,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:37.673Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{",
  "raw_completion_len": 145,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.674Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:37.674Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 70,
    "character": 7
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{",
  "timestamp": "2024-02-15T00:46:37.674Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 70,
    "character": 7
  },
  "timestamp": "2024-02-15T00:46:37.674Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 2,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{",
  "parse_error_count_complete": 5,
  "timestamp": "2024-02-15T00:46:37.679Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{})})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.679Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 70,
    "character": 11
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{})})",
  "timestamp": "2024-02-15T00:46:37.679Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 70,
    "character": 11
  },
  "timestamp": "2024-02-15T00:46:37.679Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{})})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:37.683Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{",
  "timestamp": "2024-02-15T00:46:37.683Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{",
  "timestamp": "2024-02-15T00:46:37.683Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{",
  "timestamp": "2024-02-15T00:46:37.683Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{",
  "timestamp": "2024-02-15T00:46:37.683Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{",
  "timestamp": "2024-02-15T00:46:37.683Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n",
  "completion_len": 146,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:37.731Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n",
  "raw_completion_len": 146,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.731Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:37.731Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 70,
    "character": 7
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{",
  "timestamp": "2024-02-15T00:46:37.731Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 70,
    "character": 7
  },
  "timestamp": "2024-02-15T00:46:37.731Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 2,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{",
  "parse_error_count_complete": 5,
  "timestamp": "2024-02-15T00:46:37.737Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{})})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.737Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 70,
    "character": 11
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{})})",
  "timestamp": "2024-02-15T00:46:37.737Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 70,
    "character": 11
  },
  "timestamp": "2024-02-15T00:46:37.737Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{})})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:37.741Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{",
  "timestamp": "2024-02-15T00:46:37.741Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n",
  "timestamp": "2024-02-15T00:46:37.741Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n",
  "timestamp": "2024-02-15T00:46:37.741Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n",
  "timestamp": "2024-02-15T00:46:37.741Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n",
  "timestamp": "2024-02-15T00:46:37.741Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t",
  "completion_len": 150,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:37.742Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t",
  "raw_completion_len": 150,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.742Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:37.742Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 70,
    "character": 7
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{",
  "timestamp": "2024-02-15T00:46:37.742Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 70,
    "character": 7
  },
  "timestamp": "2024-02-15T00:46:37.742Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 2,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{",
  "parse_error_count_complete": 5,
  "timestamp": "2024-02-15T00:46:37.747Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{})})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.747Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 70,
    "character": 11
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{})})",
  "timestamp": "2024-02-15T00:46:37.747Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 70,
    "character": 11
  },
  "timestamp": "2024-02-15T00:46:37.748Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{})})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:37.753Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{",
  "timestamp": "2024-02-15T00:46:37.753Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t",
  "timestamp": "2024-02-15T00:46:37.753Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t",
  "timestamp": "2024-02-15T00:46:37.753Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t",
  "timestamp": "2024-02-15T00:46:37.753Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t",
  "timestamp": "2024-02-15T00:46:37.753Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'",
  "completion_len": 152,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:37.754Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'",
  "raw_completion_len": 152,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.754Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:37.754Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 8
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'",
  "timestamp": "2024-02-15T00:46:37.754Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 71,
    "character": 8
  },
  "timestamp": "2024-02-15T00:46:37.754Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.761Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'})})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.762Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 12
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'})})",
  "timestamp": "2024-02-15T00:46:37.762Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 71,
    "character": 12
  },
  "timestamp": "2024-02-15T00:46:37.762Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'})})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.767Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'",
  "timestamp": "2024-02-15T00:46:37.767Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'",
  "timestamp": "2024-02-15T00:46:37.767Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'",
  "timestamp": "2024-02-15T00:46:37.767Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'",
  "timestamp": "2024-02-15T00:46:37.767Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'",
  "timestamp": "2024-02-15T00:46:37.767Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "completion_len": 157,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:37.789Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "raw_completion_len": 157,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.789Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:37.789Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 13
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "timestamp": "2024-02-15T00:46:37.790Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 71,
    "character": 13
  },
  "timestamp": "2024-02-15T00:46:37.790Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.794Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event})})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.794Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 17
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event})})",
  "timestamp": "2024-02-15T00:46:37.794Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 71,
    "character": 17
  },
  "timestamp": "2024-02-15T00:46:37.794Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event})})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.799Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "timestamp": "2024-02-15T00:46:37.799Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "timestamp": "2024-02-15T00:46:37.799Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "timestamp": "2024-02-15T00:46:37.799Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "timestamp": "2024-02-15T00:46:37.799Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event",
  "timestamp": "2024-02-15T00:46:37.799Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "completion_len": 158,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:37.810Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "raw_completion_len": 158,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.810Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:37.810Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 14
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "timestamp": "2024-02-15T00:46:37.810Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 71,
    "character": 14
  },
  "timestamp": "2024-02-15T00:46:37.810Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.815Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_})})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.816Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 18
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_})})",
  "timestamp": "2024-02-15T00:46:37.816Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 71,
    "character": 18
  },
  "timestamp": "2024-02-15T00:46:37.816Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_})})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.821Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "timestamp": "2024-02-15T00:46:37.821Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "timestamp": "2024-02-15T00:46:37.821Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "timestamp": "2024-02-15T00:46:37.821Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "timestamp": "2024-02-15T00:46:37.821Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_",
  "timestamp": "2024-02-15T00:46:37.821Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "completion_len": 162,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:37.840Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "raw_completion_len": 162,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.840Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:37.840Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 18
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "timestamp": "2024-02-15T00:46:37.840Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 71,
    "character": 18
  },
  "timestamp": "2024-02-15T00:46:37.840Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.844Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name})})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.844Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 22
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name})})",
  "timestamp": "2024-02-15T00:46:37.845Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 71,
    "character": 22
  },
  "timestamp": "2024-02-15T00:46:37.845Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name})})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.849Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "timestamp": "2024-02-15T00:46:37.849Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "timestamp": "2024-02-15T00:46:37.849Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "timestamp": "2024-02-15T00:46:37.849Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "timestamp": "2024-02-15T00:46:37.849Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name",
  "timestamp": "2024-02-15T00:46:37.849Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "completion_len": 164,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:37.867Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "raw_completion_len": 164,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.867Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:37.867Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 20
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "timestamp": "2024-02-15T00:46:37.867Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name':\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 71,
    "character": 20
  },
  "timestamp": "2024-02-15T00:46:37.867Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 2,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "parse_error_count_complete": 5,
  "timestamp": "2024-02-15T00:46:37.873Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name':})})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.873Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 24
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name':})})",
  "timestamp": "2024-02-15T00:46:37.873Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name':})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name':})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 71,
    "character": 24
  },
  "timestamp": "2024-02-15T00:46:37.873Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name':})})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:37.878Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "timestamp": "2024-02-15T00:46:37.878Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "timestamp": "2024-02-15T00:46:37.878Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "timestamp": "2024-02-15T00:46:37.878Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "timestamp": "2024-02-15T00:46:37.878Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name':",
  "timestamp": "2024-02-15T00:46:37.878Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "completion_len": 166,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:37.897Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "raw_completion_len": 166,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.897Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:37.897Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 22
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "timestamp": "2024-02-15T00:46:37.897Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 71,
    "character": 22
  },
  "timestamp": "2024-02-15T00:46:37.897Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.902Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '})})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.902Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 26
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '})})",
  "timestamp": "2024-02-15T00:46:37.903Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 71,
    "character": 26
  },
  "timestamp": "2024-02-15T00:46:37.903Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '})})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.908Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "timestamp": "2024-02-15T00:46:37.908Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "timestamp": "2024-02-15T00:46:37.908Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "timestamp": "2024-02-15T00:46:37.908Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "timestamp": "2024-02-15T00:46:37.908Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': '",
  "timestamp": "2024-02-15T00:46:37.908Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "completion_len": 168,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:37.921Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "raw_completion_len": 168,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.921Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:37.921Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 24
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "timestamp": "2024-02-15T00:46:37.922Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 71,
    "character": 24
  },
  "timestamp": "2024-02-15T00:46:37.922Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.926Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab})})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.926Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 28
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab})})",
  "timestamp": "2024-02-15T00:46:37.927Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 71,
    "character": 28
  },
  "timestamp": "2024-02-15T00:46:37.927Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab})})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.931Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "timestamp": "2024-02-15T00:46:37.931Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "timestamp": "2024-02-15T00:46:37.931Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "timestamp": "2024-02-15T00:46:37.931Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "timestamp": "2024-02-15T00:46:37.931Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'ab",
  "timestamp": "2024-02-15T00:46:37.931Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort",
  "completion_len": 171,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:37.953Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort",
  "raw_completion_len": 171,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.953Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:37.953Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 27
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort",
  "timestamp": "2024-02-15T00:46:37.953Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 71,
    "character": 27
  },
  "timestamp": "2024-02-15T00:46:37.953Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.958Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort})})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.959Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 31
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort})})",
  "timestamp": "2024-02-15T00:46:37.959Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 71,
    "character": 31
  },
  "timestamp": "2024-02-15T00:46:37.959Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort})})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.965Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort",
  "timestamp": "2024-02-15T00:46:37.965Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort",
  "timestamp": "2024-02-15T00:46:37.965Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort",
  "timestamp": "2024-02-15T00:46:37.965Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort",
  "timestamp": "2024-02-15T00:46:37.965Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort",
  "timestamp": "2024-02-15T00:46:37.965Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_",
  "completion_len": 172,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:37.983Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_",
  "raw_completion_len": 172,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.983Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:37.983Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 28
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_",
  "timestamp": "2024-02-15T00:46:37.984Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 71,
    "character": 28
  },
  "timestamp": "2024-02-15T00:46:37.984Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.989Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_})})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:37.989Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 32
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_})})",
  "timestamp": "2024-02-15T00:46:37.990Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 71,
    "character": 32
  },
  "timestamp": "2024-02-15T00:46:37.990Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_})})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:37.994Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_",
  "timestamp": "2024-02-15T00:46:37.994Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_",
  "timestamp": "2024-02-15T00:46:37.994Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_",
  "timestamp": "2024-02-15T00:46:37.994Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_",
  "timestamp": "2024-02-15T00:46:37.994Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_",
  "timestamp": "2024-02-15T00:46:37.994Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller",
  "completion_len": 182,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:38.012Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller",
  "raw_completion_len": 182,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.012Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:38.012Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 38
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller",
  "timestamp": "2024-02-15T00:46:38.012Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 71,
    "character": 38
  },
  "timestamp": "2024-02-15T00:46:38.012Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:38.017Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller})})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.017Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 42
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller})})",
  "timestamp": "2024-02-15T00:46:38.017Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 71,
    "character": 42
  },
  "timestamp": "2024-02-15T00:46:38.017Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller})})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:38.022Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller",
  "timestamp": "2024-02-15T00:46:38.022Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller",
  "timestamp": "2024-02-15T00:46:38.022Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller",
  "timestamp": "2024-02-15T00:46:38.022Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller",
  "timestamp": "2024-02-15T00:46:38.022Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller",
  "timestamp": "2024-02-15T00:46:38.022Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_",
  "completion_len": 183,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:38.034Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_",
  "raw_completion_len": 183,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.034Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:38.034Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 39
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_",
  "timestamp": "2024-02-15T00:46:38.034Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 71,
    "character": 39
  },
  "timestamp": "2024-02-15T00:46:38.034Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:38.039Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_})})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.039Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 43
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_})})",
  "timestamp": "2024-02-15T00:46:38.039Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 71,
    "character": 43
  },
  "timestamp": "2024-02-15T00:46:38.039Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_})})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:38.044Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_",
  "timestamp": "2024-02-15T00:46:38.044Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_",
  "timestamp": "2024-02-15T00:46:38.044Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_",
  "timestamp": "2024-02-15T00:46:38.044Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_",
  "timestamp": "2024-02-15T00:46:38.044Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_",
  "timestamp": "2024-02-15T00:46:38.044Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_ab",
  "completion_len": 185,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:38.063Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_ab",
  "raw_completion_len": 185,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.063Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:38.063Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 41
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_ab",
  "timestamp": "2024-02-15T00:46:38.064Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_ab",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_ab\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 71,
    "character": 41
  },
  "timestamp": "2024-02-15T00:46:38.064Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_ab",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:38.069Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_ab",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_ab})})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.069Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 45
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_ab})})",
  "timestamp": "2024-02-15T00:46:38.069Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_ab})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_ab})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 71,
    "character": 45
  },
  "timestamp": "2024-02-15T00:46:38.069Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_ab})})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:38.074Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_ab",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_ab",
  "timestamp": "2024-02-15T00:46:38.074Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_ab",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_ab",
  "timestamp": "2024-02-15T00:46:38.074Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_ab",
  "timestamp": "2024-02-15T00:46:38.074Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_ab",
  "timestamp": "2024-02-15T00:46:38.074Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_ab",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_ab",
  "timestamp": "2024-02-15T00:46:38.074Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted",
  "completion_len": 190,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:38.093Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted",
  "raw_completion_len": 190,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.093Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:38.093Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 46
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted",
  "timestamp": "2024-02-15T00:46:38.093Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 71,
    "character": 46
  },
  "timestamp": "2024-02-15T00:46:38.093Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:38.098Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted})})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.098Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 50
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted})})",
  "timestamp": "2024-02-15T00:46:38.098Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 71,
    "character": 50
  },
  "timestamp": "2024-02-15T00:46:38.098Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted})})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:38.103Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted",
  "timestamp": "2024-02-15T00:46:38.103Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted",
  "timestamp": "2024-02-15T00:46:38.103Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted",
  "timestamp": "2024-02-15T00:46:38.103Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted",
  "timestamp": "2024-02-15T00:46:38.103Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted",
  "timestamp": "2024-02-15T00:46:38.103Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',",
  "completion_len": 192,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:38.119Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',",
  "raw_completion_len": 192,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.120Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:38.120Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 48
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',",
  "timestamp": "2024-02-15T00:46:38.120Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 71,
    "character": 48
  },
  "timestamp": "2024-02-15T00:46:38.120Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',",
  "parse_error_count_complete": 3,
  "timestamp": "2024-02-15T00:46:38.125Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',})})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.126Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 52
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',})})",
  "timestamp": "2024-02-15T00:46:38.126Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 71,
    "character": 52
  },
  "timestamp": "2024-02-15T00:46:38.126Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',})})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:38.130Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',",
  "timestamp": "2024-02-15T00:46:38.131Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',",
  "timestamp": "2024-02-15T00:46:38.131Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',",
  "timestamp": "2024-02-15T00:46:38.131Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',",
  "timestamp": "2024-02-15T00:46:38.131Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',",
  "timestamp": "2024-02-15T00:46:38.131Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n",
  "completion_len": 193,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:38.178Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n",
  "raw_completion_len": 193,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.178Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:38.178Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 48
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',",
  "timestamp": "2024-02-15T00:46:38.179Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 71,
    "character": 48
  },
  "timestamp": "2024-02-15T00:46:38.179Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',",
  "parse_error_count_complete": 3,
  "timestamp": "2024-02-15T00:46:38.183Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',})})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.184Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 52
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',})})",
  "timestamp": "2024-02-15T00:46:38.184Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 71,
    "character": 52
  },
  "timestamp": "2024-02-15T00:46:38.184Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',})})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:38.189Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',",
  "timestamp": "2024-02-15T00:46:38.189Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n",
  "timestamp": "2024-02-15T00:46:38.189Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n",
  "timestamp": "2024-02-15T00:46:38.189Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n",
  "timestamp": "2024-02-15T00:46:38.189Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n",
  "timestamp": "2024-02-15T00:46:38.189Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t",
  "completion_len": 197,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:38.189Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t",
  "raw_completion_len": 197,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.190Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:38.190Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 48
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',",
  "timestamp": "2024-02-15T00:46:38.190Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 71,
    "character": 48
  },
  "timestamp": "2024-02-15T00:46:38.190Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',",
  "parse_error_count_complete": 3,
  "timestamp": "2024-02-15T00:46:38.194Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',})})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.195Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 71,
    "character": 52
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',})})",
  "timestamp": "2024-02-15T00:46:38.195Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 71,
    "character": 52
  },
  "timestamp": "2024-02-15T00:46:38.195Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',})})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:38.199Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',",
  "timestamp": "2024-02-15T00:46:38.199Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t",
  "timestamp": "2024-02-15T00:46:38.199Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t",
  "timestamp": "2024-02-15T00:46:38.199Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t",
  "timestamp": "2024-02-15T00:46:38.199Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t",
  "timestamp": "2024-02-15T00:46:38.199Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'",
  "completion_len": 199,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:38.203Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'",
  "raw_completion_len": 199,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.203Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:38.203Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 72,
    "character": 8
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'",
  "timestamp": "2024-02-15T00:46:38.203Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 72,
    "character": 8
  },
  "timestamp": "2024-02-15T00:46:38.203Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:38.207Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'})})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.208Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 72,
    "character": 12
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'})})",
  "timestamp": "2024-02-15T00:46:38.208Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 72,
    "character": 12
  },
  "timestamp": "2024-02-15T00:46:38.208Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'})})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:38.212Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'",
  "timestamp": "2024-02-15T00:46:38.212Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'",
  "timestamp": "2024-02-15T00:46:38.212Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'",
  "timestamp": "2024-02-15T00:46:38.212Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'",
  "timestamp": "2024-02-15T00:46:38.212Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'",
  "timestamp": "2024-02-15T00:46:38.212Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id",
  "completion_len": 201,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:38.234Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id",
  "raw_completion_len": 201,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.234Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:38.234Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 72,
    "character": 10
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id",
  "timestamp": "2024-02-15T00:46:38.234Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 72,
    "character": 10
  },
  "timestamp": "2024-02-15T00:46:38.234Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:38.239Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id})})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.239Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 72,
    "character": 14
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id})})",
  "timestamp": "2024-02-15T00:46:38.240Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 72,
    "character": 14
  },
  "timestamp": "2024-02-15T00:46:38.240Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id})})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:38.244Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id",
  "timestamp": "2024-02-15T00:46:38.244Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id",
  "timestamp": "2024-02-15T00:46:38.244Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id",
  "timestamp": "2024-02-15T00:46:38.244Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id",
  "timestamp": "2024-02-15T00:46:38.244Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id",
  "timestamp": "2024-02-15T00:46:38.244Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id':",
  "completion_len": 203,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:38.261Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id':",
  "raw_completion_len": 203,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.261Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:38.261Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 72,
    "character": 12
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id':",
  "timestamp": "2024-02-15T00:46:38.261Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id':",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id':\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 72,
    "character": 12
  },
  "timestamp": "2024-02-15T00:46:38.261Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 2,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id':",
  "parse_error_count_complete": 5,
  "timestamp": "2024-02-15T00:46:38.267Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id':",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id':})})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.267Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 72,
    "character": 16
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id':})})",
  "timestamp": "2024-02-15T00:46:38.267Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id':})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id':})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 72,
    "character": 16
  },
  "timestamp": "2024-02-15T00:46:38.267Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id':})})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:38.272Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id':",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id':",
  "timestamp": "2024-02-15T00:46:38.272Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id':",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id':",
  "timestamp": "2024-02-15T00:46:38.272Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id':",
  "timestamp": "2024-02-15T00:46:38.272Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id':",
  "timestamp": "2024-02-15T00:46:38.272Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id':",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id':",
  "timestamp": "2024-02-15T00:46:38.272Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this",
  "completion_len": 208,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:38.289Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this",
  "raw_completion_len": 208,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.289Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:38.289Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 72,
    "character": 17
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this",
  "timestamp": "2024-02-15T00:46:38.290Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 72,
    "character": 17
  },
  "timestamp": "2024-02-15T00:46:38.290Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 3,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this",
  "parse_error_count_complete": 5,
  "timestamp": "2024-02-15T00:46:38.295Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this})})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.295Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 72,
    "character": 21
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this})})",
  "timestamp": "2024-02-15T00:46:38.295Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 72,
    "character": 21
  },
  "timestamp": "2024-02-15T00:46:38.295Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this})})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:38.300Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this",
  "timestamp": "2024-02-15T00:46:38.300Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this",
  "timestamp": "2024-02-15T00:46:38.300Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this",
  "timestamp": "2024-02-15T00:46:38.300Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this",
  "timestamp": "2024-02-15T00:46:38.300Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this",
  "timestamp": "2024-02-15T00:46:38.300Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.",
  "completion_len": 209,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:38.318Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.",
  "raw_completion_len": 209,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.318Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:38.318Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 72,
    "character": 18
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.",
  "timestamp": "2024-02-15T00:46:38.318Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 72,
    "character": 18
  },
  "timestamp": "2024-02-15T00:46:38.318Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 2,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.",
  "parse_error_count_complete": 5,
  "timestamp": "2024-02-15T00:46:38.324Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.})})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.324Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 72,
    "character": 22
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.})})",
  "timestamp": "2024-02-15T00:46:38.324Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 72,
    "character": 22
  },
  "timestamp": "2024-02-15T00:46:38.324Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.})})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:38.329Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.",
  "timestamp": "2024-02-15T00:46:38.329Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.",
  "timestamp": "2024-02-15T00:46:38.329Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.",
  "timestamp": "2024-02-15T00:46:38.329Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.",
  "timestamp": "2024-02-15T00:46:38.329Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.",
  "timestamp": "2024-02-15T00:46:38.329Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options",
  "completion_len": 216,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:38.344Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options",
  "raw_completion_len": 216,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.344Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:38.344Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 72,
    "character": 25
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options",
  "timestamp": "2024-02-15T00:46:38.344Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 72,
    "character": 25
  },
  "timestamp": "2024-02-15T00:46:38.344Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 2,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options",
  "parse_error_count_complete": 5,
  "timestamp": "2024-02-15T00:46:38.349Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options})})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.350Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 72,
    "character": 29
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options})})",
  "timestamp": "2024-02-15T00:46:38.350Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 72,
    "character": 29
  },
  "timestamp": "2024-02-15T00:46:38.350Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options})})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:38.354Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options",
  "timestamp": "2024-02-15T00:46:38.354Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options",
  "timestamp": "2024-02-15T00:46:38.354Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options",
  "timestamp": "2024-02-15T00:46:38.354Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options",
  "timestamp": "2024-02-15T00:46:38.354Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options",
  "timestamp": "2024-02-15T00:46:38.354Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.",
  "completion_len": 217,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:38.384Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.",
  "raw_completion_len": 217,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.384Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:38.384Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 72,
    "character": 26
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.",
  "timestamp": "2024-02-15T00:46:38.384Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 72,
    "character": 26
  },
  "timestamp": "2024-02-15T00:46:38.384Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 2,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.",
  "parse_error_count_complete": 5,
  "timestamp": "2024-02-15T00:46:38.389Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.})})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.390Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 72,
    "character": 30
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.})})",
  "timestamp": "2024-02-15T00:46:38.390Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 72,
    "character": 30
  },
  "timestamp": "2024-02-15T00:46:38.390Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.})})",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:38.394Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.",
  "timestamp": "2024-02-15T00:46:38.394Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.",
  "timestamp": "2024-02-15T00:46:38.394Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.",
  "timestamp": "2024-02-15T00:46:38.395Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.",
  "timestamp": "2024-02-15T00:46:38.395Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.",
  "timestamp": "2024-02-15T00:46:38.395Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.span",
  "completion_len": 221,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:38.403Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.span",
  "raw_completion_len": 221,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.403Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:38.403Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 72,
    "character": 30
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.span",
  "timestamp": "2024-02-15T00:46:38.403Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.span",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.span\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 72,
    "character": 30
  },
  "timestamp": "2024-02-15T00:46:38.403Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 2,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.span",
  "parse_error_count_complete": 5,
  "timestamp": "2024-02-15T00:46:38.408Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.span",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.span})})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.408Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 72,
    "character": 34
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.span})})",
  "timestamp": "2024-02-15T00:46:38.409Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.span})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.span})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 72,
    "character": 34
  },
  "timestamp": "2024-02-15T00:46:38.409Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.span})})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:38.413Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.span",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.span",
  "timestamp": "2024-02-15T00:46:38.413Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.span",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.span",
  "timestamp": "2024-02-15T00:46:38.413Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.span",
  "timestamp": "2024-02-15T00:46:38.413Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.span",
  "timestamp": "2024-02-15T00:46:38.413Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.span",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.span",
  "timestamp": "2024-02-15T00:46:38.413Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId",
  "completion_len": 223,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:38.431Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId",
  "raw_completion_len": 223,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.431Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:38.431Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 72,
    "character": 32
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId",
  "timestamp": "2024-02-15T00:46:38.432Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 72,
    "character": 32
  },
  "timestamp": "2024-02-15T00:46:38.432Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 2,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId",
  "parse_error_count_complete": 5,
  "timestamp": "2024-02-15T00:46:38.437Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId})})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.438Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 72,
    "character": 36
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId})})",
  "timestamp": "2024-02-15T00:46:38.438Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 72,
    "character": 36
  },
  "timestamp": "2024-02-15T00:46:38.438Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId})})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:38.442Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId",
  "timestamp": "2024-02-15T00:46:38.442Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId",
  "timestamp": "2024-02-15T00:46:38.442Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId",
  "timestamp": "2024-02-15T00:46:38.442Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId",
  "timestamp": "2024-02-15T00:46:38.442Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId",
  "timestamp": "2024-02-15T00:46:38.442Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "completion_len": 224,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:38.463Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "raw_completion_len": 224,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.463Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:38.463Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 72,
    "character": 33
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "timestamp": "2024-02-15T00:46:38.463Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 72,
    "character": 33
  },
  "timestamp": "2024-02-15T00:46:38.463Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "parse_error_count_complete": 3,
  "timestamp": "2024-02-15T00:46:38.468Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,})})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.468Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 72,
    "character": 37
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,})})",
  "timestamp": "2024-02-15T00:46:38.469Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 72,
    "character": 37
  },
  "timestamp": "2024-02-15T00:46:38.469Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,})})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:38.475Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "timestamp": "2024-02-15T00:46:38.475Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "timestamp": "2024-02-15T00:46:38.475Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "timestamp": "2024-02-15T00:46:38.475Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "timestamp": "2024-02-15T00:46:38.475Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "timestamp": "2024-02-15T00:46:38.475Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n",
  "completion_len": 225,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:38.517Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n",
  "raw_completion_len": 225,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.517Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:38.517Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 72,
    "character": 33
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "timestamp": "2024-02-15T00:46:38.517Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 72,
    "character": 33
  },
  "timestamp": "2024-02-15T00:46:38.517Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "parse_error_count_complete": 3,
  "timestamp": "2024-02-15T00:46:38.522Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,})})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.522Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 72,
    "character": 37
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,})})",
  "timestamp": "2024-02-15T00:46:38.522Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 72,
    "character": 37
  },
  "timestamp": "2024-02-15T00:46:38.522Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,})})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:38.527Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "timestamp": "2024-02-15T00:46:38.527Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n",
  "timestamp": "2024-02-15T00:46:38.527Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n",
  "timestamp": "2024-02-15T00:46:38.527Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n",
  "timestamp": "2024-02-15T00:46:38.527Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n",
  "timestamp": "2024-02-15T00:46:38.527Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t",
  "completion_len": 228,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:38.528Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t",
  "raw_completion_len": 228,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.528Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:38.528Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 72,
    "character": 33
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "timestamp": "2024-02-15T00:46:38.528Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 72,
    "character": 33
  },
  "timestamp": "2024-02-15T00:46:38.528Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "parse_error_count_complete": 3,
  "timestamp": "2024-02-15T00:46:38.533Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,})})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.533Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 72,
    "character": 37
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,})})",
  "timestamp": "2024-02-15T00:46:38.533Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 72,
    "character": 37
  },
  "timestamp": "2024-02-15T00:46:38.533Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,})})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:38.538Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "timestamp": "2024-02-15T00:46:38.538Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t",
  "timestamp": "2024-02-15T00:46:38.538Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t",
  "timestamp": "2024-02-15T00:46:38.538Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t",
  "timestamp": "2024-02-15T00:46:38.538Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t",
  "timestamp": "2024-02-15T00:46:38.538Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "completion_len": 230,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:38.547Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "raw_completion_len": 230,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.547Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:38.547Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 73,
    "character": 7
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-15T00:46:38.548Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 73,
    "character": 7
  },
  "timestamp": "2024-02-15T00:46:38.548Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 2,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-15T00:46:38.553Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.553Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 73,
    "character": 10
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})})",
  "timestamp": "2024-02-15T00:46:38.553Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 73,
    "character": 10
  },
  "timestamp": "2024-02-15T00:46:38.553Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:38.557Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-15T00:46:38.557Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-15T00:46:38.557Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-15T00:46:38.557Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-15T00:46:38.557Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-15T00:46:38.557Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n",
  "completion_len": 231,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:38.602Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n",
  "raw_completion_len": 231,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.602Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:38.602Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 73,
    "character": 7
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-15T00:46:38.602Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 73,
    "character": 7
  },
  "timestamp": "2024-02-15T00:46:38.602Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 2,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-15T00:46:38.607Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.608Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 73,
    "character": 10
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})})",
  "timestamp": "2024-02-15T00:46:38.608Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 73,
    "character": 10
  },
  "timestamp": "2024-02-15T00:46:38.608Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:38.612Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-15T00:46:38.612Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n",
  "timestamp": "2024-02-15T00:46:38.612Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n",
  "timestamp": "2024-02-15T00:46:38.612Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n",
  "timestamp": "2024-02-15T00:46:38.612Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n",
  "timestamp": "2024-02-15T00:46:38.612Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t",
  "completion_len": 233,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:38.613Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t",
  "raw_completion_len": 233,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.613Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:38.613Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 73,
    "character": 7
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-15T00:46:38.613Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 73,
    "character": 7
  },
  "timestamp": "2024-02-15T00:46:38.613Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 2,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-15T00:46:38.619Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.619Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 73,
    "character": 10
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})})",
  "timestamp": "2024-02-15T00:46:38.619Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 73,
    "character": 10
  },
  "timestamp": "2024-02-15T00:46:38.619Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:38.625Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-15T00:46:38.625Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t",
  "timestamp": "2024-02-15T00:46:38.625Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t",
  "timestamp": "2024-02-15T00:46:38.625Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t",
  "timestamp": "2024-02-15T00:46:38.625Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t",
  "timestamp": "2024-02-15T00:46:38.625Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t",
  "completion_len": 234,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:38.627Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t",
  "raw_completion_len": 234,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.627Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:38.627Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 73,
    "character": 7
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-15T00:46:38.627Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 73,
    "character": 7
  },
  "timestamp": "2024-02-15T00:46:38.627Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 2,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "parse_error_count_complete": 2,
  "timestamp": "2024-02-15T00:46:38.632Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.633Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 73,
    "character": 10
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})})",
  "timestamp": "2024-02-15T00:46:38.633Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 73,
    "character": 10
  },
  "timestamp": "2024-02-15T00:46:38.633Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t})})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:38.638Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "timestamp": "2024-02-15T00:46:38.638Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t",
  "timestamp": "2024-02-15T00:46:38.638Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t",
  "timestamp": "2024-02-15T00:46:38.638Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t",
  "timestamp": "2024-02-15T00:46:38.638Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t",
  "timestamp": "2024-02-15T00:46:38.638Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "completion_len": 236,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:38.656Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "raw_completion_len": 236,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.656Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:38.656Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 74,
    "character": 7
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "timestamp": "2024-02-15T00:46:38.656Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 74,
    "character": 7
  },
  "timestamp": "2024-02-15T00:46:38.656Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:38.661Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.661Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 74,
    "character": 9
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);})",
  "timestamp": "2024-02-15T00:46:38.661Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 74,
    "character": 9
  },
  "timestamp": "2024-02-15T00:46:38.661Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:38.666Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "timestamp": "2024-02-15T00:46:38.666Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "timestamp": "2024-02-15T00:46:38.666Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "timestamp": "2024-02-15T00:46:38.666Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "timestamp": "2024-02-15T00:46:38.666Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "timestamp": "2024-02-15T00:46:38.666Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n",
  "completion_len": 237,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:38.709Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n",
  "raw_completion_len": 237,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.709Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:38.709Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 74,
    "character": 7
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "timestamp": "2024-02-15T00:46:38.710Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 74,
    "character": 7
  },
  "timestamp": "2024-02-15T00:46:38.710Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:38.714Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.715Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 74,
    "character": 9
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);})",
  "timestamp": "2024-02-15T00:46:38.715Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 74,
    "character": 9
  },
  "timestamp": "2024-02-15T00:46:38.715Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:38.720Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "timestamp": "2024-02-15T00:46:38.720Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n",
  "timestamp": "2024-02-15T00:46:38.720Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n",
  "timestamp": "2024-02-15T00:46:38.720Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n",
  "timestamp": "2024-02-15T00:46:38.720Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n",
  "timestamp": "2024-02-15T00:46:38.720Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t",
  "completion_len": 238,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:38.721Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t",
  "raw_completion_len": 238,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.721Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:38.721Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 74,
    "character": 7
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "timestamp": "2024-02-15T00:46:38.721Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 74,
    "character": 7
  },
  "timestamp": "2024-02-15T00:46:38.721Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 1,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "parse_error_count_complete": 1,
  "timestamp": "2024-02-15T00:46:38.726Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);})",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.726Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 74,
    "character": 9
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);})",
  "timestamp": "2024-02-15T00:46:38.726Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);})",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);})\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 74,
    "character": 9
  },
  "timestamp": "2024-02-15T00:46:38.726Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);})",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:38.731Z"
}
{
  "message": "sidecar.truncate_parsed_completion.no_overlap",
  "event_name": "sidecar.truncate_parsed_completion.no_overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "timestamp": "2024-02-15T00:46:38.731Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t",
  "timestamp": "2024-02-15T00:46:38.731Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t",
  "timestamp": "2024-02-15T00:46:38.731Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t",
  "timestamp": "2024-02-15T00:46:38.731Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t",
  "timestamp": "2024-02-15T00:46:38.731Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "completion_len": 242,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:38.738Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "raw_completion_len": 242,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.738Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:38.738Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 75,
    "character": 7
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-15T00:46:38.738Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 75,
    "character": 7
  },
  "timestamp": "2024-02-15T00:46:38.738Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:38.743Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.743Z"
}
{
  "message": "sidecar.truncate_parsed_completion.overlap",
  "event_name": "sidecar.truncate_parsed_completion.overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "overlap": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-15T00:46:38.743Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-15T00:46:38.743Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-15T00:46:38.743Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-15T00:46:38.743Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-15T00:46:38.743Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "completion_len": 242,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:38.802Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "raw_completion_len": 242,
  "is_request_ended": false,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.802Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:38.802Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 75,
    "character": 7
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-15T00:46:38.802Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 75,
    "character": 7
  },
  "timestamp": "2024-02-15T00:46:38.802Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:38.807Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.807Z"
}
{
  "message": "sidecar.truncate_parsed_completion.overlap",
  "event_name": "sidecar.truncate_parsed_completion.overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "overlap": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-15T00:46:38.807Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-15T00:46:38.807Z"
}
{
  "message": "sidecar.canUsePartialCompletion.parse",
  "event_name": "sidecar.can_use_partial_completion.parse_truncate_completion",
  "id": "completions-27",
  "partial_response": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-15T00:46:38.807Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "id": "completions-27",
  "is_request_ended": false,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-15T00:46:38.807Z"
}
{
  "message": "sidecar.hotstreak.no_completion",
  "event_name": "sidecar.hotstreak.no_completion",
  "id": "completions-27",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "unprocessed_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-15T00:46:38.807Z"
}
{
  "message": "sidecar.shouldYieldFirstCompletion",
  "event_name": "should_yield_first_completion",
  "should_yield_first_completion": true,
  "multiline": false,
  "completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "completion_len": 242,
  "hotStreakExtractor": "present",
  "timestamp": "2024-02-15T00:46:38.808Z"
}
{
  "message": "sidecar.hotstreak.completion",
  "event_name": "hotstreak_extract",
  "raw_completion": "\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "raw_completion_len": 242,
  "is_request_ended": true,
  "updated_document_context": "\n\t\t",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.808Z"
}
{
  "message": "sidecar.multiline.trigger",
  "event_name": "sidecar.multiline.trigger",
  "current_line_prefix": "\t\tabortController.signal.addEventListener('abort', () => {",
  "current_line_suffix": "",
  "timestamp": "2024-02-15T00:46:38.808Z"
}
{
  "message": "sidecar.parse_completion",
  "event_name": "sidecar.parse_completion",
  "position": {
    "line": 67,
    "character": 2
  },
  "completion_end_position": {
    "line": 75,
    "character": 7
  },
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-15T00:46:38.808Z"
}
{
  "message": "sidecar.paseCompletion",
  "event_name": "sidecar.parse_completion",
  "id": "completions-27",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "text_with_completion": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionRequest } from '../../inlineCompletion/sidecarCompletion';\nimport { SideCarClient } from '../../sidecar/client';\nimport { forkSignal, zipGenerators } from '../utils';\nimport * as CompletionLogger from '../logger';\nimport { FetchCompletionResult, fetchAndProcessCompletions, fetchAndProcessDynamicMultilineCompletions } from './fetch-and-process-completions';\nimport { Provider, ProviderOptions } from './provider';\nimport { abort } from 'process';\n\nexport class SidecarProvider extends Provider {\n\tprivate _sidecarClient: SideCarClient;\n\tprivate _logger: CompletionLogger.LoggingService;\n\tconstructor(options: ProviderOptions, sidecarClient: SideCarClient, logger: CompletionLogger.LoggingService) {\n\t\tsuper(options);\n\t\tthis._sidecarClient = sidecarClient;\n\t\tthis._logger = logger;\n\t}\n\n\tpublic generateCompletions(abortSignal: AbortSignal): AsyncGenerator<FetchCompletionResult[]> {\n\t\tconst { languageId, uri } = this.options.document;\n\t\tconst isDynamicMultiline = Boolean(this.options.dynamicMultilineCompletions);\n\t\tthis._logger.logInfo('sidecar.inlineProvider', {\n\t\t\t'event_name': 'generate_completions',\n\t\t\t'id': this.options.spanId,\n\t\t});\n\t\tconst fetchAndProcessCompletionsImpl = isDynamicMultiline\n\t\t\t? fetchAndProcessDynamicMultilineCompletions\n\t\t\t: fetchAndProcessCompletions;\n\t\t// send over the request to the sidecar\n\t\tconst completionRequest: CompletionRequest = {\n\t\t\tfilepath: uri.fsPath,\n\t\t\tlanguage: languageId,\n\t\t\ttext: this.options.document.getText(),\n\t\t\tposition: {\n\t\t\t\tline: this.options.position.line,\n\t\t\t\tcharacter: this.options.position.character,\n\t\t\t\tbyteOffset: this.options.document.offsetAt(this.options.position),\n\t\t\t},\n\t\t\tid: this.options.spanId,\n\t\t\trequestId: this.options.spanId,\n\t\t};\n\t\tconst now = performance.now();\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.send_completion_request',\n\t\t\t{\n\t\t\t\t'event_name': 'send_completion_request',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t}\n\t\t);\n\t\tconst responseStream = this._sidecarClient.inlineCompletionText(\n\t\t\tcompletionRequest,\n\t\t\tabortSignal,\n\t\t);\n\t\tthis._logger.logInfo(\n\t\t\t'sidecar.inlineProvider.responseStream',\n\t\t\t{\n\t\t\t\t'event_name': 'response_stream',\n\t\t\t\t'id': this.options.spanId,\n\t\t\t\t'time_taken': performance.now() - now,\n\t\t\t}\n\t\t);\n\t\tconst abortController = forkSignal(abortSignal);\n\t\t// log when the controller is aborted\n\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t\tconst stream = fetchAndProcessCompletionsImpl({\n\t\t\tcompletionResponseGenerator: responseStream,\n\t\t\tabortController,\n\t\t\tproviderSpecificPostProcess: (insertText: string) => insertText,\n\t\t\tproviderOptions: this.options,\n\t\t\tlogger: this._logger,\n\t\t\tspanId: this.options.spanId,\n\t\t});\n\t\treturn zipGenerators([stream]);\n\t}\n}\n",
  "start_position": {
    "line": 66,
    "character": 39
  },
  "end_position": {
    "line": 75,
    "character": 7
  },
  "timestamp": "2024-02-15T00:46:38.808Z"
}
{
  "message": "sidecar.tree_sitter.errors",
  "event_name": "sidecar.tree_sitter.errors",
  "id": "completions-27",
  "parse_error_count": 0,
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "parse_error_count_complete": 0,
  "timestamp": "2024-02-15T00:46:38.813Z"
}
{
  "message": "sidecar.insert_missing_brackets",
  "event_name": "sidecar.insert_missing_brackets",
  "inital_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "fixed_string": "\t\tabortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.813Z"
}
{
  "message": "sidecar.truncate_parsed_completion.overlap",
  "event_name": "sidecar.truncate_parsed_completion.overlap",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "overlap": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "final_completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-15T00:46:38.813Z"
}
{
  "message": "sidecar.parseAndTruncateCompletion.parsed",
  "event_name": "sidecar.parseAndTruncateCompletion.parsed",
  "id": "completions-27",
  "insert_text": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-15T00:46:38.813Z"
}
{
  "message": "sidecar.hotstreak.completionExtract",
  "event_name": "sidecar.hotstreak.extractCompletion",
  "completion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "id": "completions-27",
  "is_request_ended": true,
  "unprocessedCompletion": "abortController.signal.addEventListener('abort', () => {\n\t\t\tthis._logger.logInfo(\n\t\t\t\t'sidecar.inlineProvider.abort_controller_aborted',\n\t\t\t\t{\n\t\t\t\t\t'event_name': 'abort_controller_aborted',\n\t\t\t\t\t'id': this.options.spanId,\n\t\t\t\t}\n\t\t\t);\n\t\t});",
  "timestamp": "2024-02-15T00:46:38.813Z"
}
{
  "message": "sidecar.request_manager.current.completions",
  "event_name": "sidecar.request_manager.current.completions",
  "id": "completions-27",
  "completion": 0,
  "timestamp": "2024-02-15T00:46:38.814Z"
}
{
  "message": "sidecar.request_manager.hotstreak.completions",
  "event_name": "sidecar.request_manager.hotstreak.completions",
  "id": "completions-27",
  "completions": 1,
  "timestamp": "2024-02-15T00:46:38.814Z"
}
{
  "message": "sidecar.hotstreak.unprocessedCompletion",
  "event_name": "sidecar.hotstreak.unprocessedCompletion.empty",
  "id": "completions-27",
  "timestamp": "2024-02-15T00:46:38.814Z"
}
