[
	{
		"request_id": "236d6edb-0e7d-49c2-8918-7c7d89c5d09d",
		"event": {
			"CodebaseEvent": {
				"context": {
					"variables": [],
					"file_content_map": [
						{
							"file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
							"file_content": "//! We are going to log the UI events, this is mostly for\n//! debugging and having better visibility to what ever is happening\n//! in the symbols\n\nuse crate::{agentic::tool::input::ToolInput, chunking::text_document::Range};\n\nuse super::{\n    events::input::SymbolInputEvent,\n    identifier::SymbolIdentifier,\n    types::{SymbolEventRequest, SymbolLocation},\n};\n\n#[derive(Debug, serde::Serialize)]\npub struct UIEventWithID {\n    request_id: String,\n    event: UIEvent,\n}\n\nimpl UIEventWithID {\n    pub fn start_long_context_search(request_id: String) -> Self {\n        Self {\n            request_id: request_id.to_owned(),\n            event: UIEvent::FrameworkEvent(FrameworkEvent::LongContextSearchStart(request_id)),\n        }\n    }\n\n    pub fn finish_long_context_search(request_id: String) -> Self {\n        Self {\n            request_id: request_id.to_owned(),\n            event: UIEvent::FrameworkEvent(FrameworkEvent::LongContextSearchFinished(request_id)),\n        }\n    }\n\n    pub fn finish_edit_request(request_id: String) -> Self {\n        Self {\n            request_id: request_id.to_owned(),\n            event: UIEvent::EditRequestFinished(request_id),\n        }\n    }\n    pub fn from_tool_event(request_id: String, input: ToolInput) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::from(input),\n        }\n    }\n\n    /// Repo map search start\n    pub fn repo_map_gen_start(request_id: String) -> Self {\n        Self {\n            request_id: request_id.to_owned(),\n            event: UIEvent::FrameworkEvent(FrameworkEvent::RepoMapGenerationStart(request_id)),\n        }\n    }\n\n    /// Repo map generation end\n    pub fn repo_map_gen_end(request_id: String) -> Self {\n        Self {\n            request_id: request_id.to_owned(),\n            event: UIEvent::FrameworkEvent(FrameworkEvent::RepoMapGenerationFinished(request_id)),\n        }\n    }\n\n    pub fn from_symbol_event(request_id: String, input: SymbolEventRequest) -> Self {\n        Self {\n            request_id: request_id,\n            event: UIEvent::SymbolEvent(input),\n        }\n    }\n\n    pub fn for_codebase_event(request_id: String, input: SymbolInputEvent) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::CodebaseEvent(input),\n        }\n    }\n\n    pub fn symbol_location(request_id: String, symbol_location: SymbolLocation) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolLoctationUpdate(symbol_location),\n        }\n    }\n\n    pub fn sub_symbol_step(\n        request_id: String,\n        sub_symbol_request: SymbolEventSubStepRequest,\n    ) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolEventSubStep(sub_symbol_request),\n        }\n    }\n\n    pub fn probe_answer_event(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        probe_answer: String,\n    ) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolEventSubStep(SymbolEventSubStepRequest::new(\n                symbol_identifier,\n                SymbolEventSubStep::Probe(SymbolEventProbeRequest::ProbeAnswer(probe_answer)),\n            )),\n        }\n    }\n\n    pub fn probing_started_event(request_id: String) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::RequestEvent(RequestEvents::ProbingStart),\n        }\n    }\n\n    pub fn probing_finished_event(request_id: String, response: String) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::RequestEvent(RequestEvents::ProbeFinished(\n                RequestEventProbeFinished::new(response),\n            )),\n        }\n    }\n\n    pub fn range_selection_for_edit(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n    ) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolEventSubStep(\n                SymbolEventSubStepRequest::range_selection_for_edit(\n                    symbol_identifier,\n                    fs_file_path,\n                    range,\n                ),\n            ),\n        }\n    }\n\n    pub fn edited_code(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        edited_code: String,\n    ) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolEventSubStep(SymbolEventSubStepRequest::edited_code(\n                symbol_identifier,\n                range,\n                fs_file_path,\n                edited_code,\n            )),\n        }\n    }\n\n    pub fn code_correctness_action(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        tool_use_thinking: String,\n    ) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolEventSubStep(SymbolEventSubStepRequest::code_correctness_action(\n                symbol_identifier,\n                range,\n                fs_file_path,\n                tool_use_thinking,\n            )),\n        }\n    }\n\n    /// Sends the initial search event to the editor\n    pub fn initial_search_symbol_event(\n        request_id: String,\n        symbols: Vec<InitialSearchSymbolInformation>,\n    ) -> Self {\n        Self {\n            request_id: request_id.to_owned(),\n            event: UIEvent::FrameworkEvent(FrameworkEvent::InitialSearchSymbols(\n                InitialSearchSymbolEvent::new(request_id, symbols),\n            )),\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub enum UIEvent {\n    SymbolEvent(SymbolEventRequest),\n    ToolEvent(ToolInput),\n    CodebaseEvent(SymbolInputEvent),\n    SymbolLoctationUpdate(SymbolLocation),\n    SymbolEventSubStep(SymbolEventSubStepRequest),\n    RequestEvent(RequestEvents),\n    EditRequestFinished(String),\n    FrameworkEvent(FrameworkEvent),\n}\n\nimpl From<SymbolEventRequest> for UIEvent {\n    fn from(req: SymbolEventRequest) -> Self {\n        UIEvent::SymbolEvent(req)\n    }\n}\n\nimpl From<ToolInput> for UIEvent {\n    fn from(input: ToolInput) -> Self {\n        UIEvent::ToolEvent(input)\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub enum SymbolEventProbeRequest {\n    SubSymbolSelection,\n    ProbeDeeperSymbol,\n    /// The final answer for the probe is sent via this event\n    ProbeAnswer(String),\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct SymbolEventGoToDefinitionRequest {\n    fs_file_path: String,\n    range: Range,\n    thinking: String,\n}\n\nimpl SymbolEventGoToDefinitionRequest {\n    fn new(fs_file_path: String, range: Range, thinking: String) -> Self {\n        Self {\n            fs_file_path,\n            range,\n            thinking,\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct RangeSelectionForEditRequest {\n    range: Range,\n    fs_file_path: String,\n}\n\nimpl RangeSelectionForEditRequest {\n    pub fn new(range: Range, fs_file_path: String) -> Self {\n        Self {\n            range,\n            fs_file_path,\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct InsertCodeForEditRequest {\n    range: Range,\n    fs_file_path: String,\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct EditedCodeForEditRequest {\n    range: Range,\n    fs_file_path: String,\n    new_code: String,\n}\n\nimpl EditedCodeForEditRequest {\n    pub fn new(range: Range, fs_file_path: String, new_code: String) -> Self {\n        Self {\n            range,\n            fs_file_path,\n            new_code,\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct CodeCorrectionToolSelection {\n    range: Range,\n    fs_file_path: String,\n    tool_use_thinking: String,\n}\n\nimpl CodeCorrectionToolSelection {\n    pub fn new(range: Range, fs_file_path: String, tool_use_thinking: String) -> Self {\n        Self {\n            range,\n            fs_file_path,\n            tool_use_thinking,\n        }\n    }\n}\n\n/// We have range selection and then the edited code, we should also show the\n/// events which the AI is using for the tool correction and whats it is planning\n/// on doing for that\n#[derive(Debug, serde::Serialize)]\npub enum SymbolEventEditRequest {\n    RangeSelectionForEdit(RangeSelectionForEditRequest),\n    /// We might be inserting code at a line which is a new symbol by itself\n    InsertCode(InsertCodeForEditRequest),\n    EditCode(EditedCodeForEditRequest),\n    CodeCorrectionTool(CodeCorrectionToolSelection),\n}\n\n#[derive(Debug, serde::Serialize)]\npub enum SymbolEventSubStep {\n    Probe(SymbolEventProbeRequest),\n    GoToDefinition(SymbolEventGoToDefinitionRequest),\n    Edit(SymbolEventEditRequest),\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct SymbolEventSubStepRequest {\n    symbol_identifier: SymbolIdentifier,\n    event: SymbolEventSubStep,\n}\n\nimpl SymbolEventSubStepRequest {\n    pub fn new(symbol_identifier: SymbolIdentifier, event: SymbolEventSubStep) -> Self {\n        Self {\n            symbol_identifier,\n            event,\n        }\n    }\n\n    pub fn probe_answer(symbol_identifier: SymbolIdentifier, answer: String) -> Self {\n        Self {\n            symbol_identifier,\n            event: SymbolEventSubStep::Probe(SymbolEventProbeRequest::ProbeAnswer(answer)),\n        }\n    }\n\n    pub fn go_to_definition_request(\n        symbol_identifier: SymbolIdentifier,\n        fs_file_path: String,\n        range: Range,\n        thinking: String,\n    ) -> Self {\n        Self {\n            symbol_identifier,\n            event: SymbolEventSubStep::GoToDefinition(SymbolEventGoToDefinitionRequest::new(\n                fs_file_path,\n                range,\n                thinking,\n            )),\n        }\n    }\n\n    pub fn range_selection_for_edit(\n        symbol_identifier: SymbolIdentifier,\n        fs_file_path: String,\n        range: Range,\n    ) -> Self {\n        Self {\n            symbol_identifier,\n            event: SymbolEventSubStep::Edit(SymbolEventEditRequest::RangeSelectionForEdit(\n                RangeSelectionForEditRequest::new(range, fs_file_path),\n            )),\n        }\n    }\n\n    pub fn edited_code(\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        edited_code: String,\n    ) -> Self {\n        Self {\n            symbol_identifier,\n            event: SymbolEventSubStep::Edit(SymbolEventEditRequest::EditCode(\n                EditedCodeForEditRequest::new(range, fs_file_path, edited_code),\n            )),\n        }\n    }\n\n    pub fn code_correctness_action(\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        tool_use_thinking: String,\n    ) -> Self {\n        Self {\n            symbol_identifier,\n            event: SymbolEventSubStep::Edit(SymbolEventEditRequest::CodeCorrectionTool(\n                CodeCorrectionToolSelection::new(range, fs_file_path, tool_use_thinking),\n            )),\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct RequestEventProbeFinished {\n    reply: String,\n}\n\nimpl RequestEventProbeFinished {\n    pub fn new(reply: String) -> Self {\n        Self { reply }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub enum RequestEvents {\n    ProbingStart,\n    ProbeFinished(RequestEventProbeFinished),\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct InitialSearchSymbolInformation {\n    symbol_name: String,\n    fs_file_path: Option<String>,\n    is_new: bool,\n    thinking: String,\n    // send over the range of this symbol\n    range: Option<Range>,\n}\n\nimpl InitialSearchSymbolInformation {\n    pub fn new(\n        symbol_name: String,\n        fs_file_path: Option<String>,\n        is_new: bool,\n        thinking: String,\n        range: Option<Range>,\n    ) -> Self {\n        Self {\n            symbol_name,\n            fs_file_path,\n            is_new,\n            thinking,\n            range,\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct InitialSearchSymbolEvent {\n    request_id: String,\n    symbols: Vec<InitialSearchSymbolInformation>,\n}\n\nimpl InitialSearchSymbolEvent {\n    pub fn new(request_id: String, symbols: Vec<InitialSearchSymbolInformation>) -> Self {\n        Self {\n            request_id,\n            symbols,\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub enum FrameworkEvent {\n    RepoMapGenerationStart(String),\n    RepoMapGenerationFinished(String),\n    LongContextSearchStart(String),\n    LongContextSearchFinished(String),\n    InitialSearchSymbols(InitialSearchSymbolEvent),\n}\n",
							"language": "rust"
						}
					],
					"terminal_selection": null,
					"folder_paths": []
				},
				"llm": "ClaudeSonnet",
				"provider": "Anthropic",
				"api_keys": {
					"Anthropic": {
						"api_key": "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"
					}
				},
				"user_query": "Add a comment to UIEventWithID",
				"request_id": "236d6edb-0e7d-49c2-8918-7c7d89c5d09d",
				"swe_bench_test_endpoint": null,
				"repo_map_fs_path": null,
				"gcloud_access_token": null,
				"swe_bench_id": null,
				"swe_bench_git_dname": null,
				"swe_bench_code_editing": null,
				"swe_bench_gemini_api_keys": null,
				"swe_bench_long_context_editing": null,
				"full_symbol_edit": true,
				"codebase_search": false,
				"root_directory": "/Users/guglielmodanna/Repo/sidecar",
				"fast_code_symbol_search_llm": {
					"llm": "Llama3_1_70bInstruct",
					"provider": "FireworksAI",
					"api_key": {
						"FireworksAI": {
							"api_key": "s8Y7yIXdL0lMeHHgvbZXS77oGtBAHAsfsLviL2AKnzuGpg1n"
						}
					}
				}
			}
		}
	},
	{
		"request_id": "236d6edb-0e7d-49c2-8918-7c7d89c5d09d",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "236d6edb-0e7d-49c2-8918-7c7d89c5d09d",
		"event": {
			"ToolEvent": {
				"RequestImportantSybmolsCodeWide": {
					"user_context": {
						"variables": [],
						"file_content_map": [
							{
								"file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
								"file_content": "//! We are going to log the UI events, this is mostly for\n//! debugging and having better visibility to what ever is happening\n//! in the symbols\n\nuse crate::{agentic::tool::input::ToolInput, chunking::text_document::Range};\n\nuse super::{\n    events::input::SymbolInputEvent,\n    identifier::SymbolIdentifier,\n    types::{SymbolEventRequest, SymbolLocation},\n};\n\n#[derive(Debug, serde::Serialize)]\npub struct UIEventWithID {\n    request_id: String,\n    event: UIEvent,\n}\n\nimpl UIEventWithID {\n    pub fn start_long_context_search(request_id: String) -> Self {\n        Self {\n            request_id: request_id.to_owned(),\n            event: UIEvent::FrameworkEvent(FrameworkEvent::LongContextSearchStart(request_id)),\n        }\n    }\n\n    pub fn finish_long_context_search(request_id: String) -> Self {\n        Self {\n            request_id: request_id.to_owned(),\n            event: UIEvent::FrameworkEvent(FrameworkEvent::LongContextSearchFinished(request_id)),\n        }\n    }\n\n    pub fn finish_edit_request(request_id: String) -> Self {\n        Self {\n            request_id: request_id.to_owned(),\n            event: UIEvent::EditRequestFinished(request_id),\n        }\n    }\n    pub fn from_tool_event(request_id: String, input: ToolInput) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::from(input),\n        }\n    }\n\n    /// Repo map search start\n    pub fn repo_map_gen_start(request_id: String) -> Self {\n        Self {\n            request_id: request_id.to_owned(),\n            event: UIEvent::FrameworkEvent(FrameworkEvent::RepoMapGenerationStart(request_id)),\n        }\n    }\n\n    /// Repo map generation end\n    pub fn repo_map_gen_end(request_id: String) -> Self {\n        Self {\n            request_id: request_id.to_owned(),\n            event: UIEvent::FrameworkEvent(FrameworkEvent::RepoMapGenerationFinished(request_id)),\n        }\n    }\n\n    pub fn from_symbol_event(request_id: String, input: SymbolEventRequest) -> Self {\n        Self {\n            request_id: request_id,\n            event: UIEvent::SymbolEvent(input),\n        }\n    }\n\n    pub fn for_codebase_event(request_id: String, input: SymbolInputEvent) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::CodebaseEvent(input),\n        }\n    }\n\n    pub fn symbol_location(request_id: String, symbol_location: SymbolLocation) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolLoctationUpdate(symbol_location),\n        }\n    }\n\n    pub fn sub_symbol_step(\n        request_id: String,\n        sub_symbol_request: SymbolEventSubStepRequest,\n    ) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolEventSubStep(sub_symbol_request),\n        }\n    }\n\n    pub fn probe_answer_event(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        probe_answer: String,\n    ) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolEventSubStep(SymbolEventSubStepRequest::new(\n                symbol_identifier,\n                SymbolEventSubStep::Probe(SymbolEventProbeRequest::ProbeAnswer(probe_answer)),\n            )),\n        }\n    }\n\n    pub fn probing_started_event(request_id: String) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::RequestEvent(RequestEvents::ProbingStart),\n        }\n    }\n\n    pub fn probing_finished_event(request_id: String, response: String) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::RequestEvent(RequestEvents::ProbeFinished(\n                RequestEventProbeFinished::new(response),\n            )),\n        }\n    }\n\n    pub fn range_selection_for_edit(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n    ) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolEventSubStep(\n                SymbolEventSubStepRequest::range_selection_for_edit(\n                    symbol_identifier,\n                    fs_file_path,\n                    range,\n                ),\n            ),\n        }\n    }\n\n    pub fn edited_code(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        edited_code: String,\n    ) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolEventSubStep(SymbolEventSubStepRequest::edited_code(\n                symbol_identifier,\n                range,\n                fs_file_path,\n                edited_code,\n            )),\n        }\n    }\n\n    pub fn code_correctness_action(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        tool_use_thinking: String,\n    ) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolEventSubStep(SymbolEventSubStepRequest::code_correctness_action(\n                symbol_identifier,\n                range,\n                fs_file_path,\n                tool_use_thinking,\n            )),\n        }\n    }\n\n    /// Sends the initial search event to the editor\n    pub fn initial_search_symbol_event(\n        request_id: String,\n        symbols: Vec<InitialSearchSymbolInformation>,\n    ) -> Self {\n        Self {\n            request_id: request_id.to_owned(),\n            event: UIEvent::FrameworkEvent(FrameworkEvent::InitialSearchSymbols(\n                InitialSearchSymbolEvent::new(request_id, symbols),\n            )),\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub enum UIEvent {\n    SymbolEvent(SymbolEventRequest),\n    ToolEvent(ToolInput),\n    CodebaseEvent(SymbolInputEvent),\n    SymbolLoctationUpdate(SymbolLocation),\n    SymbolEventSubStep(SymbolEventSubStepRequest),\n    RequestEvent(RequestEvents),\n    EditRequestFinished(String),\n    FrameworkEvent(FrameworkEvent),\n}\n\nimpl From<SymbolEventRequest> for UIEvent {\n    fn from(req: SymbolEventRequest) -> Self {\n        UIEvent::SymbolEvent(req)\n    }\n}\n\nimpl From<ToolInput> for UIEvent {\n    fn from(input: ToolInput) -> Self {\n        UIEvent::ToolEvent(input)\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub enum SymbolEventProbeRequest {\n    SubSymbolSelection,\n    ProbeDeeperSymbol,\n    /// The final answer for the probe is sent via this event\n    ProbeAnswer(String),\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct SymbolEventGoToDefinitionRequest {\n    fs_file_path: String,\n    range: Range,\n    thinking: String,\n}\n\nimpl SymbolEventGoToDefinitionRequest {\n    fn new(fs_file_path: String, range: Range, thinking: String) -> Self {\n        Self {\n            fs_file_path,\n            range,\n            thinking,\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct RangeSelectionForEditRequest {\n    range: Range,\n    fs_file_path: String,\n}\n\nimpl RangeSelectionForEditRequest {\n    pub fn new(range: Range, fs_file_path: String) -> Self {\n        Self {\n            range,\n            fs_file_path,\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct InsertCodeForEditRequest {\n    range: Range,\n    fs_file_path: String,\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct EditedCodeForEditRequest {\n    range: Range,\n    fs_file_path: String,\n    new_code: String,\n}\n\nimpl EditedCodeForEditRequest {\n    pub fn new(range: Range, fs_file_path: String, new_code: String) -> Self {\n        Self {\n            range,\n            fs_file_path,\n            new_code,\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct CodeCorrectionToolSelection {\n    range: Range,\n    fs_file_path: String,\n    tool_use_thinking: String,\n}\n\nimpl CodeCorrectionToolSelection {\n    pub fn new(range: Range, fs_file_path: String, tool_use_thinking: String) -> Self {\n        Self {\n            range,\n            fs_file_path,\n            tool_use_thinking,\n        }\n    }\n}\n\n/// We have range selection and then the edited code, we should also show the\n/// events which the AI is using for the tool correction and whats it is planning\n/// on doing for that\n#[derive(Debug, serde::Serialize)]\npub enum SymbolEventEditRequest {\n    RangeSelectionForEdit(RangeSelectionForEditRequest),\n    /// We might be inserting code at a line which is a new symbol by itself\n    InsertCode(InsertCodeForEditRequest),\n    EditCode(EditedCodeForEditRequest),\n    CodeCorrectionTool(CodeCorrectionToolSelection),\n}\n\n#[derive(Debug, serde::Serialize)]\npub enum SymbolEventSubStep {\n    Probe(SymbolEventProbeRequest),\n    GoToDefinition(SymbolEventGoToDefinitionRequest),\n    Edit(SymbolEventEditRequest),\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct SymbolEventSubStepRequest {\n    symbol_identifier: SymbolIdentifier,\n    event: SymbolEventSubStep,\n}\n\nimpl SymbolEventSubStepRequest {\n    pub fn new(symbol_identifier: SymbolIdentifier, event: SymbolEventSubStep) -> Self {\n        Self {\n            symbol_identifier,\n            event,\n        }\n    }\n\n    pub fn probe_answer(symbol_identifier: SymbolIdentifier, answer: String) -> Self {\n        Self {\n            symbol_identifier,\n            event: SymbolEventSubStep::Probe(SymbolEventProbeRequest::ProbeAnswer(answer)),\n        }\n    }\n\n    pub fn go_to_definition_request(\n        symbol_identifier: SymbolIdentifier,\n        fs_file_path: String,\n        range: Range,\n        thinking: String,\n    ) -> Self {\n        Self {\n            symbol_identifier,\n            event: SymbolEventSubStep::GoToDefinition(SymbolEventGoToDefinitionRequest::new(\n                fs_file_path,\n                range,\n                thinking,\n            )),\n        }\n    }\n\n    pub fn range_selection_for_edit(\n        symbol_identifier: SymbolIdentifier,\n        fs_file_path: String,\n        range: Range,\n    ) -> Self {\n        Self {\n            symbol_identifier,\n            event: SymbolEventSubStep::Edit(SymbolEventEditRequest::RangeSelectionForEdit(\n                RangeSelectionForEditRequest::new(range, fs_file_path),\n            )),\n        }\n    }\n\n    pub fn edited_code(\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        edited_code: String,\n    ) -> Self {\n        Self {\n            symbol_identifier,\n            event: SymbolEventSubStep::Edit(SymbolEventEditRequest::EditCode(\n                EditedCodeForEditRequest::new(range, fs_file_path, edited_code),\n            )),\n        }\n    }\n\n    pub fn code_correctness_action(\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        tool_use_thinking: String,\n    ) -> Self {\n        Self {\n            symbol_identifier,\n            event: SymbolEventSubStep::Edit(SymbolEventEditRequest::CodeCorrectionTool(\n                CodeCorrectionToolSelection::new(range, fs_file_path, tool_use_thinking),\n            )),\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct RequestEventProbeFinished {\n    reply: String,\n}\n\nimpl RequestEventProbeFinished {\n    pub fn new(reply: String) -> Self {\n        Self { reply }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub enum RequestEvents {\n    ProbingStart,\n    ProbeFinished(RequestEventProbeFinished),\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct InitialSearchSymbolInformation {\n    symbol_name: String,\n    fs_file_path: Option<String>,\n    is_new: bool,\n    thinking: String,\n    // send over the range of this symbol\n    range: Option<Range>,\n}\n\nimpl InitialSearchSymbolInformation {\n    pub fn new(\n        symbol_name: String,\n        fs_file_path: Option<String>,\n        is_new: bool,\n        thinking: String,\n        range: Option<Range>,\n    ) -> Self {\n        Self {\n            symbol_name,\n            fs_file_path,\n            is_new,\n            thinking,\n            range,\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct InitialSearchSymbolEvent {\n    request_id: String,\n    symbols: Vec<InitialSearchSymbolInformation>,\n}\n\nimpl InitialSearchSymbolEvent {\n    pub fn new(request_id: String, symbols: Vec<InitialSearchSymbolInformation>) -> Self {\n        Self {\n            request_id,\n            symbols,\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub enum FrameworkEvent {\n    RepoMapGenerationStart(String),\n    RepoMapGenerationFinished(String),\n    LongContextSearchStart(String),\n    LongContextSearchFinished(String),\n    InitialSearchSymbols(InitialSearchSymbolEvent),\n}\n",
								"language": "rust"
							}
						],
						"terminal_selection": null,
						"folder_paths": []
					},
					"user_query": "Add a comment to UIEventWithID",
					"llm_type": "Llama3_1_70bInstruct",
					"llm_provider": "FireworksAI",
					"api_key": {
						"FireworksAI": {
							"api_key": "s8Y7yIXdL0lMeHHgvbZXS77oGtBAHAsfsLviL2AKnzuGpg1n"
						}
					},
					"file_extension_filters": [],
					"root_request_id": "236d6edb-0e7d-49c2-8918-7c7d89c5d09d",
					"symbol_outline": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\n#[derive(Debug, serde::Serialize)]\npub struct UIEventWithID {\n    request_id: String,\n    event: UIEvent,\n}\nFILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\nimpl UIEventWithID {\n    /// Repo map search start\n    /// Repo map generation end\n    /// Sends the initial search event to the editor\n    pub fn start_long_context_search(request_id: String) -> Self {\n    pub fn finish_long_context_search(request_id: String) -> Self {\n    pub fn finish_edit_request(request_id: String) -> Self {\n    pub fn from_tool_event(request_id: String, input: ToolInput) -> Self {\n    pub fn repo_map_gen_start(request_id: String) -> Self {\n    pub fn repo_map_gen_end(request_id: String) -> Self {\n    pub fn from_symbol_event(request_id: String, input: SymbolEventRequest) -> Self {\n    pub fn for_codebase_event(request_id: String, input: SymbolInputEvent) -> Self {\n    pub fn symbol_location(request_id: String, symbol_location: SymbolLocation) -> Self {\n    pub fn sub_symbol_step(\n        request_id: String,\n        sub_symbol_request: SymbolEventSubStepRequest,\n    ) -> Self {\n    pub fn probe_answer_event(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        probe_answer: String,\n    ) -> Self {\n    pub fn probing_started_event(request_id: String) -> Self {\n    pub fn probing_finished_event(request_id: String, response: String) -> Self {\n    pub fn range_selection_for_edit(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n    ) -> Self {\n    pub fn edited_code(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        edited_code: String,\n    ) -> Self {\n    pub fn code_correctness_action(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        tool_use_thinking: String,\n    ) -> Self {\n    pub fn initial_search_symbol_event(\n        request_id: String,\n        symbols: Vec<InitialSearchSymbolInformation>,\n    ) -> Self {\n}\nFILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\n#[derive(Debug, serde::Serialize)]\npub enum UIEvent {\n    SymbolEvent(SymbolEventRequest),\n    ToolEvent(ToolInput),\n    CodebaseEvent(SymbolInputEvent),\n    SymbolLoctationUpdate(SymbolLocation),\n    SymbolEventSubStep(SymbolEventSubStepRequest),\n    RequestEvent(RequestEvents),\n    EditRequestFinished(String),\n    FrameworkEvent(FrameworkEvent),\n}\nFILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\nimpl From<SymbolEventRequest> for UIEvent {\n    fn from(req: SymbolEventRequest) -> Self {\n}\nFILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\nimpl From<ToolInput> for UIEvent {\n    fn from(input: ToolInput) -> Self {\n}\nFILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\n#[derive(Debug, serde::Serialize)]\npub enum SymbolEventProbeRequest {\n    SubSymbolSelection,\n    ProbeDeeperSymbol,\n    /// The final answer for the probe is sent via this event\n    ProbeAnswer(String),\n}\nFILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\n#[derive(Debug, serde::Serialize)]\npub struct SymbolEventGoToDefinitionRequest {\n    fs_file_path: String,\n    range: Range,\n    thinking: String,\n}\nFILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\nimpl SymbolEventGoToDefinitionRequest {\n    fn new(fs_file_path: String, range: Range, thinking: String) -> Self {\n}\nFILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\n#[derive(Debug, serde::Serialize)]\npub struct RangeSelectionForEditRequest {\n    range: Range,\n    fs_file_path: String,\n}\nFILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\nimpl RangeSelectionForEditRequest {\n    pub fn new(range: Range, fs_file_path: String) -> Self {\n}\nFILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\n#[derive(Debug, serde::Serialize)]\npub struct InsertCodeForEditRequest {\n    range: Range,\n    fs_file_path: String,\n}\nFILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\n#[derive(Debug, serde::Serialize)]\npub struct EditedCodeForEditRequest {\n    range: Range,\n    fs_file_path: String,\n    new_code: String,\n}\nFILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\nimpl EditedCodeForEditRequest {\n    pub fn new(range: Range, fs_file_path: String, new_code: String) -> Self {\n}\nFILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\n#[derive(Debug, serde::Serialize)]\npub struct CodeCorrectionToolSelection {\n    range: Range,\n    fs_file_path: String,\n    tool_use_thinking: String,\n}\nFILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\nimpl CodeCorrectionToolSelection {\n    pub fn new(range: Range, fs_file_path: String, tool_use_thinking: String) -> Self {\n}\nFILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\n#[derive(Debug, serde::Serialize)]\npub enum SymbolEventEditRequest {\n    RangeSelectionForEdit(RangeSelectionForEditRequest),\n    /// We might be inserting code at a line which is a new symbol by itself\n    InsertCode(InsertCodeForEditRequest),\n    EditCode(EditedCodeForEditRequest),\n    CodeCorrectionTool(CodeCorrectionToolSelection),\n}\nFILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\n#[derive(Debug, serde::Serialize)]\npub enum SymbolEventSubStep {\n    Probe(SymbolEventProbeRequest),\n    GoToDefinition(SymbolEventGoToDefinitionRequest),\n    Edit(SymbolEventEditRequest),\n}\nFILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\n#[derive(Debug, serde::Serialize)]\npub struct SymbolEventSubStepRequest {\n    symbol_identifier: SymbolIdentifier,\n    event: SymbolEventSubStep,\n}\nFILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\nimpl SymbolEventSubStepRequest {\n    pub fn new(symbol_identifier: SymbolIdentifier, event: SymbolEventSubStep) -> Self {\n    pub fn probe_answer(symbol_identifier: SymbolIdentifier, answer: String) -> Self {\n    pub fn go_to_definition_request(\n        symbol_identifier: SymbolIdentifier,\n        fs_file_path: String,\n        range: Range,\n        thinking: String,\n    ) -> Self {\n    pub fn range_selection_for_edit(\n        symbol_identifier: SymbolIdentifier,\n        fs_file_path: String,\n        range: Range,\n    ) -> Self {\n    pub fn edited_code(\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        edited_code: String,\n    ) -> Self {\n    pub fn code_correctness_action(\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        tool_use_thinking: String,\n    ) -> Self {\n}\nFILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\n#[derive(Debug, serde::Serialize)]\npub struct RequestEventProbeFinished {\n    reply: String,\n}\nFILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\nimpl RequestEventProbeFinished {\n    pub fn new(reply: String) -> Self {\n}\nFILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\n#[derive(Debug, serde::Serialize)]\npub enum RequestEvents {\n    ProbingStart,\n    ProbeFinished(RequestEventProbeFinished),\n}\nFILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\n#[derive(Debug, serde::Serialize)]\npub struct InitialSearchSymbolInformation {\n    symbol_name: String,\n    fs_file_path: Option<String>,\n    is_new: bool,\n    thinking: String,\n    // send over the range of this symbol\n    range: Option<Range>,\n}\nFILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\nimpl InitialSearchSymbolInformation {\n    pub fn new(\n        symbol_name: String,\n        fs_file_path: Option<String>,\n        is_new: bool,\n        thinking: String,\n        range: Option<Range>,\n    ) -> Self {\n}\nFILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\n#[derive(Debug, serde::Serialize)]\npub struct InitialSearchSymbolEvent {\n    request_id: String,\n    symbols: Vec<InitialSearchSymbolInformation>,\n}\nFILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\nimpl InitialSearchSymbolEvent {\n    pub fn new(request_id: String, symbols: Vec<InitialSearchSymbolInformation>) -> Self {\n}\nFILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\n#[derive(Debug, serde::Serialize)]\npub enum FrameworkEvent {\n    RepoMapGenerationStart(String),\n    RepoMapGenerationFinished(String),\n    LongContextSearchStart(String),\n    LongContextSearchFinished(String),\n    InitialSearchSymbols(InitialSearchSymbolEvent),\n}"
				}
			}
		}
	},
	{
		"request_id": "236d6edb-0e7d-49c2-8918-7c7d89c5d09d",
		"event": {
			"FrameworkEvent": {
				"InitialSearchSymbols": {
					"request_id": "236d6edb-0e7d-49c2-8918-7c7d89c5d09d",
					"symbols": [
						{
							"symbol_name": "UIEventWithID",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
							"is_new": false,
							"thinking": "Add a comment to UIEventWithID to describe its purpose"
						}
					]
				}
			}
		}
	},
	{
		"request_id": "236d6edb-0e7d-49c2-8918-7c7d89c5d09d",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "236d6edb-0e7d-49c2-8918-7c7d89c5d09d",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "236d6edb-0e7d-49c2-8918-7c7d89c5d09d",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 13,
						"character": 24,
						"byteOffset": 422
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "236d6edb-0e7d-49c2-8918-7c7d89c5d09d",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "236d6edb-0e7d-49c2-8918-7c7d89c5d09d",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "236d6edb-0e7d-49c2-8918-7c7d89c5d09d",
		"event": {
			"SymbolEvent": {
				"symbol": {
					"symbol_name": "UIEventWithID",
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs"
				},
				"event": {
					"InitialRequest": {
						"original_question": "Add a comment to UIEventWithID",
						"plan_if_available": "<step id = 1>\n<code_symbol>UIEventWithID</code_symbol>\n<file_path>/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs</file_path>\n<high_level_plan>\nAdd a comment to UIEventWithID to describe its purpose\n</high_level_plan>\n</step>",
						"history": [],
						"full_symbol_request": true
					}
				},
				"tool_properties": {
					"swe_bench_test_endpoint": null,
					"swe_bench_code_editing_llm": null,
					"swe_bench_reranking_llm": null,
					"swe_bench_long_context_editing_llm": null,
					"full_symbol_request": true,
					"fast_code_symbol_search": {
						"llm": "Llama3_1_70bInstruct",
						"provider": "FireworksAI",
						"api_key": {
							"FireworksAI": {
								"api_key": "s8Y7yIXdL0lMeHHgvbZXS77oGtBAHAsfsLviL2AKnzuGpg1n"
							}
						}
					}
				}
			}
		}
	},
	{
		"request_id": "236d6edb-0e7d-49c2-8918-7c7d89c5d09d",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "236d6edb-0e7d-49c2-8918-7c7d89c5d09d",
		"event": {
			"SymbolLoctationUpdate": {
				"snippet": {
					"range": {
						"startPosition": {
							"line": 12,
							"character": 0,
							"byteOffset": 363
						},
						"endPosition": {
							"line": 16,
							"character": 1,
							"byteOffset": 470
						}
					},
					"symbol_name": "UIEventWithID",
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"content": "#[derive(Debug, serde::Serialize)]\npub struct UIEventWithID {\n    request_id: String,\n    event: UIEvent,\n}",
					"language": null,
					"outline_node_content": {
						"range": {
							"startPosition": {
								"line": 12,
								"character": 0,
								"byteOffset": 363
							},
							"endPosition": {
								"line": 16,
								"character": 1,
								"byteOffset": 470
							}
						},
						"name": "UIEventWithID",
						"type": "ClassDefinition",
						"content": "#[derive(Debug, serde::Serialize)]\npub struct UIEventWithID {\n    request_id: String,\n    event: UIEvent,\n}",
						"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
						"identifier_range": {
							"startPosition": {
								"line": 13,
								"character": 11,
								"byteOffset": 409
							},
							"endPosition": {
								"line": 13,
								"character": 24,
								"byteOffset": 422
							}
						},
						"body_range": {
							"startPosition": {
								"line": 12,
								"character": 0,
								"byteOffset": 363
							},
							"endPosition": {
								"line": 16,
								"character": 1,
								"byteOffset": 470
							}
						},
						"language": "rust",
						"trait_implementation": null
					}
				},
				"symbol_identifier": {
					"symbol_name": "UIEventWithID",
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs"
				}
			}
		}
	},
	{
		"request_id": "236d6edb-0e7d-49c2-8918-7c7d89c5d09d",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "236d6edb-0e7d-49c2-8918-7c7d89c5d09d",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 13,
						"character": 24,
						"byteOffset": 422
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "236d6edb-0e7d-49c2-8918-7c7d89c5d09d",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "236d6edb-0e7d-49c2-8918-7c7d89c5d09d",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "236d6edb-0e7d-49c2-8918-7c7d89c5d09d",
		"event": {
			"ToolEvent": {
				"FilterCodeSnippetsForEditingSingleSymbols": {
					"xml_symbol": "<rerank_entry>\n<id>\n0\n</id>\n<file_path>\n/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs:12-16\n</file_path>\n<content>\n```\nFILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\n#[derive(Debug, serde::Serialize)]\npub struct UIEventWithID {\n    request_id: String,\n    event: UIEvent,\n}\n```\n</content>\n</rerank_entry>\n<rerank_entry>\n<id>\n1\n</id>\n<file_path>\n/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs:18-189\n</file_path>\n<content>\n```\nFILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\nimpl UIEventWithID {\n    /// Repo map search start\n    /// Repo map generation end\n    /// Sends the initial search event to the editor\n    pub fn start_long_context_search(request_id: String) -> Self {\n    pub fn finish_long_context_search(request_id: String) -> Self {\n    pub fn finish_edit_request(request_id: String) -> Self {\n    pub fn from_tool_event(request_id: String, input: ToolInput) -> Self {\n    pub fn repo_map_gen_start(request_id: String) -> Self {\n    pub fn repo_map_gen_end(request_id: String) -> Self {\n    pub fn from_symbol_event(request_id: String, input: SymbolEventRequest) -> Self {\n    pub fn for_codebase_event(request_id: String, input: SymbolInputEvent) -> Self {\n    pub fn symbol_location(request_id: String, symbol_location: SymbolLocation) -> Self {\n    pub fn sub_symbol_step(\n        request_id: String,\n        sub_symbol_request: SymbolEventSubStepRequest,\n    ) -> Self {\n    pub fn probe_answer_event(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        probe_answer: String,\n    ) -> Self {\n    pub fn probing_started_event(request_id: String) -> Self {\n    pub fn probing_finished_event(request_id: String, response: String) -> Self {\n    pub fn range_selection_for_edit(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n    ) -> Self {\n    pub fn edited_code(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        edited_code: String,\n    ) -> Self {\n    pub fn code_correctness_action(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        tool_use_thinking: String,\n    ) -> Self {\n    pub fn initial_search_symbol_event(\n        request_id: String,\n        symbols: Vec<InitialSearchSymbolInformation>,\n    ) -> Self {\n}\n```\n</content>\n</rerank_entry>",
					"query": "Add a comment to UIEventWithID",
					"llm": "GeminiProFlash",
					"provider": "GoogleAIStudio",
					"api_key": {
						"GoogleAIStudio": {
							"api_key": "AIzaSyCMkKfNkmjF8rTOWMg53NiYmz0Zv6xbfsE"
						}
					},
					"root_request_id": "236d6edb-0e7d-49c2-8918-7c7d89c5d09d"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"SymbolEvent": {
				"symbol": {
					"symbol_name": "UIEventWithID",
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs"
				},
				"event": {
					"Edit": {
						"symbols": [
							{
								"outline": false,
								"range": {
									"startPosition": {
										"line": 12,
										"character": 0,
										"byteOffset": 363
									},
									"endPosition": {
										"line": 16,
										"character": 1,
										"byteOffset": 470
									}
								},
								"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
								"symbol_name": "UIEventWithID",
								"instructions": [
									"Original user query:\nAdd a comment to UIEventWithID\n\nEdit selection reason:\nThis code defines the `UIEventWithID` struct. Adding a comment here will provide clarity on its purpose and usage."
								],
								"is_new": false,
								"is_full_edit": true
							}
						],
						"symbol_identifier": {
							"symbol_name": "UIEventWithID",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs"
						},
						"history": [
							{
								"symbol": "UIEventWithID",
								"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
								"request": "Add a comment to UIEventWithID"
							}
						]
					}
				},
				"tool_properties": {
					"swe_bench_test_endpoint": null,
					"swe_bench_code_editing_llm": null,
					"swe_bench_reranking_llm": null,
					"swe_bench_long_context_editing_llm": null,
					"full_symbol_request": true,
					"fast_code_symbol_search": {
						"llm": "Llama3_1_70bInstruct",
						"provider": "FireworksAI",
						"api_key": {
							"FireworksAI": {
								"api_key": "s8Y7yIXdL0lMeHHgvbZXS77oGtBAHAsfsLviL2AKnzuGpg1n"
							}
						}
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"SymbolLoctationUpdate": {
				"snippet": {
					"range": {
						"startPosition": {
							"line": 12,
							"character": 0,
							"byteOffset": 363
						},
						"endPosition": {
							"line": 16,
							"character": 1,
							"byteOffset": 470
						}
					},
					"symbol_name": "UIEventWithID",
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"content": "#[derive(Debug, serde::Serialize)]\npub struct UIEventWithID {\n    request_id: String,\n    event: UIEvent,\n}",
					"language": null,
					"outline_node_content": {
						"range": {
							"startPosition": {
								"line": 12,
								"character": 0,
								"byteOffset": 363
							},
							"endPosition": {
								"line": 16,
								"character": 1,
								"byteOffset": 470
							}
						},
						"name": "UIEventWithID",
						"type": "ClassDefinition",
						"content": "#[derive(Debug, serde::Serialize)]\npub struct UIEventWithID {\n    request_id: String,\n    event: UIEvent,\n}",
						"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
						"identifier_range": {
							"startPosition": {
								"line": 13,
								"character": 11,
								"byteOffset": 409
							},
							"endPosition": {
								"line": 13,
								"character": 24,
								"byteOffset": 422
							}
						},
						"body_range": {
							"startPosition": {
								"line": 12,
								"character": 0,
								"byteOffset": 363
							},
							"endPosition": {
								"line": 16,
								"character": 1,
								"byteOffset": 470
							}
						},
						"language": "rust",
						"trait_implementation": null
					}
				},
				"symbol_identifier": {
					"symbol_name": "UIEventWithID",
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 13,
						"character": 24,
						"byteOffset": 422
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 16,
						"character": 1,
						"byteOffset": 470
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 16,
						"character": 1,
						"byteOffset": 470
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 189,
						"character": 1,
						"byteOffset": 5544
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 189,
						"character": 1,
						"byteOffset": 5544
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 16,
						"character": 1,
						"byteOffset": 470
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 189,
						"character": 1,
						"byteOffset": 5544
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 16,
						"character": 1,
						"byteOffset": 470
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 189,
						"character": 1,
						"byteOffset": 5544
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 24,
						"character": 5,
						"byteOffset": 733
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 31,
						"character": 5,
						"byteOffset": 979
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 38,
						"character": 5,
						"byteOffset": 1180
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 44,
						"character": 5,
						"byteOffset": 1351
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 24,
						"character": 5,
						"byteOffset": 733
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 31,
						"character": 5,
						"byteOffset": 979
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 38,
						"character": 5,
						"byteOffset": 1180
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 44,
						"character": 5,
						"byteOffset": 1351
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 52,
						"character": 5,
						"byteOffset": 1616
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 60,
						"character": 5,
						"byteOffset": 1884
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 67,
						"character": 5,
						"byteOffset": 2086
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 74,
						"character": 5,
						"byteOffset": 2277
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 52,
						"character": 5,
						"byteOffset": 1616
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 81,
						"character": 5,
						"byteOffset": 2491
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 67,
						"character": 5,
						"byteOffset": 2086
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 60,
						"character": 5,
						"byteOffset": 1884
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 74,
						"character": 5,
						"byteOffset": 2277
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 91,
						"character": 5,
						"byteOffset": 2742
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 105,
						"character": 5,
						"byteOffset": 3173
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 112,
						"character": 5,
						"byteOffset": 3363
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 81,
						"character": 5,
						"byteOffset": 2491
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 121,
						"character": 5,
						"byteOffset": 3646
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 112,
						"character": 5,
						"byteOffset": 3363
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 91,
						"character": 5,
						"byteOffset": 2742
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 105,
						"character": 5,
						"byteOffset": 3173
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 139,
						"character": 5,
						"byteOffset": 4131
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 157,
						"character": 5,
						"byteOffset": 4601
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 175,
						"character": 5,
						"byteOffset": 5107
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 121,
						"character": 5,
						"byteOffset": 3646
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 188,
						"character": 5,
						"byteOffset": 5542
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 139,
						"character": 5,
						"byteOffset": 4131
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 157,
						"character": 5,
						"byteOffset": 4601
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 175,
						"character": 5,
						"byteOffset": 5107
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 201,
						"character": 1,
						"byteOffset": 5897
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 201,
						"character": 1,
						"byteOffset": 5897
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 207,
						"character": 1,
						"byteOffset": 6031
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 188,
						"character": 5,
						"byteOffset": 5542
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 207,
						"character": 1,
						"byteOffset": 6031
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 201,
						"character": 1,
						"byteOffset": 5897
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 201,
						"character": 1,
						"byteOffset": 5897
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 207,
						"character": 1,
						"byteOffset": 6031
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 206,
						"character": 5,
						"byteOffset": 6029
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 213,
						"character": 1,
						"byteOffset": 6149
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 213,
						"character": 1,
						"byteOffset": 6149
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 207,
						"character": 1,
						"byteOffset": 6031
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 212,
						"character": 5,
						"byteOffset": 6147
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 206,
						"character": 5,
						"byteOffset": 6029
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 213,
						"character": 1,
						"byteOffset": 6149
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 213,
						"character": 1,
						"byteOffset": 6149
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 221,
						"character": 1,
						"byteOffset": 6356
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 221,
						"character": 1,
						"byteOffset": 6356
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 228,
						"character": 1,
						"byteOffset": 6506
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 212,
						"character": 5,
						"byteOffset": 6147
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 228,
						"character": 1,
						"byteOffset": 6506
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 221,
						"character": 1,
						"byteOffset": 6356
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 221,
						"character": 1,
						"byteOffset": 6356
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 228,
						"character": 1,
						"byteOffset": 6506
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 238,
						"character": 1,
						"byteOffset": 6722
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 238,
						"character": 1,
						"byteOffset": 6722
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 237,
						"character": 5,
						"byteOffset": 6720
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 228,
						"character": 1,
						"byteOffset": 6506
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 244,
						"character": 1,
						"byteOffset": 6846
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 238,
						"character": 1,
						"byteOffset": 6722
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 238,
						"character": 1,
						"byteOffset": 6722
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 237,
						"character": 5,
						"byteOffset": 6720
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 244,
						"character": 1,
						"byteOffset": 6846
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 253,
						"character": 1,
						"byteOffset": 7022
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 253,
						"character": 1,
						"byteOffset": 7022
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 244,
						"character": 1,
						"byteOffset": 6846
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 244,
						"character": 1,
						"byteOffset": 6846
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 253,
						"character": 1,
						"byteOffset": 7022
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 252,
						"character": 5,
						"byteOffset": 7020
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 253,
						"character": 1,
						"byteOffset": 7022
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 259,
						"character": 1,
						"byteOffset": 7142
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 259,
						"character": 1,
						"byteOffset": 7142
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 266,
						"character": 1,
						"byteOffset": 7284
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 252,
						"character": 5,
						"byteOffset": 7020
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 266,
						"character": 1,
						"byteOffset": 7284
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 259,
						"character": 1,
						"byteOffset": 7142
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 266,
						"character": 1,
						"byteOffset": 7284
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 259,
						"character": 1,
						"byteOffset": 7142
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 276,
						"character": 1,
						"byteOffset": 7496
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 276,
						"character": 1,
						"byteOffset": 7496
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 275,
						"character": 5,
						"byteOffset": 7494
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 266,
						"character": 1,
						"byteOffset": 7284
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 283,
						"character": 1,
						"byteOffset": 7650
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 276,
						"character": 1,
						"byteOffset": 7496
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 275,
						"character": 5,
						"byteOffset": 7494
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 276,
						"character": 1,
						"byteOffset": 7496
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 283,
						"character": 1,
						"byteOffset": 7650
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 293,
						"character": 1,
						"byteOffset": 7883
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 293,
						"character": 1,
						"byteOffset": 7883
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 283,
						"character": 1,
						"byteOffset": 7650
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 292,
						"character": 5,
						"byteOffset": 7881
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 283,
						"character": 1,
						"byteOffset": 7650
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 293,
						"character": 1,
						"byteOffset": 7883
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 293,
						"character": 1,
						"byteOffset": 7883
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 305,
						"character": 1,
						"byteOffset": 8406
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 305,
						"character": 1,
						"byteOffset": 8406
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 312,
						"character": 1,
						"byteOffset": 8598
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 292,
						"character": 5,
						"byteOffset": 7881
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 305,
						"character": 1,
						"byteOffset": 8406
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 312,
						"character": 1,
						"byteOffset": 8598
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 305,
						"character": 1,
						"byteOffset": 8406
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 312,
						"character": 1,
						"byteOffset": 8598
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 318,
						"character": 1,
						"byteOffset": 8747
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 318,
						"character": 1,
						"byteOffset": 8747
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 391,
						"character": 1,
						"byteOffset": 10859
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 312,
						"character": 1,
						"byteOffset": 8598
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 318,
						"character": 1,
						"byteOffset": 8747
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 318,
						"character": 1,
						"byteOffset": 8747
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 391,
						"character": 1,
						"byteOffset": 10859
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 391,
						"character": 1,
						"byteOffset": 10859
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 326,
						"character": 5,
						"byteOffset": 8951
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 333,
						"character": 5,
						"byteOffset": 9193
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 349,
						"character": 5,
						"byteOffset": 9620
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 391,
						"character": 1,
						"byteOffset": 10859
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 349,
						"character": 5,
						"byteOffset": 9620
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 326,
						"character": 5,
						"byteOffset": 8951
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 333,
						"character": 5,
						"byteOffset": 9193
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 362,
						"character": 5,
						"byteOffset": 10012
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 376,
						"character": 5,
						"byteOffset": 10416
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 390,
						"character": 5,
						"byteOffset": 10857
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 396,
						"character": 1,
						"byteOffset": 10955
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 362,
						"character": 5,
						"byteOffset": 10012
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 396,
						"character": 1,
						"byteOffset": 10955
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 390,
						"character": 5,
						"byteOffset": 10857
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 376,
						"character": 5,
						"byteOffset": 10416
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 396,
						"character": 1,
						"byteOffset": 10955
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 402,
						"character": 1,
						"byteOffset": 11060
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 402,
						"character": 1,
						"byteOffset": 11060
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 401,
						"character": 5,
						"byteOffset": 11058
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 396,
						"character": 1,
						"byteOffset": 10955
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 402,
						"character": 1,
						"byteOffset": 11060
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 401,
						"character": 5,
						"byteOffset": 11058
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 402,
						"character": 1,
						"byteOffset": 11060
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 408,
						"character": 1,
						"byteOffset": 11187
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 408,
						"character": 1,
						"byteOffset": 11187
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 418,
						"character": 1,
						"byteOffset": 11436
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 418,
						"character": 1,
						"byteOffset": 11436
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 408,
						"character": 1,
						"byteOffset": 11187
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 408,
						"character": 1,
						"byteOffset": 11187
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 418,
						"character": 1,
						"byteOffset": 11436
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 418,
						"character": 1,
						"byteOffset": 11436
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 436,
						"character": 1,
						"byteOffset": 11797
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 436,
						"character": 1,
						"byteOffset": 11797
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 435,
						"character": 5,
						"byteOffset": 11795
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 442,
						"character": 1,
						"byteOffset": 11947
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 436,
						"character": 1,
						"byteOffset": 11797
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 435,
						"character": 5,
						"byteOffset": 11795
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 442,
						"character": 1,
						"byteOffset": 11947
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 436,
						"character": 1,
						"byteOffset": 11797
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 442,
						"character": 1,
						"byteOffset": 11947
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 451,
						"character": 1,
						"byteOffset": 12149
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 451,
						"character": 1,
						"byteOffset": 12149
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 450,
						"character": 5,
						"byteOffset": 12147
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 451,
						"character": 1,
						"byteOffset": 12149
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 450,
						"character": 5,
						"byteOffset": 12147
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 451,
						"character": 1,
						"byteOffset": 12149
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 442,
						"character": 1,
						"byteOffset": 11947
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 460,
						"character": 1,
						"byteOffset": 12415
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 460,
						"character": 1,
						"byteOffset": 12415
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 460,
						"character": 1,
						"byteOffset": 12415
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 460,
						"character": 1,
						"byteOffset": 12415
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 8,
						"character": 32,
						"byteOffset": 308
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 4,
						"character": 32,
						"byteOffset": 179
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 8,
						"character": 14,
						"byteOffset": 290
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 7,
						"character": 35,
						"byteOffset": 274
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 4,
						"character": 53,
						"byteOffset": 200
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 9,
						"character": 30,
						"byteOffset": 340
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 4,
						"character": 25,
						"byteOffset": 172
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 7,
						"character": 17,
						"byteOffset": 256
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 4,
						"character": 19,
						"byteOffset": 166
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 4,
						"character": 75,
						"byteOffset": 222
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 9,
						"character": 9,
						"byteOffset": 319
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 9,
						"character": 46,
						"byteOffset": 356
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 4,
						"character": 43,
						"byteOffset": 190
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 4,
						"character": 68,
						"byteOffset": 215
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToDefinition": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423",
					"position": {
						"line": 7,
						"character": 10,
						"byteOffset": 249
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 8,
						"character": 32,
						"byteOffset": 308
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 4,
						"character": 32,
						"byteOffset": 179
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 7,
						"character": 35,
						"byteOffset": 274
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 8,
						"character": 14,
						"byteOffset": 290
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 4,
						"character": 53,
						"byteOffset": 200
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 9,
						"character": 30,
						"byteOffset": 340
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 4,
						"character": 25,
						"byteOffset": 172
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 7,
						"character": 17,
						"byteOffset": 256
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 4,
						"character": 19,
						"byteOffset": 166
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 4,
						"character": 75,
						"byteOffset": 222
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 9,
						"character": 9,
						"byteOffset": 319
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 9,
						"character": 46,
						"byteOffset": 356
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 4,
						"character": 43,
						"byteOffset": 190
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 4,
						"character": 68,
						"byteOffset": 215
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"SymbolImplementations": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 7,
						"character": 10,
						"byteOffset": 249
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/tool/input.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/types.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/events/input.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/chunking/mod.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/identifier.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/tool/mod.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/chunking/text_document.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/events/mod.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/mod.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"ReRankingCodeSnippetsForEditing": {
					"outline_nodes": [
						{
							"name": "UIEventWithID",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\n#[derive(Debug, serde::Serialize)]\npub struct UIEventWithID {\n    request_id: String,\n    event: UIEvent,\n}"
						},
						{
							"name": "UIEventWithID",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\nimpl UIEventWithID {\n    /// Repo map search start\n    /// Repo map generation end\n    /// Sends the initial search event to the editor\n    pub fn start_long_context_search(request_id: String) -> Self {\n    pub fn finish_long_context_search(request_id: String) -> Self {\n    pub fn finish_edit_request(request_id: String) -> Self {\n    pub fn from_tool_event(request_id: String, input: ToolInput) -> Self {\n    pub fn repo_map_gen_start(request_id: String) -> Self {\n    pub fn repo_map_gen_end(request_id: String) -> Self {\n    pub fn from_symbol_event(request_id: String, input: SymbolEventRequest) -> Self {\n    pub fn for_codebase_event(request_id: String, input: SymbolInputEvent) -> Self {\n    pub fn symbol_location(request_id: String, symbol_location: SymbolLocation) -> Self {\n    pub fn sub_symbol_step(\n        request_id: String,\n        sub_symbol_request: SymbolEventSubStepRequest,\n    ) -> Self {\n    pub fn probe_answer_event(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        probe_answer: String,\n    ) -> Self {\n    pub fn probing_started_event(request_id: String) -> Self {\n    pub fn probing_finished_event(request_id: String, response: String) -> Self {\n    pub fn range_selection_for_edit(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n    ) -> Self {\n    pub fn edited_code(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        edited_code: String,\n    ) -> Self {\n    pub fn code_correctness_action(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        tool_use_thinking: String,\n    ) -> Self {\n    pub fn initial_search_symbol_event(\n        request_id: String,\n        symbols: Vec<InitialSearchSymbolInformation>,\n    ) -> Self {\n}"
						},
						{
							"name": "UIEvent",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\n#[derive(Debug, serde::Serialize)]\npub enum UIEvent {\n    SymbolEvent(SymbolEventRequest),\n    ToolEvent(ToolInput),\n    CodebaseEvent(SymbolInputEvent),\n    SymbolLoctationUpdate(SymbolLocation),\n    SymbolEventSubStep(SymbolEventSubStepRequest),\n    RequestEvent(RequestEvents),\n    EditRequestFinished(String),\n    FrameworkEvent(FrameworkEvent),\n}"
						},
						{
							"name": "UIEvent",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\nimpl From<SymbolEventRequest> for UIEvent {\n    fn from(req: SymbolEventRequest) -> Self {\n}"
						},
						{
							"name": "UIEvent",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\nimpl From<ToolInput> for UIEvent {\n    fn from(input: ToolInput) -> Self {\n}"
						},
						{
							"name": "SymbolEventProbeRequest",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\n#[derive(Debug, serde::Serialize)]\npub enum SymbolEventProbeRequest {\n    SubSymbolSelection,\n    ProbeDeeperSymbol,\n    /// The final answer for the probe is sent via this event\n    ProbeAnswer(String),\n}"
						},
						{
							"name": "SymbolEventGoToDefinitionRequest",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\n#[derive(Debug, serde::Serialize)]\npub struct SymbolEventGoToDefinitionRequest {\n    fs_file_path: String,\n    range: Range,\n    thinking: String,\n}"
						},
						{
							"name": "SymbolEventGoToDefinitionRequest",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\nimpl SymbolEventGoToDefinitionRequest {\n    fn new(fs_file_path: String, range: Range, thinking: String) -> Self {\n}"
						},
						{
							"name": "RangeSelectionForEditRequest",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\n#[derive(Debug, serde::Serialize)]\npub struct RangeSelectionForEditRequest {\n    range: Range,\n    fs_file_path: String,\n}"
						},
						{
							"name": "RangeSelectionForEditRequest",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\nimpl RangeSelectionForEditRequest {\n    pub fn new(range: Range, fs_file_path: String) -> Self {\n}"
						},
						{
							"name": "InsertCodeForEditRequest",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\n#[derive(Debug, serde::Serialize)]\npub struct InsertCodeForEditRequest {\n    range: Range,\n    fs_file_path: String,\n}"
						},
						{
							"name": "EditedCodeForEditRequest",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\n#[derive(Debug, serde::Serialize)]\npub struct EditedCodeForEditRequest {\n    range: Range,\n    fs_file_path: String,\n    new_code: String,\n}"
						},
						{
							"name": "EditedCodeForEditRequest",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\nimpl EditedCodeForEditRequest {\n    pub fn new(range: Range, fs_file_path: String, new_code: String) -> Self {\n}"
						},
						{
							"name": "CodeCorrectionToolSelection",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\n#[derive(Debug, serde::Serialize)]\npub struct CodeCorrectionToolSelection {\n    range: Range,\n    fs_file_path: String,\n    tool_use_thinking: String,\n}"
						},
						{
							"name": "CodeCorrectionToolSelection",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\nimpl CodeCorrectionToolSelection {\n    pub fn new(range: Range, fs_file_path: String, tool_use_thinking: String) -> Self {\n}"
						},
						{
							"name": "SymbolEventEditRequest",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\n#[derive(Debug, serde::Serialize)]\npub enum SymbolEventEditRequest {\n    RangeSelectionForEdit(RangeSelectionForEditRequest),\n    /// We might be inserting code at a line which is a new symbol by itself\n    InsertCode(InsertCodeForEditRequest),\n    EditCode(EditedCodeForEditRequest),\n    CodeCorrectionTool(CodeCorrectionToolSelection),\n}"
						},
						{
							"name": "SymbolEventSubStep",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\n#[derive(Debug, serde::Serialize)]\npub enum SymbolEventSubStep {\n    Probe(SymbolEventProbeRequest),\n    GoToDefinition(SymbolEventGoToDefinitionRequest),\n    Edit(SymbolEventEditRequest),\n}"
						},
						{
							"name": "SymbolEventSubStepRequest",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\n#[derive(Debug, serde::Serialize)]\npub struct SymbolEventSubStepRequest {\n    symbol_identifier: SymbolIdentifier,\n    event: SymbolEventSubStep,\n}"
						},
						{
							"name": "SymbolEventSubStepRequest",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\nimpl SymbolEventSubStepRequest {\n    pub fn new(symbol_identifier: SymbolIdentifier, event: SymbolEventSubStep) -> Self {\n    pub fn probe_answer(symbol_identifier: SymbolIdentifier, answer: String) -> Self {\n    pub fn go_to_definition_request(\n        symbol_identifier: SymbolIdentifier,\n        fs_file_path: String,\n        range: Range,\n        thinking: String,\n    ) -> Self {\n    pub fn range_selection_for_edit(\n        symbol_identifier: SymbolIdentifier,\n        fs_file_path: String,\n        range: Range,\n    ) -> Self {\n    pub fn edited_code(\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        edited_code: String,\n    ) -> Self {\n    pub fn code_correctness_action(\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        tool_use_thinking: String,\n    ) -> Self {\n}"
						},
						{
							"name": "RequestEventProbeFinished",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\n#[derive(Debug, serde::Serialize)]\npub struct RequestEventProbeFinished {\n    reply: String,\n}"
						},
						{
							"name": "RequestEventProbeFinished",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\nimpl RequestEventProbeFinished {\n    pub fn new(reply: String) -> Self {\n}"
						},
						{
							"name": "RequestEvents",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\n#[derive(Debug, serde::Serialize)]\npub enum RequestEvents {\n    ProbingStart,\n    ProbeFinished(RequestEventProbeFinished),\n}"
						},
						{
							"name": "InitialSearchSymbolInformation",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\n#[derive(Debug, serde::Serialize)]\npub struct InitialSearchSymbolInformation {\n    symbol_name: String,\n    fs_file_path: Option<String>,\n    is_new: bool,\n    thinking: String,\n    // send over the range of this symbol\n    range: Option<Range>,\n}"
						},
						{
							"name": "InitialSearchSymbolInformation",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\nimpl InitialSearchSymbolInformation {\n    pub fn new(\n        symbol_name: String,\n        fs_file_path: Option<String>,\n        is_new: bool,\n        thinking: String,\n        range: Option<Range>,\n    ) -> Self {\n}"
						},
						{
							"name": "InitialSearchSymbolEvent",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\n#[derive(Debug, serde::Serialize)]\npub struct InitialSearchSymbolEvent {\n    request_id: String,\n    symbols: Vec<InitialSearchSymbolInformation>,\n}"
						},
						{
							"name": "InitialSearchSymbolEvent",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\nimpl InitialSearchSymbolEvent {\n    pub fn new(request_id: String, symbols: Vec<InitialSearchSymbolInformation>) -> Self {\n}"
						},
						{
							"name": "FrameworkEvent",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\n#[derive(Debug, serde::Serialize)]\npub enum FrameworkEvent {\n    RepoMapGenerationStart(String),\n    RepoMapGenerationFinished(String),\n    LongContextSearchStart(String),\n    LongContextSearchFinished(String),\n    InitialSearchSymbols(InitialSearchSymbolEvent),\n}"
						},
						{
							"name": "ToolInput",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/tool/input.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/tool/input.rs\n#[derive(Debug, Clone, serde::Serialize)]\npub enum ToolInput {\n    CodeEditing(CodeEdit),\n    LSPDiagnostics(LSPDiagnosticsInput),\n    FindCodeSnippets(FindCodeSelectionInput),\n    ReRank(ReRankEntriesForBroker),\n    CodeSymbolUtilitySearch(CodeSymbolUtilityRequest),\n    RequestImportantSymbols(CodeSymbolImportantRequest),\n    RequestImportantSybmolsCodeWide(CodeSymbolImportantWideSearch),\n    GoToDefinition(GoToDefinitionRequest),\n    GoToReference(GoToReferencesRequest),\n    OpenFile(OpenFileRequest),\n    GrepSingleFile(FindInFileRequest),\n    SymbolImplementations(GoToImplementationRequest),\n    FilterCodeSnippetsForEditing(CodeToEditFilterRequest),\n    FilterCodeSnippetsForEditingSingleSymbols(CodeToEditSymbolRequest),\n    EditorApplyChange(EditorApplyRequest),\n    QuickFixRequest(GetQuickFixRequest),\n    QuickFixInvocationRequest(LSPQuickFixInvocationRequest),\n    CodeCorrectnessAction(CodeCorrectnessRequest),\n    CodeEditingError(CodeEditingErrorRequest),\n    ClassSymbolFollowup(ClassSymbolFollowupRequest),\n    // probe request\n    ProbeCreateQuestionForSymbol(ProbeQuestionForSymbolRequest),\n    ProbeEnoughOrDeeper(ProbeEnoughOrDeeperRequest),\n    ProbeFilterSnippetsSingleSymbol(CodeToProbeSubSymbolRequest),\n    ProbeSubSymbol(CodeToEditFilterRequest),\n    ProbePossibleRequest(CodeSymbolToAskQuestionsRequest),\n    ProbeQuestionAskRequest(CodeSymbolToAskQuestionsRequest),\n    ProbeFollowAlongSymbol(CodeSymbolFollowAlongForProbing),\n    ProbeSummarizeAnswerRequest(CodeSymbolProbingSummarize),\n    ProbeTryHardAnswerRequest(ProbeTryHardAnswerSymbolRequest),\n    // repo map query\n    RepoMapSearch(RepoMapSearchQuery),\n    // SWE Bench tooling\n    SWEBenchTest(SWEBenchTestRequest),\n    // Test output correction\n    TestOutputCorrection(TestOutputCorrectionRequest),\n    // Code symbol follow initial request\n    CodeSymbolFollowInitialRequest(CodeSymbolFollowInitialRequest),\n    // Plan before code editing\n    PlanningBeforeCodeEdit(PlanningBeforeCodeEditRequest),\n    // New symbols required for code editing\n    NewSubSymbolForCodeEditing(NewSubSymbolRequiredRequest),\n    // Find the symbol in the codebase which we want to select, this only\n    // takes a string as input\n    GrepSymbolInCodebase(LSPGrepSymbolInCodebaseRequest),\n    // Find file location for the new symbol\n    FindFileForNewSymbol(FindFileForSymbolRequest),\n    // Find symbol to edit in user context\n    FindSymbolsToEditInContext(FindSymbolsToEditInContextRequest),\n    // ReRanking outline nodes for code editing context\n    ReRankingCodeSnippetsForEditing(ReRankingSnippetsForCodeEditingRequest),\n    // Apply the generated code outline to the range we are interested in\n    ApplyOutlineEditToRange(ApplyOutlineEditsToRangeRequest),\n}"
						},
						{
							"name": "ToolInput",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/tool/input.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/tool/input.rs\nimpl ToolInput {\n    pub fn tool_type(&self) -> ToolType {\n    pub fn apply_outline_edits_to_range(\n        self,\n    ) -> Result<ApplyOutlineEditsToRangeRequest, ToolError> {\n    pub fn reranking_code_snippets_for_editing_context(\n        self,\n    ) -> Result<ReRankingSnippetsForCodeEditingRequest, ToolError> {\n    pub fn find_symbols_to_edit_in_context(\n        self,\n    ) -> Result<FindSymbolsToEditInContextRequest, ToolError> {\n    pub fn find_file_for_new_symbol(self) -> Result<FindFileForSymbolRequest, ToolError> {\n    pub fn grep_symbol_in_codebase(self) -> Result<LSPGrepSymbolInCodebaseRequest, ToolError> {\n    pub fn get_probe_try_hard_answer_request(\n        self,\n    ) -> Result<ProbeTryHardAnswerSymbolRequest, ToolError> {\n    pub fn probe_try_hard_answer(request: ProbeTryHardAnswerSymbolRequest) -> Self {\n    pub fn get_new_sub_symbol_for_code_editing(\n        self,\n    ) -> Result<NewSubSymbolRequiredRequest, ToolError> {\n    pub fn probe_create_question_for_symbol(request: ProbeQuestionForSymbolRequest) -> Self {\n    pub fn get_probe_create_question_for_symbol(\n        self,\n    ) -> Result<ProbeQuestionForSymbolRequest, ToolError> {\n    pub fn probe_enough_or_deeper(request: ProbeEnoughOrDeeperRequest) -> Self {\n    pub fn get_probe_enough_or_deeper(self) -> Result<ProbeEnoughOrDeeperRequest, ToolError> {\n    pub fn probe_filter_snippets_single_symbol(request: CodeToProbeSubSymbolRequest) -> Self {\n    pub fn is_probe_filter_snippets_single_symbol(&self) -> bool {\n    pub fn is_code_symbol_follow_initial_request(\n        self,\n    ) -> Result<CodeSymbolFollowInitialRequest, ToolError> {\n    pub fn is_test_output(self) -> Result<TestOutputCorrectionRequest, ToolError> {\n    pub fn is_probe_subsymbol(&self) -> bool {\n    pub fn swe_bench_test(self) -> Result<SWEBenchTestRequest, ToolError> {\n    pub fn repo_map_search_query(self) -> Result<RepoMapSearchQuery, ToolError> {\n    pub fn probe_sub_symbol_filtering(self) -> Result<CodeToProbeSubSymbolRequest, ToolError> {\n    pub fn probe_subsymbol(self) -> Result<CodeToEditFilterRequest, ToolError> {\n    pub fn probe_possible_request(self) -> Result<CodeSymbolToAskQuestionsRequest, ToolError> {\n    pub fn probe_question_request(self) -> Result<CodeSymbolToAskQuestionsRequest, ToolError> {\n    pub fn probe_follow_along_symbol(self) -> Result<CodeSymbolFollowAlongForProbing, ToolError> {\n    pub fn probe_summarization_request(self) -> Result<CodeSymbolProbingSummarize, ToolError> {\n    pub fn is_probe_summarization_request(&self) -> bool {\n    pub fn is_repo_map_search(&self) -> bool {\n    pub fn is_probe_follow_along_symbol_request(&self) -> bool {\n    pub fn is_probe_possible_request(&self) -> bool {\n    pub fn is_probe_question(&self) -> bool {\n    pub fn code_editing_error(self) -> Result<CodeEditingErrorRequest, ToolError> {\n    pub fn code_correctness_action(self) -> Result<CodeCorrectnessRequest, ToolError> {\n    pub fn quick_fix_invocation_request(self) -> Result<LSPQuickFixInvocationRequest, ToolError> {\n    pub fn quick_fix_request(self) -> Result<GetQuickFixRequest, ToolError> {\n    pub fn editor_apply_changes(self) -> Result<EditorApplyRequest, ToolError> {\n    pub fn symbol_implementations(self) -> Result<GoToImplementationRequest, ToolError> {\n    pub fn reference_request(self) -> Result<GoToReferencesRequest, ToolError> {\n    pub fn class_symbol_followup(self) -> Result<ClassSymbolFollowupRequest, ToolError> {\n    pub fn grep_single_file(self) -> Result<FindInFileRequest, ToolError> {\n    pub fn is_file_open(self) -> Result<OpenFileRequest, ToolError> {\n    pub fn is_go_to_definition(self) -> Result<GoToDefinitionRequest, ToolError> {\n    pub fn is_code_edit(self) -> Result<CodeEdit, ToolError> {\n    pub fn is_lsp_diagnostics(self) -> Result<LSPDiagnosticsInput, ToolError> {\n    pub fn is_code_find(self) -> Result<FindCodeSelectionInput, ToolError> {\n    pub fn is_rerank(self) -> Result<ReRankEntriesForBroker, ToolError> {\n    pub fn is_utility_code_search(&self) -> bool {\n    pub fn utility_code_search(self) -> Result<CodeSymbolUtilityRequest, ToolError> {\n    pub fn code_symbol_search(\n        self,\n    ) -> Result<either::Either<CodeSymbolImportantRequest, CodeSymbolImportantWideSearch>, ToolError>\n    {\n    pub fn filter_code_snippets_for_editing(self) -> Result<CodeToEditFilterRequest, ToolError> {\n    pub fn filter_code_snippets_request(\n        self,\n    ) -> Result<either::Either<CodeToEditFilterRequest, CodeToEditSymbolRequest>, ToolError> {\n    pub fn plan_before_code_editing(self) -> Result<PlanningBeforeCodeEditRequest, ToolError> {\n}"
						},
						{
							"name": "SymbolLocation",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/types.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/types.rs\n#[derive(Debug, Clone, serde::Serialize)]\npub struct SymbolLocation {\n    snippet: Snippet,\n    symbol_identifier: SymbolIdentifier,\n}"
						},
						{
							"name": "SymbolLocation",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/types.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/types.rs\nimpl SymbolLocation {\n    pub fn new(symbol_identifier: SymbolIdentifier, snippet: Snippet) -> Self {\n}"
						},
						{
							"name": "SymbolEventRequest",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/types.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/types.rs\n#[derive(Debug, Clone, serde::Serialize)]\npub struct SymbolEventRequest {\n    symbol: SymbolIdentifier,\n    event: SymbolEvent,\n    tool_properties: ToolProperties,\n}"
						},
						{
							"name": "SymbolEventRequest",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/types.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/types.rs\nimpl SymbolEventRequest {\n    pub fn event(&self) -> &SymbolEvent {\n    pub fn symbol(&self) -> &SymbolIdentifier {\n    pub fn remove_event(self) -> SymbolEvent {\n    pub fn get_tool_properties(&self) -> &ToolProperties {\n}"
						},
						{
							"name": "SymbolEventRequest",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/types.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/types.rs\nimpl SymbolEventRequest {\n    pub fn new(\n        symbol: SymbolIdentifier,\n        event: SymbolEvent,\n        tool_properties: ToolProperties,\n    ) -> Self {\n    pub fn outline(symbol: SymbolIdentifier, tool_properties: ToolProperties) -> Self {\n    pub fn ask_question(\n        symbol: SymbolIdentifier,\n        question: String,\n        tool_properties: ToolProperties,\n    ) -> Self {\n    pub fn probe_request(\n        symbol: SymbolIdentifier,\n        request: SymbolToProbeRequest,\n        tool_properties: ToolProperties,\n    ) -> Self {\n    pub fn initial_request(\n        symbol: SymbolIdentifier,\n        request: String,\n        // passing history to the symbols so we do not end up doing repeated work\n        history: Vec<SymbolRequestHistoryItem>,\n        tool_properties: ToolProperties,\n    ) -> Self {\n}"
						},
						{
							"name": "SymbolInputEvent",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/events/input.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/events/input.rs\n#[derive(Clone, Debug, serde::Serialize)]\npub struct SymbolInputEvent {\n    context: UserContext,\n    llm: LLMType,\n    provider: LLMProvider,\n    api_keys: LLMProviderAPIKeys,\n    user_query: String,\n    request_id: String,\n    // Here we have properties for swe bench which we are sending for testing\n    swe_bench_test_endpoint: Option<String>,\n    repo_map_fs_path: Option<String>,\n    gcloud_access_token: Option<String>,\n    swe_bench_id: Option<String>,\n    swe_bench_git_dname: Option<String>,\n    swe_bench_code_editing: Option<LLMProperties>,\n    swe_bench_gemini_api_keys: Option<LLMProperties>,\n    swe_bench_long_context_editing: Option<LLMProperties>,\n    full_symbol_edit: bool,\n    codebase_search: bool,\n    root_directory: Option<String>,\n    /// The properties for the llm which does fast and stable\n    /// code symbol selection on an initial context, this can be used\n    /// when we are not using full codebase context search\n    fast_code_symbol_search_llm: Option<LLMProperties>,\n}"
						},
						{
							"name": "SymbolInputEvent",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/events/input.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/events/input.rs\nimpl SymbolInputEvent {\n    // here we can take an action based on the state we are in\n    // on some states this might be wrong, I find it a bit easier to reason\n    // altho fuck complexity we ball\n    pub fn new(\n        context: UserContext,\n        llm: LLMType,\n        provider: LLMProvider,\n        api_keys: LLMProviderAPIKeys,\n        user_query: String,\n        request_id: String,\n        swe_bench_test_endpoint: Option<String>,\n        repo_map_fs_path: Option<String>,\n        gcloud_access_token: Option<String>,\n        swe_bench_id: Option<String>,\n        swe_bench_git_dname: Option<String>,\n        swe_bench_code_editing: Option<LLMProperties>,\n        swe_bench_gemini_api_keys: Option<LLMProperties>,\n        swe_bench_long_context_editing: Option<LLMProperties>,\n        full_symbol_edit: bool,\n        codebase_search: bool,\n        root_directory: Option<String>,\n        fast_code_symbol_search_llm: Option<LLMProperties>,\n    ) -> Self {\n    pub fn full_symbol_edit(&self) -> bool {\n    pub fn user_query(&self) -> &str {\n    pub fn get_swe_bench_git_dname(&self) -> Option<String> {\n    pub fn get_swe_bench_test_endpoint(&self) -> Option<String> {\n    pub fn set_swe_bench_id(mut self, swe_bench_id: String) -> Self {\n    pub fn swe_bench_instance_id(&self) -> Option<String> {\n    pub fn provided_context(&self) -> &UserContext {\n    pub fn has_repo_map(&self) -> bool {\n    pub fn get_fast_code_symbol_llm(&self) -> Option<LLMProperties> {\n    pub fn get_swe_bench_code_editing(&self) -> Option<LLMProperties> {\n    pub fn get_swe_bench_gemini_llm_properties(&self) -> Option<LLMProperties> {\n    pub fn get_swe_bench_long_context_editing(&self) -> Option<LLMProperties> {\n    pub fn request_id(&self) -> &str {\n    pub async fn tool_use_on_initial_invocation(\n        self,\n        tool_box: Arc<ToolBox>,\n        request_id: &str,\n    ) -> Option<ToolInput> {\n}"
						},
						{
							"name": "SymbolIdentifier",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/identifier.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/identifier.rs\n#[derive(Debug, PartialEq, Eq, Hash, Clone, serde::Deserialize, serde::Serialize)]\npub struct SymbolIdentifier {\n    symbol_name: String,\n    fs_file_path: Option<String>,\n}"
						},
						{
							"name": "SymbolIdentifier",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/identifier.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/identifier.rs\nimpl SymbolIdentifier {\n    pub fn new_symbol(symbol_name: &str) -> Self {\n    pub fn fs_file_path(&self) -> Option<String> {\n    pub fn symbol_name(&self) -> &str {\n    pub fn with_file_path(symbol_name: &str, fs_file_path: &str) -> Self {\n}"
						},
						{
							"name": "Range",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/chunking/text_document.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/chunking/text_document.rs\n#[serde(rename_all = \"camelCase\")]\npub struct Range {\n    start_position: Position,\n    end_position: Position,\n}"
						},
						{
							"name": "Range",
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/chunking/text_document.rs",
							"content": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/chunking/text_document.rs\nimpl Range {\n    // Here we are checking with line and column number values\n    /// From byte range helps us get the position while also fixing the\n    /// line and the column values which is the position for the byte\n    /// This only checks the line without the column for now\n    pub fn new(start_position: Position, end_position: Position) -> Self {\n    pub fn set_start_byte(&mut self, byte: usize) {\n    pub fn set_end_byte(&mut self, byte: usize) {\n    pub fn start_position(&self) -> Position {\n    pub fn end_position(&self) -> Position {\n    pub fn start_byte(&self) -> usize {\n    pub fn end_byte(&self) -> usize {\n    pub fn start_line(&self) -> usize {\n    pub fn end_line(&self) -> usize {\n    pub fn start_column(&self) -> usize {\n    pub fn end_column(&self) -> usize {\n    pub fn get_start_position(&self) -> &Position {\n    pub fn get_end_position(&self) -> &Position {\n    pub fn set_end_position(&mut self, position: Position) {\n    pub fn set_start_position(&mut self, position: Position) {\n    pub fn intersection_size(&self, other: &Range) -> usize {\n    pub fn contains_line(&self, line: usize) -> bool {\n    pub fn len(&self) -> usize {\n    pub fn to_tree_sitter_range(&self) -> tree_sitter::Range {\n    pub fn for_tree_node(node: &tree_sitter::Node) -> Self {\n    pub fn is_contained(&self, other: &Self) -> bool {\n    pub fn guard_large_expansion(\n        selection_range: Self,\n        expanded_range: Self,\n        _size: usize,\n    ) -> Self {\n    pub fn contains_position(&self, position: &Position) -> bool {\n    pub fn contains(&self, other: &Range) -> bool {\n    pub fn contains_check_line(&self, other: &Range) -> bool {\n    pub fn contains_check_line_column(&self, other: &Range) -> bool {\n    pub fn from_byte_range(range: std::ops::Range<usize>, line_end_indices: &[u32]) -> Range {\n    pub fn byte_size(&self) -> usize {\n    pub fn intersects_without_byte(&self, other: &Range) -> bool {\n    pub fn minimal_line_distance(&self, other: &Range) -> i64 {\n    pub fn check_equality_without_byte(&self, other: &Range) -> bool {\n    pub fn line_size(&self) -> i64 {\n    pub fn reshape_for_selection(self, edited_code: &str) -> Self {\n}"
						}
					],
					"code_above": null,
					"code_below": null,
					"code_to_edit_selection": "#[derive(Debug, serde::Serialize)]\npub struct UIEventWithID {\n    request_id: String,\n    event: UIEvent,\n}",
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"user_query": "Original user query:\nAdd a comment to UIEventWithID\n\nEdit selection reason:\nThis code defines the `UIEventWithID` struct. Adding a comment here will provide clarity on its purpose and usage.",
					"llm_properties": {
						"llm": "GeminiProFlash",
						"provider": "GoogleAIStudio",
						"api_key": {
							"GoogleAIStudio": {
								"api_key": "AIzaSyCMkKfNkmjF8rTOWMg53NiYmz0Zv6xbfsE"
							}
						}
					},
					"root_request_id": "236d6edb-0e7d-49c2-8918-7c7d89c5d09d"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"SymbolEventSubStep": {
				"symbol_identifier": {
					"symbol_name": "UIEventWithID",
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs"
				},
				"event": {
					"Edit": {
						"RangeSelectionForEdit": {
							"range": {
								"startPosition": {
									"line": 12,
									"character": 0,
									"byteOffset": 363
								},
								"endPosition": {
									"line": 16,
									"character": 1,
									"byteOffset": 470
								}
							},
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs"
						}
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"CodeEditing": {
					"code_above": "//! We are going to log the UI events, this is mostly for\n//! debugging and having better visibility to what ever is happening\n//! in the symbols\n\nuse crate::{agentic::tool::input::ToolInput, chunking::text_document::Range};\n\nuse super::{\n    events::input::SymbolInputEvent,\n    identifier::SymbolIdentifier,\n    types::{SymbolEventRequest, SymbolLocation},\n};\n",
					"code_below": "\nimpl UIEventWithID {\n    pub fn start_long_context_search(request_id: String) -> Self {\n        Self {\n            request_id: request_id.to_owned(),\n            event: UIEvent::FrameworkEvent(FrameworkEvent::LongContextSearchStart(request_id)),\n        }\n    }\n\n    pub fn finish_long_context_search(request_id: String) -> Self {\n        Self {\n            request_id: request_id.to_owned(),\n            event: UIEvent::FrameworkEvent(FrameworkEvent::LongContextSearchFinished(request_id)),\n        }\n    }\n\n    pub fn finish_edit_request(request_id: String) -> Self {\n        Self {\n            request_id: request_id.to_owned(),\n            event: UIEvent::EditRequestFinished(request_id),\n        }\n    }\n    pub fn from_tool_event(request_id: String, input: ToolInput) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::from(input),\n        }\n    }\n\n    /// Repo map search start\n    pub fn repo_map_gen_start(request_id: String) -> Self {\n        Self {\n            request_id: request_id.to_owned(),\n            event: UIEvent::FrameworkEvent(FrameworkEvent::RepoMapGenerationStart(request_id)),\n        }\n    }\n\n    /// Repo map generation end\n    pub fn repo_map_gen_end(request_id: String) -> Self {\n        Self {\n            request_id: request_id.to_owned(),\n            event: UIEvent::FrameworkEvent(FrameworkEvent::RepoMapGenerationFinished(request_id)),\n        }\n    }\n\n    pub fn from_symbol_event(request_id: String, input: SymbolEventRequest) -> Self {\n        Self {\n            request_id: request_id,\n            event: UIEvent::SymbolEvent(input),\n        }\n    }\n\n    pub fn for_codebase_event(request_id: String, input: SymbolInputEvent) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::CodebaseEvent(input),\n        }\n    }\n\n    pub fn symbol_location(request_id: String, symbol_location: SymbolLocation) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolLoctationUpdate(symbol_location),\n        }\n    }\n\n    pub fn sub_symbol_step(\n        request_id: String,\n        sub_symbol_request: SymbolEventSubStepRequest,\n    ) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolEventSubStep(sub_symbol_request),\n        }\n    }\n\n    pub fn probe_answer_event(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        probe_answer: String,\n    ) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolEventSubStep(SymbolEventSubStepRequest::new(\n                symbol_identifier,\n                SymbolEventSubStep::Probe(SymbolEventProbeRequest::ProbeAnswer(probe_answer)),\n            )),\n        }\n    }\n\n    pub fn probing_started_event(request_id: String) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::RequestEvent(RequestEvents::ProbingStart),\n        }\n    }\n\n    pub fn probing_finished_event(request_id: String, response: String) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::RequestEvent(RequestEvents::ProbeFinished(\n                RequestEventProbeFinished::new(response),\n            )),\n        }\n    }\n\n    pub fn range_selection_for_edit(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n    ) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolEventSubStep(\n                SymbolEventSubStepRequest::range_selection_for_edit(\n                    symbol_identifier,\n                    fs_file_path,\n                    range,\n                ),\n            ),\n        }\n    }\n\n    pub fn edited_code(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        edited_code: String,\n    ) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolEventSubStep(SymbolEventSubStepRequest::edited_code(\n                symbol_identifier,\n                range,\n                fs_file_path,\n                edited_code,\n            )),\n        }\n    }\n\n    pub fn code_correctness_action(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        tool_use_thinking: String,\n    ) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolEventSubStep(SymbolEventSubStepRequest::code_correctness_action(\n                symbol_identifier,\n                range,\n                fs_file_path,\n                tool_use_thinking,\n            )),\n        }\n    }\n\n    /// Sends the initial search event to the editor\n    pub fn initial_search_symbol_event(\n        request_id: String,\n        symbols: Vec<InitialSearchSymbolInformation>,\n    ) -> Self {\n        Self {\n            request_id: request_id.to_owned(),\n            event: UIEvent::FrameworkEvent(FrameworkEvent::InitialSearchSymbols(\n                InitialSearchSymbolEvent::new(request_id, symbols),\n            )),\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub enum UIEvent {\n    SymbolEvent(SymbolEventRequest),\n    ToolEvent(ToolInput),\n    CodebaseEvent(SymbolInputEvent),\n    SymbolLoctationUpdate(SymbolLocation),\n    SymbolEventSubStep(SymbolEventSubStepRequest),\n    RequestEvent(RequestEvents),\n    EditRequestFinished(String),\n    FrameworkEvent(FrameworkEvent),\n}\n\nimpl From<SymbolEventRequest> for UIEvent {\n    fn from(req: SymbolEventRequest) -> Self {\n        UIEvent::SymbolEvent(req)\n    }\n}\n\nimpl From<ToolInput> for UIEvent {\n    fn from(input: ToolInput) -> Self {\n        UIEvent::ToolEvent(input)\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub enum SymbolEventProbeRequest {\n    SubSymbolSelection,\n    ProbeDeeperSymbol,\n    /// The final answer for the probe is sent via this event\n    ProbeAnswer(String),\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct SymbolEventGoToDefinitionRequest {\n    fs_file_path: String,\n    range: Range,\n    thinking: String,\n}\n\nimpl SymbolEventGoToDefinitionRequest {\n    fn new(fs_file_path: String, range: Range, thinking: String) -> Self {\n        Self {\n            fs_file_path,\n            range,\n            thinking,\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct RangeSelectionForEditRequest {\n    range: Range,\n    fs_file_path: String,\n}\n\nimpl RangeSelectionForEditRequest {\n    pub fn new(range: Range, fs_file_path: String) -> Self {\n        Self {\n            range,\n            fs_file_path,\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct InsertCodeForEditRequest {\n    range: Range,\n    fs_file_path: String,\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct EditedCodeForEditRequest {\n    range: Range,\n    fs_file_path: String,\n    new_code: String,\n}\n\nimpl EditedCodeForEditRequest {\n    pub fn new(range: Range, fs_file_path: String, new_code: String) -> Self {\n        Self {\n            range,\n            fs_file_path,\n            new_code,\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct CodeCorrectionToolSelection {\n    range: Range,\n    fs_file_path: String,\n    tool_use_thinking: String,\n}\n\nimpl CodeCorrectionToolSelection {\n    pub fn new(range: Range, fs_file_path: String, tool_use_thinking: String) -> Self {\n        Self {\n            range,\n            fs_file_path,\n            tool_use_thinking,\n        }\n    }\n}\n\n/// We have range selection and then the edited code, we should also show the\n/// events which the AI is using for the tool correction and whats it is planning\n/// on doing for that\n#[derive(Debug, serde::Serialize)]\npub enum SymbolEventEditRequest {\n    RangeSelectionForEdit(RangeSelectionForEditRequest),\n    /// We might be inserting code at a line which is a new symbol by itself\n    InsertCode(InsertCodeForEditRequest),\n    EditCode(EditedCodeForEditRequest),\n    CodeCorrectionTool(CodeCorrectionToolSelection),\n}\n\n#[derive(Debug, serde::Serialize)]\npub enum SymbolEventSubStep {\n    Probe(SymbolEventProbeRequest),\n    GoToDefinition(SymbolEventGoToDefinitionRequest),\n    Edit(SymbolEventEditRequest),\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct SymbolEventSubStepRequest {\n    symbol_identifier: SymbolIdentifier,\n    event: SymbolEventSubStep,\n}\n\nimpl SymbolEventSubStepRequest {\n    pub fn new(symbol_identifier: SymbolIdentifier, event: SymbolEventSubStep) -> Self {\n        Self {\n            symbol_identifier,\n            event,\n        }\n    }\n\n    pub fn probe_answer(symbol_identifier: SymbolIdentifier, answer: String) -> Self {\n        Self {\n            symbol_identifier,\n            event: SymbolEventSubStep::Probe(SymbolEventProbeRequest::ProbeAnswer(answer)),\n        }\n    }\n\n    pub fn go_to_definition_request(\n        symbol_identifier: SymbolIdentifier,\n        fs_file_path: String,\n        range: Range,\n        thinking: String,\n    ) -> Self {\n        Self {\n            symbol_identifier,\n            event: SymbolEventSubStep::GoToDefinition(SymbolEventGoToDefinitionRequest::new(\n                fs_file_path,\n                range,\n                thinking,\n            )),\n        }\n    }\n\n    pub fn range_selection_for_edit(\n        symbol_identifier: SymbolIdentifier,\n        fs_file_path: String,\n        range: Range,\n    ) -> Self {\n        Self {\n            symbol_identifier,\n            event: SymbolEventSubStep::Edit(SymbolEventEditRequest::RangeSelectionForEdit(\n                RangeSelectionForEditRequest::new(range, fs_file_path),\n            )),\n        }\n    }\n\n    pub fn edited_code(\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        edited_code: String,\n    ) -> Self {\n        Self {\n            symbol_identifier,\n            event: SymbolEventSubStep::Edit(SymbolEventEditRequest::EditCode(\n                EditedCodeForEditRequest::new(range, fs_file_path, edited_code),\n            )),\n        }\n    }\n\n    pub fn code_correctness_action(\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        tool_use_thinking: String,\n    ) -> Self {\n        Self {\n            symbol_identifier,\n            event: SymbolEventSubStep::Edit(SymbolEventEditRequest::CodeCorrectionTool(\n                CodeCorrectionToolSelection::new(range, fs_file_path, tool_use_thinking),\n            )),\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct RequestEventProbeFinished {\n    reply: String,\n}\n\nimpl RequestEventProbeFinished {\n    pub fn new(reply: String) -> Self {\n        Self { reply }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub enum RequestEvents {\n    ProbingStart,\n    ProbeFinished(RequestEventProbeFinished),\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct InitialSearchSymbolInformation {\n    symbol_name: String,\n    fs_file_path: Option<String>,\n    is_new: bool,\n    thinking: String,\n    // send over the range of this symbol\n    range: Option<Range>,\n}\n\nimpl InitialSearchSymbolInformation {\n    pub fn new(\n        symbol_name: String,\n        fs_file_path: Option<String>,\n        is_new: bool,\n        thinking: String,\n        range: Option<Range>,\n    ) -> Self {\n        Self {\n            symbol_name,\n            fs_file_path,\n            is_new,\n            thinking,\n            range,\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct InitialSearchSymbolEvent {\n    request_id: String,\n    symbols: Vec<InitialSearchSymbolInformation>,\n}\n\nimpl InitialSearchSymbolEvent {\n    pub fn new(request_id: String, symbols: Vec<InitialSearchSymbolInformation>) -> Self {\n        Self {\n            request_id,\n            symbols,\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub enum FrameworkEvent {\n    RepoMapGenerationStart(String),\n    RepoMapGenerationFinished(String),\n    LongContextSearchStart(String),\n    LongContextSearchFinished(String),\n    InitialSearchSymbols(InitialSearchSymbolEvent),\n}",
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"code_to_edit": "#[derive(Debug, serde::Serialize)]\npub struct UIEventWithID {\n    request_id: String,\n    event: UIEvent,\n}",
					"extra_context": "FILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\n#[derive(Debug, serde::Serialize)]\npub struct UIEventWithID {\n    request_id: String,\n    event: UIEvent,\n}\nFILEPATH: /Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs\nimpl UIEventWithID {\n    /// Repo map search start\n    /// Repo map generation end\n    /// Sends the initial search event to the editor\n    pub fn start_long_context_search(request_id: String) -> Self {\n    pub fn finish_long_context_search(request_id: String) -> Self {\n    pub fn finish_edit_request(request_id: String) -> Self {\n    pub fn from_tool_event(request_id: String, input: ToolInput) -> Self {\n    pub fn repo_map_gen_start(request_id: String) -> Self {\n    pub fn repo_map_gen_end(request_id: String) -> Self {\n    pub fn from_symbol_event(request_id: String, input: SymbolEventRequest) -> Self {\n    pub fn for_codebase_event(request_id: String, input: SymbolInputEvent) -> Self {\n    pub fn symbol_location(request_id: String, symbol_location: SymbolLocation) -> Self {\n    pub fn sub_symbol_step(\n        request_id: String,\n        sub_symbol_request: SymbolEventSubStepRequest,\n    ) -> Self {\n    pub fn probe_answer_event(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        probe_answer: String,\n    ) -> Self {\n    pub fn probing_started_event(request_id: String) -> Self {\n    pub fn probing_finished_event(request_id: String, response: String) -> Self {\n    pub fn range_selection_for_edit(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n    ) -> Self {\n    pub fn edited_code(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        edited_code: String,\n    ) -> Self {\n    pub fn code_correctness_action(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        tool_use_thinking: String,\n    ) -> Self {\n    pub fn initial_search_symbol_event(\n        request_id: String,\n        symbols: Vec<InitialSearchSymbolInformation>,\n    ) -> Self {\n}",
					"language": "Rust",
					"model": "ClaudeSonnet",
					"instruction": "Original user query:\nAdd a comment to UIEventWithID\n\nEdit selection reason:\nThis code defines the `UIEventWithID` struct. Adding a comment here will provide clarity on its purpose and usage.",
					"api_key": {
						"Anthropic": {
							"api_key": "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"
						}
					},
					"provider": "Anthropic",
					"is_swe_bench_initial_edit": false,
					"symbol_to_edit": "UIEventWithID",
					"is_new_symbol_request": null,
					"root_request_id": "236d6edb-0e7d-49c2-8918-7c7d89c5d09d",
					"is_outline_edit": true
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"SymbolEventSubStep": {
				"symbol_identifier": {
					"symbol_name": "UIEventWithID",
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs"
				},
				"event": {
					"Edit": {
						"EditCode": {
							"range": {
								"startPosition": {
									"line": 12,
									"character": 0,
									"byteOffset": 363
								},
								"endPosition": {
									"line": 24,
									"character": 0,
									"byteOffset": 0
								}
							},
							"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
							"new_code": "/// Represents a UI event with an associated request ID.\n/// \n/// This struct combines a unique request identifier with a UI event,\n/// allowing for tracking and correlation of events within the system.\n///\n/// - `request_id`: A unique identifier for the request associated with this event.\n/// - `event`: The actual UI event that occurred.\n#[derive(Debug, serde::Serialize)]\npub struct UIEventWithID {\n    request_id: String,\n    event: UIEvent,\n}"
						}
					}
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"EditorApplyChange": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"edited_content": "/// Represents a UI event with an associated request ID.\n/// \n/// This struct combines a unique request identifier with a UI event,\n/// allowing for tracking and correlation of events within the system.\n///\n/// - `request_id`: A unique identifier for the request associated with this event.\n/// - `event`: The actual UI event that occurred.\n#[derive(Debug, serde::Serialize)]\npub struct UIEventWithID {\n    request_id: String,\n    event: UIEvent,\n}",
					"selected_range": {
						"startPosition": {
							"line": 12,
							"character": 0,
							"byteOffset": 363
						},
						"endPosition": {
							"line": 16,
							"character": 1,
							"byteOffset": 470
						}
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"OpenFile": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"ClassSymbolFollowup": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"original_code": "#[derive(Debug, serde::Serialize)]\npub struct UIEventWithID {\n    request_id: String,\n    event: UIEvent,\n}",
					"language": "rust",
					"edited_code": "#[derive(Debug, serde::Serialize)]\npub struct UIEventWithID {\n    request_id: String,\n    event: UIEvent,\n}",
					"instructions": "Original user query:\nAdd a comment to UIEventWithID\n\nEdit selection reason:\nThis code defines the `UIEventWithID` struct. Adding a comment here will provide clarity on its purpose and usage.",
					"llm": "ClaudeSonnet",
					"provider": "Anthropic",
					"api_keys": {
						"Anthropic": {
							"api_key": "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"
						}
					},
					"root_request_id": "236d6edb-0e7d-49c2-8918-7c7d89c5d09d"
				}
			}
		}
	},
	{
		"request_id": "74e6e8e4-da00-4803-8277-9edc93300736",
		"event": {
			"ToolEvent": {
				"GoToReference": {
					"fs_file_path": "/Users/guglielmodanna/Repo/sidecar/sidecar/src/agentic/symbol/ui_event.rs",
					"position": {
						"line": 12,
						"character": 0,
						"byteOffset": 363
					},
					"editor_url": "http://localhost:42423"
				}
			}
		}
	},
	{
		"request_id": "236d6edb-0e7d-49c2-8918-7c7d89c5d09d",
		"event": {
			"EditRequestFinished": "236d6edb-0e7d-49c2-8918-7c7d89c5d09d"
		}
	}
]
