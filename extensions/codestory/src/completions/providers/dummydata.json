[{"request_id":"c8ac1629-ea37-445b-9d71-db428f9d80fc","event":{"ToolEvent":{"OpenFile":{"fs_file_path":"/Users/nareshr/github/codestory/sidecar/sidecar/src/agentic/symbol/ui_event.rs","editor_url":"http://localhost:42423"}}}},
{"request_id":"c8ac1629-ea37-445b-9d71-db428f9d80fc","event":{"ToolEvent":{"RequestImportantSybmolsCodeWide":{"user_context":{"variables":[{"start_position":{"line":0,"character":0,"byteOffset":0},"end_position":{"line":358,"character":0,"byteOffset":0},"fs_file_path":"/Users/nareshr/github/codestory/sidecar/sidecar/src/agentic/symbol/ui_event.rs","name":"file","type":"Selection","content":"//! We are going to log the UI events, this is mostly for\n//! debugging and having better visibility to what ever is happening\n//! in the symbols\n\nuse crate::{agentic::tool::input::ToolInput, chunking::text_document::Range};\n\nuse super::{\n    events::input::SymbolInputEvent,\n    identifier::SymbolIdentifier,\n    types::{SymbolEventRequest, SymbolLocation},\n};\n\n#[derive(Debug, serde::Serialize)]\npub struct UIEventWithID {\n    request_id: String,\n    event: UIEvent,\n}\n\nimpl UIEventWithID {\n    pub fn from_tool_event(request_id: String, input: ToolInput) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::from(input),\n        }\n    }\n\n    pub fn from_symbol_event(request_id: String, input: SymbolEventRequest) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolEvent(input),\n        }\n    }\n\n    pub fn for_codebase_event(request_id: String, input: SymbolInputEvent) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::CodebaseEvent(input),\n        }\n    }\n\n    pub fn symbol_location(request_id: String, symbol_location: SymbolLocation) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolLoctationUpdate(symbol_location),\n        }\n    }\n\n    pub fn sub_symbol_step(\n        request_id: String,\n        sub_symbol_request: SymbolEventSubStepRequest,\n    ) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolEventSubStep(sub_symbol_request),\n        }\n    }\n\n    pub fn probe_answer_event(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        probe_answer: String,\n    ) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolEventSubStep(SymbolEventSubStepRequest::new(\n                symbol_identifier,\n                SymbolEventSubStep::Probe(SymbolEventProbeRequest::ProbeAnswer(probe_answer)),\n            )),\n        }\n    }\n\n    pub fn probing_started_event(request_id: String) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::RequestEvent(RequestEvents::ProbingStart),\n        }\n    }\n\n    pub fn probing_finished_event(request_id: String, response: String) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::RequestEvent(RequestEvents::ProbeFinished(\n                RequestEventProbeFinished::new(response),\n            )),\n        }\n    }\n\n    pub fn range_selection_for_edit(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n    ) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolEventSubStep(\n                SymbolEventSubStepRequest::range_selection_for_edit(\n                    symbol_identifier,\n                    fs_file_path,\n                    range,\n                ),\n            ),\n        }\n    }\n\n    pub fn edited_code(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        edited_code: String,\n    ) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolEventSubStep(SymbolEventSubStepRequest::edited_code(\n                symbol_identifier,\n                range,\n                fs_file_path,\n                edited_code,\n            )),\n        }\n    }\n\n    pub fn code_correctness_action(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        tool_use_thinking: String,\n    ) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolEventSubStep(SymbolEventSubStepRequest::code_correctness_action(\n                symbol_identifier,\n                range,\n                fs_file_path,\n                tool_use_thinking,\n            )),\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub enum UIEvent {\n    SymbolEvent(SymbolEventRequest),\n    ToolEvent(ToolInput),\n    CodebaseEvent(SymbolInputEvent),\n    SymbolLoctationUpdate(SymbolLocation),\n    SymbolEventSubStep(SymbolEventSubStepRequest),\n    RequestEvent(RequestEvents),\n}\n\nimpl From<SymbolEventRequest> for UIEvent {\n    fn from(req: SymbolEventRequest) -> Self {\n        UIEvent::SymbolEvent(req)\n    }\n}\n\nimpl From<ToolInput> for UIEvent {\n    fn from(input: ToolInput) -> Self {\n        UIEvent::ToolEvent(input)\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub enum SymbolEventProbeRequest {\n    SubSymbolSelection,\n    ProbeDeeperSymbol,\n    /// The final answer for the probe is sent via this event\n    ProbeAnswer(String),\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct SymbolEventGoToDefinitionRequest {\n    fs_file_path: String,\n    range: Range,\n    thinking: String,\n}\n\nimpl SymbolEventGoToDefinitionRequest {\n    fn new(fs_file_path: String, range: Range, thinking: String) -> Self {\n        Self {\n            fs_file_path,\n            range,\n            thinking,\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct RangeSelectionForEditRequest {\n    range: Range,\n    fs_file_path: String,\n}\n\nimpl RangeSelectionForEditRequest {\n    pub fn new(range: Range, fs_file_path: String) -> Self {\n        Self {\n            range,\n            fs_file_path,\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct InsertCodeForEditRequest {\n    range: Range,\n    fs_file_path: String,\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct EditedCodeForEditRequest {\n    range: Range,\n    fs_file_path: String,\n    new_code: String,\n}\n\nimpl EditedCodeForEditRequest {\n    pub fn new(range: Range, fs_file_path: String, new_code: String) -> Self {\n        Self {\n            range,\n            fs_file_path,\n            new_code,\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct CodeCorrectionToolSelection {\n    range: Range,\n    fs_file_path: String,\n    tool_use_thinking: String,\n}\n\nimpl CodeCorrectionToolSelection {\n    pub fn new(range: Range, fs_file_path: String, tool_use_thinking: String) -> Self {\n        Self {\n            range,\n            fs_file_path,\n            tool_use_thinking,\n        }\n    }\n}\n\n/// We have range selection and then the edited code, we should also show the\n/// events which the AI is using for the tool correction and whats it is planning\n/// on doing for that\n#[derive(Debug, serde::Serialize)]\npub enum SymbolEventEditRequest {\n    RangeSelectionForEdit(RangeSelectionForEditRequest),\n    /// We might be inserting code at a line which is a new symbol by itself\n    InsertCode(InsertCodeForEditRequest),\n    EditCode(EditedCodeForEditRequest),\n    CodeCorrectionTool(CodeCorrectionToolSelection),\n}\n\n#[derive(Debug, serde::Serialize)]\npub enum SymbolEventSubStep {\n    Probe(SymbolEventProbeRequest),\n    GoToDefinition(SymbolEventGoToDefinitionRequest),\n    Edit(SymbolEventEditRequest),\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct SymbolEventSubStepRequest {\n    symbol_identifier: SymbolIdentifier,\n    event: SymbolEventSubStep,\n}\n\nimpl SymbolEventSubStepRequest {\n    pub fn new(symbol_identifier: SymbolIdentifier, event: SymbolEventSubStep) -> Self {\n        Self {\n            symbol_identifier,\n            event,\n        }\n    }\n\n    pub fn probe_answer(symbol_identifier: SymbolIdentifier, answer: String) -> Self {\n        Self {\n            symbol_identifier,\n            event: SymbolEventSubStep::Probe(SymbolEventProbeRequest::ProbeAnswer(answer)),\n        }\n    }\n\n    pub fn go_to_definition_request(\n        symbol_identifier: SymbolIdentifier,\n        fs_file_path: String,\n        range: Range,\n        thinking: String,\n    ) -> Self {\n        Self {\n            symbol_identifier,\n            event: SymbolEventSubStep::GoToDefinition(SymbolEventGoToDefinitionRequest::new(\n                fs_file_path,\n                range,\n                thinking,\n            )),\n        }\n    }\n\n    pub fn range_selection_for_edit(\n        symbol_identifier: SymbolIdentifier,\n        fs_file_path: String,\n        range: Range,\n    ) -> Self {\n        Self {\n            symbol_identifier,\n            event: SymbolEventSubStep::Edit(SymbolEventEditRequest::RangeSelectionForEdit(\n                RangeSelectionForEditRequest::new(range, fs_file_path),\n            )),\n        }\n    }\n\n    pub fn edited_code(\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        edited_code: String,\n    ) -> Self {\n        Self {\n            symbol_identifier,\n            event: SymbolEventSubStep::Edit(SymbolEventEditRequest::EditCode(\n                EditedCodeForEditRequest::new(range, fs_file_path, edited_code),\n            )),\n        }\n    }\n\n    pub fn code_correctness_action(\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        tool_use_thinking: String,\n    ) -> Self {\n        Self {\n            symbol_identifier,\n            event: SymbolEventSubStep::Edit(SymbolEventEditRequest::CodeCorrectionTool(\n                CodeCorrectionToolSelection::new(range, fs_file_path, tool_use_thinking),\n            )),\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct RequestEventProbeFinished {\n    reply: String,\n}\n\nimpl RequestEventProbeFinished {\n    pub fn new(reply: String) -> Self {\n        Self { reply }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub enum RequestEvents {\n    ProbingStart,\n    ProbeFinished(RequestEventProbeFinished),\n}\n","language":"rust"}],"file_content_map":[{"file_path":"/Users/nareshr/github/codestory/sidecar/sidecar/src/agentic/symbol/ui_event.rs","file_content":"//! We are going to log the UI events, this is mostly for\n//! debugging and having better visibility to what ever is happening\n//! in the symbols\n\nuse crate::{agentic::tool::input::ToolInput, chunking::text_document::Range};\n\nuse super::{\n    events::input::SymbolInputEvent,\n    identifier::SymbolIdentifier,\n    types::{SymbolEventRequest, SymbolLocation},\n};\n\n#[derive(Debug, serde::Serialize)]\npub struct UIEventWithID {\n    request_id: String,\n    event: UIEvent,\n}\n\nimpl UIEventWithID {\n    pub fn from_tool_event(request_id: String, input: ToolInput) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::from(input),\n        }\n    }\n\n    pub fn from_symbol_event(request_id: String, input: SymbolEventRequest) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolEvent(input),\n        }\n    }\n\n    pub fn for_codebase_event(request_id: String, input: SymbolInputEvent) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::CodebaseEvent(input),\n        }\n    }\n\n    pub fn symbol_location(request_id: String, symbol_location: SymbolLocation) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolLoctationUpdate(symbol_location),\n        }\n    }\n\n    pub fn sub_symbol_step(\n        request_id: String,\n        sub_symbol_request: SymbolEventSubStepRequest,\n    ) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolEventSubStep(sub_symbol_request),\n        }\n    }\n\n    pub fn probe_answer_event(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        probe_answer: String,\n    ) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolEventSubStep(SymbolEventSubStepRequest::new(\n                symbol_identifier,\n                SymbolEventSubStep::Probe(SymbolEventProbeRequest::ProbeAnswer(probe_answer)),\n            )),\n        }\n    }\n\n    pub fn probing_started_event(request_id: String) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::RequestEvent(RequestEvents::ProbingStart),\n        }\n    }\n\n    pub fn probing_finished_event(request_id: String, response: String) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::RequestEvent(RequestEvents::ProbeFinished(\n                RequestEventProbeFinished::new(response),\n            )),\n        }\n    }\n\n    pub fn range_selection_for_edit(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n    ) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolEventSubStep(\n                SymbolEventSubStepRequest::range_selection_for_edit(\n                    symbol_identifier,\n                    fs_file_path,\n                    range,\n                ),\n            ),\n        }\n    }\n\n    pub fn edited_code(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        edited_code: String,\n    ) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolEventSubStep(SymbolEventSubStepRequest::edited_code(\n                symbol_identifier,\n                range,\n                fs_file_path,\n                edited_code,\n            )),\n        }\n    }\n\n    pub fn code_correctness_action(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        tool_use_thinking: String,\n    ) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolEventSubStep(SymbolEventSubStepRequest::code_correctness_action(\n                symbol_identifier,\n                range,\n                fs_file_path,\n                tool_use_thinking,\n            )),\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub enum UIEvent {\n    SymbolEvent(SymbolEventRequest),\n    ToolEvent(ToolInput),\n    CodebaseEvent(SymbolInputEvent),\n    SymbolLoctationUpdate(SymbolLocation),\n    SymbolEventSubStep(SymbolEventSubStepRequest),\n    RequestEvent(RequestEvents),\n}\n\nimpl From<SymbolEventRequest> for UIEvent {\n    fn from(req: SymbolEventRequest) -> Self {\n        UIEvent::SymbolEvent(req)\n    }\n}\n\nimpl From<ToolInput> for UIEvent {\n    fn from(input: ToolInput) -> Self {\n        UIEvent::ToolEvent(input)\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub enum SymbolEventProbeRequest {\n    SubSymbolSelection,\n    ProbeDeeperSymbol,\n    /// The final answer for the probe is sent via this event\n    ProbeAnswer(String),\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct SymbolEventGoToDefinitionRequest {\n    fs_file_path: String,\n    range: Range,\n    thinking: String,\n}\n\nimpl SymbolEventGoToDefinitionRequest {\n    fn new(fs_file_path: String, range: Range, thinking: String) -> Self {\n        Self {\n            fs_file_path,\n            range,\n            thinking,\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct RangeSelectionForEditRequest {\n    range: Range,\n    fs_file_path: String,\n}\n\nimpl RangeSelectionForEditRequest {\n    pub fn new(range: Range, fs_file_path: String) -> Self {\n        Self {\n            range,\n            fs_file_path,\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct InsertCodeForEditRequest {\n    range: Range,\n    fs_file_path: String,\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct EditedCodeForEditRequest {\n    range: Range,\n    fs_file_path: String,\n    new_code: String,\n}\n\nimpl EditedCodeForEditRequest {\n    pub fn new(range: Range, fs_file_path: String, new_code: String) -> Self {\n        Self {\n            range,\n            fs_file_path,\n            new_code,\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct CodeCorrectionToolSelection {\n    range: Range,\n    fs_file_path: String,\n    tool_use_thinking: String,\n}\n\nimpl CodeCorrectionToolSelection {\n    pub fn new(range: Range, fs_file_path: String, tool_use_thinking: String) -> Self {\n        Self {\n            range,\n            fs_file_path,\n            tool_use_thinking,\n        }\n    }\n}\n\n/// We have range selection and then the edited code, we should also show the\n/// events which the AI is using for the tool correction and whats it is planning\n/// on doing for that\n#[derive(Debug, serde::Serialize)]\npub enum SymbolEventEditRequest {\n    RangeSelectionForEdit(RangeSelectionForEditRequest),\n    /// We might be inserting code at a line which is a new symbol by itself\n    InsertCode(InsertCodeForEditRequest),\n    EditCode(EditedCodeForEditRequest),\n    CodeCorrectionTool(CodeCorrectionToolSelection),\n}\n\n#[derive(Debug, serde::Serialize)]\npub enum SymbolEventSubStep {\n    Probe(SymbolEventProbeRequest),\n    GoToDefinition(SymbolEventGoToDefinitionRequest),\n    Edit(SymbolEventEditRequest),\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct SymbolEventSubStepRequest {\n    symbol_identifier: SymbolIdentifier,\n    event: SymbolEventSubStep,\n}\n\nimpl SymbolEventSubStepRequest {\n    pub fn new(symbol_identifier: SymbolIdentifier, event: SymbolEventSubStep) -> Self {\n        Self {\n            symbol_identifier,\n            event,\n        }\n    }\n\n    pub fn probe_answer(symbol_identifier: SymbolIdentifier, answer: String) -> Self {\n        Self {\n            symbol_identifier,\n            event: SymbolEventSubStep::Probe(SymbolEventProbeRequest::ProbeAnswer(answer)),\n        }\n    }\n\n    pub fn go_to_definition_request(\n        symbol_identifier: SymbolIdentifier,\n        fs_file_path: String,\n        range: Range,\n        thinking: String,\n    ) -> Self {\n        Self {\n            symbol_identifier,\n            event: SymbolEventSubStep::GoToDefinition(SymbolEventGoToDefinitionRequest::new(\n                fs_file_path,\n                range,\n                thinking,\n            )),\n        }\n    }\n\n    pub fn range_selection_for_edit(\n        symbol_identifier: SymbolIdentifier,\n        fs_file_path: String,\n        range: Range,\n    ) -> Self {\n        Self {\n            symbol_identifier,\n            event: SymbolEventSubStep::Edit(SymbolEventEditRequest::RangeSelectionForEdit(\n                RangeSelectionForEditRequest::new(range, fs_file_path),\n            )),\n        }\n    }\n\n    pub fn edited_code(\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        edited_code: String,\n    ) -> Self {\n        Self {\n            symbol_identifier,\n            event: SymbolEventSubStep::Edit(SymbolEventEditRequest::EditCode(\n                EditedCodeForEditRequest::new(range, fs_file_path, edited_code),\n            )),\n        }\n    }\n\n    pub fn code_correctness_action(\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        tool_use_thinking: String,\n    ) -> Self {\n        Self {\n            symbol_identifier,\n            event: SymbolEventSubStep::Edit(SymbolEventEditRequest::CodeCorrectionTool(\n                CodeCorrectionToolSelection::new(range, fs_file_path, tool_use_thinking),\n            )),\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct RequestEventProbeFinished {\n    reply: String,\n}\n\nimpl RequestEventProbeFinished {\n    pub fn new(reply: String) -> Self {\n        Self { reply }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub enum RequestEvents {\n    ProbingStart,\n    ProbeFinished(RequestEventProbeFinished),\n}\n","language":"rust"},{"file_path":"/Users/nareshr/github/codestory/sidecar/sidecar/src/agentic/symbol/ui_event.rs","file_content":"//! We are going to log the UI events, this is mostly for\n//! debugging and having better visibility to what ever is happening\n//! in the symbols\n\nuse crate::{agentic::tool::input::ToolInput, chunking::text_document::Range};\n\nuse super::{\n    events::input::SymbolInputEvent,\n    identifier::SymbolIdentifier,\n    types::{SymbolEventRequest, SymbolLocation},\n};\n\n#[derive(Debug, serde::Serialize)]\npub struct UIEventWithID {\n    request_id: String,\n    event: UIEvent,\n}\n\nimpl UIEventWithID {\n    pub fn from_tool_event(request_id: String, input: ToolInput) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::from(input),\n        }\n    }\n\n    pub fn from_symbol_event(request_id: String, input: SymbolEventRequest) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolEvent(input),\n        }\n    }\n\n    pub fn for_codebase_event(request_id: String, input: SymbolInputEvent) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::CodebaseEvent(input),\n        }\n    }\n\n    pub fn symbol_location(request_id: String, symbol_location: SymbolLocation) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolLoctationUpdate(symbol_location),\n        }\n    }\n\n    pub fn sub_symbol_step(\n        request_id: String,\n        sub_symbol_request: SymbolEventSubStepRequest,\n    ) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolEventSubStep(sub_symbol_request),\n        }\n    }\n\n    pub fn probe_answer_event(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        probe_answer: String,\n    ) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolEventSubStep(SymbolEventSubStepRequest::new(\n                symbol_identifier,\n                SymbolEventSubStep::Probe(SymbolEventProbeRequest::ProbeAnswer(probe_answer)),\n            )),\n        }\n    }\n\n    pub fn probing_started_event(request_id: String) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::RequestEvent(RequestEvents::ProbingStart),\n        }\n    }\n\n    pub fn probing_finished_event(request_id: String, response: String) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::RequestEvent(RequestEvents::ProbeFinished(\n                RequestEventProbeFinished::new(response),\n            )),\n        }\n    }\n\n    pub fn range_selection_for_edit(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n    ) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolEventSubStep(\n                SymbolEventSubStepRequest::range_selection_for_edit(\n                    symbol_identifier,\n                    fs_file_path,\n                    range,\n                ),\n            ),\n        }\n    }\n\n    pub fn edited_code(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        edited_code: String,\n    ) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolEventSubStep(SymbolEventSubStepRequest::edited_code(\n                symbol_identifier,\n                range,\n                fs_file_path,\n                edited_code,\n            )),\n        }\n    }\n\n    pub fn code_correctness_action(\n        request_id: String,\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        tool_use_thinking: String,\n    ) -> Self {\n        Self {\n            request_id,\n            event: UIEvent::SymbolEventSubStep(SymbolEventSubStepRequest::code_correctness_action(\n                symbol_identifier,\n                range,\n                fs_file_path,\n                tool_use_thinking,\n            )),\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub enum UIEvent {\n    SymbolEvent(SymbolEventRequest),\n    ToolEvent(ToolInput),\n    CodebaseEvent(SymbolInputEvent),\n    SymbolLoctationUpdate(SymbolLocation),\n    SymbolEventSubStep(SymbolEventSubStepRequest),\n    RequestEvent(RequestEvents),\n}\n\nimpl From<SymbolEventRequest> for UIEvent {\n    fn from(req: SymbolEventRequest) -> Self {\n        UIEvent::SymbolEvent(req)\n    }\n}\n\nimpl From<ToolInput> for UIEvent {\n    fn from(input: ToolInput) -> Self {\n        UIEvent::ToolEvent(input)\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub enum SymbolEventProbeRequest {\n    SubSymbolSelection,\n    ProbeDeeperSymbol,\n    /// The final answer for the probe is sent via this event\n    ProbeAnswer(String),\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct SymbolEventGoToDefinitionRequest {\n    fs_file_path: String,\n    range: Range,\n    thinking: String,\n}\n\nimpl SymbolEventGoToDefinitionRequest {\n    fn new(fs_file_path: String, range: Range, thinking: String) -> Self {\n        Self {\n            fs_file_path,\n            range,\n            thinking,\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct RangeSelectionForEditRequest {\n    range: Range,\n    fs_file_path: String,\n}\n\nimpl RangeSelectionForEditRequest {\n    pub fn new(range: Range, fs_file_path: String) -> Self {\n        Self {\n            range,\n            fs_file_path,\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct InsertCodeForEditRequest {\n    range: Range,\n    fs_file_path: String,\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct EditedCodeForEditRequest {\n    range: Range,\n    fs_file_path: String,\n    new_code: String,\n}\n\nimpl EditedCodeForEditRequest {\n    pub fn new(range: Range, fs_file_path: String, new_code: String) -> Self {\n        Self {\n            range,\n            fs_file_path,\n            new_code,\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct CodeCorrectionToolSelection {\n    range: Range,\n    fs_file_path: String,\n    tool_use_thinking: String,\n}\n\nimpl CodeCorrectionToolSelection {\n    pub fn new(range: Range, fs_file_path: String, tool_use_thinking: String) -> Self {\n        Self {\n            range,\n            fs_file_path,\n            tool_use_thinking,\n        }\n    }\n}\n\n/// We have range selection and then the edited code, we should also show the\n/// events which the AI is using for the tool correction and whats it is planning\n/// on doing for that\n#[derive(Debug, serde::Serialize)]\npub enum SymbolEventEditRequest {\n    RangeSelectionForEdit(RangeSelectionForEditRequest),\n    /// We might be inserting code at a line which is a new symbol by itself\n    InsertCode(InsertCodeForEditRequest),\n    EditCode(EditedCodeForEditRequest),\n    CodeCorrectionTool(CodeCorrectionToolSelection),\n}\n\n#[derive(Debug, serde::Serialize)]\npub enum SymbolEventSubStep {\n    Probe(SymbolEventProbeRequest),\n    GoToDefinition(SymbolEventGoToDefinitionRequest),\n    Edit(SymbolEventEditRequest),\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct SymbolEventSubStepRequest {\n    symbol_identifier: SymbolIdentifier,\n    event: SymbolEventSubStep,\n}\n\nimpl SymbolEventSubStepRequest {\n    pub fn new(symbol_identifier: SymbolIdentifier, event: SymbolEventSubStep) -> Self {\n        Self {\n            symbol_identifier,\n            event,\n        }\n    }\n\n    pub fn probe_answer(symbol_identifier: SymbolIdentifier, answer: String) -> Self {\n        Self {\n            symbol_identifier,\n            event: SymbolEventSubStep::Probe(SymbolEventProbeRequest::ProbeAnswer(answer)),\n        }\n    }\n\n    pub fn go_to_definition_request(\n        symbol_identifier: SymbolIdentifier,\n        fs_file_path: String,\n        range: Range,\n        thinking: String,\n    ) -> Self {\n        Self {\n            symbol_identifier,\n            event: SymbolEventSubStep::GoToDefinition(SymbolEventGoToDefinitionRequest::new(\n                fs_file_path,\n                range,\n                thinking,\n            )),\n        }\n    }\n\n    pub fn range_selection_for_edit(\n        symbol_identifier: SymbolIdentifier,\n        fs_file_path: String,\n        range: Range,\n    ) -> Self {\n        Self {\n            symbol_identifier,\n            event: SymbolEventSubStep::Edit(SymbolEventEditRequest::RangeSelectionForEdit(\n                RangeSelectionForEditRequest::new(range, fs_file_path),\n            )),\n        }\n    }\n\n    pub fn edited_code(\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        edited_code: String,\n    ) -> Self {\n        Self {\n            symbol_identifier,\n            event: SymbolEventSubStep::Edit(SymbolEventEditRequest::EditCode(\n                EditedCodeForEditRequest::new(range, fs_file_path, edited_code),\n            )),\n        }\n    }\n\n    pub fn code_correctness_action(\n        symbol_identifier: SymbolIdentifier,\n        range: Range,\n        fs_file_path: String,\n        tool_use_thinking: String,\n    ) -> Self {\n        Self {\n            symbol_identifier,\n            event: SymbolEventSubStep::Edit(SymbolEventEditRequest::CodeCorrectionTool(\n                CodeCorrectionToolSelection::new(range, fs_file_path, tool_use_thinking),\n            )),\n        }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub struct RequestEventProbeFinished {\n    reply: String,\n}\n\nimpl RequestEventProbeFinished {\n    pub fn new(reply: String) -> Self {\n        Self { reply }\n    }\n}\n\n#[derive(Debug, serde::Serialize)]\npub enum RequestEvents {\n    ProbingStart,\n    ProbeFinished(RequestEventProbeFinished),\n}\n","language":"rust"}],"terminal_selection":null,"folder_paths":[]},"user_query":"Add comments on RequestEvents","llm_type":"GeminiPro","llm_provider":"GoogleAIStudio","api_key":{"GoogleAIStudio":{"api_key":"AIzaSyCMkKfNkmjF8rTOWMg53NiYmz0Zv6xbfsE"}},"file_extension_filters":[],"root_request_id":"3fec4840-31cf-4875-9bb8-345a770776a4"}}}},
{"request_id":"c8ac1629-ea37-445b-9d71-db428f9d80fc","event":{"ToolEvent":{"OpenFile":{"fs_file_path":"/Users/nareshr/github/codestory/sidecar/sidecar/src/agentic/symbol/ui_event.rs","editor_url":"http://localhost:42423"}}}},
{"request_id":"c8ac1629-ea37-445b-9d71-db428f9d80fc","event":{"ToolEvent":{"OpenFile":{"fs_file_path":"/Users/nareshr/github/codestory/sidecar/sidecar/src/agentic/symbol/ui_event.rs","editor_url":"http://localhost:42423"}}}},
{"request_id":"c8ac1629-ea37-445b-9d71-db428f9d80fc","event":{"ToolEvent":{"SymbolImplementations":{"fs_file_path":"/Users/nareshr/github/codestory/sidecar/sidecar/src/agentic/symbol/ui_event.rs","position":{"line":354,"character":22,"byteOffset":9382},"editor_url":"http://localhost:42423"}}}},
{"request_id":"c8ac1629-ea37-445b-9d71-db428f9d80fc","event":{"ToolEvent":{"OpenFile":{"fs_file_path":"/Users/nareshr/github/codestory/sidecar/sidecar/src/agentic/symbol/ui_event.rs","editor_url":"http://localhost:42423"}}}},
{"request_id":"c8ac1629-ea37-445b-9d71-db428f9d80fc","event":{"ToolEvent":{"OpenFile":{"fs_file_path":"/Users/nareshr/github/codestory/sidecar/sidecar/src/agentic/symbol/ui_event.rs","editor_url":"http://localhost:42423"}}}},
{"request_id":"c8ac1629-ea37-445b-9d71-db428f9d80fc","event":{"SymbolEvent":{"symbol":{"symbol_name":"RequestEvents","fs_file_path":"/Users/nareshr/github/codestory/sidecar/sidecar/src/agentic/symbol/ui_event.rs"},"event":{"Probe":{"symbol_identifier":{"symbol_name":"RequestEvents","fs_file_path":"/Users/nareshr/github/codestory/sidecar/sidecar/src/agentic/symbol/ui_event.rs"},"probe_request":"Add comments on RequestEvents","original_request":"Add comments on RequestEvents","original_request_id":"c8ac1629-ea37-445b-9d71-db428f9d80fc","history":[]}},"tool_properties":{"swe_bench_test_endpoint":null,"swe_bench_code_editing_llm":null,"swe_bench_reranking_llm":null,"swe_bench_long_context_editing_llm":null}}}},
{"request_id":"c8ac1629-ea37-445b-9d71-db428f9d80fc","event":{"ToolEvent":{"OpenFile":{"fs_file_path":"/Users/nareshr/github/codestory/sidecar/sidecar/src/agentic/symbol/ui_event.rs","editor_url":"http://localhost:42423"}}}},
{"request_id":"c8ac1629-ea37-445b-9d71-db428f9d80fc","event":{"SymbolLoctationUpdate":{"snippet":{"range":{"startPosition":{"line":353,"character":0,"byteOffset":9325},"endPosition":{"line":357,"character":1,"byteOffset":9450}},"symbol_name":"RequestEvents","fs_file_path":"/Users/nareshr/github/codestory/sidecar/sidecar/src/agentic/symbol/ui_event.rs","content":"#[derive(Debug, serde::Serialize)]\npub enum RequestEvents {\n    ProbingStart,\n    ProbeFinished(RequestEventProbeFinished),\n}","language":null,"outline_node_content":{"range":{"startPosition":{"line":353,"character":0,"byteOffset":9325},"endPosition":{"line":357,"character":1,"byteOffset":9450}},"name":"RequestEvents","type":"ClassDefinition","content":"#[derive(Debug, serde::Serialize)]\npub enum RequestEvents {\n    ProbingStart,\n    ProbeFinished(RequestEventProbeFinished),\n}","fs_file_path":"/Users/nareshr/github/codestory/sidecar/sidecar/src/agentic/symbol/ui_event.rs","identifier_range":{"startPosition":{"line":354,"character":9,"byteOffset":9369},"endPosition":{"line":354,"character":22,"byteOffset":9382}},"body_range":{"startPosition":{"line":353,"character":0,"byteOffset":9325},"endPosition":{"line":357,"character":1,"byteOffset":9450}},"language":"rust","trait_implementation":null}},"symbol_identifier":{"symbol_name":"RequestEvents","fs_file_path":"/Users/nareshr/github/codestory/sidecar/sidecar/src/agentic/symbol/ui_event.rs"}}}},
{"request_id":"c8ac1629-ea37-445b-9d71-db428f9d80fc","event":{"ToolEvent":{"OpenFile":{"fs_file_path":"/Users/nareshr/github/codestory/sidecar/sidecar/src/agentic/symbol/ui_event.rs","editor_url":"http://localhost:42423"}}}},
{"request_id":"c8ac1629-ea37-445b-9d71-db428f9d80fc","event":{"ToolEvent":{"SymbolImplementations":{"fs_file_path":"/Users/nareshr/github/codestory/sidecar/sidecar/src/agentic/symbol/ui_event.rs","position":{"line":354,"character":22,"byteOffset":9382},"editor_url":"http://localhost:42423"}}}},
{"request_id":"c8ac1629-ea37-445b-9d71-db428f9d80fc","event":{"ToolEvent":{"OpenFile":{"fs_file_path":"/Users/nareshr/github/codestory/sidecar/sidecar/src/agentic/symbol/ui_event.rs","editor_url":"http://localhost:42423"}}}},
{"request_id":"c8ac1629-ea37-445b-9d71-db428f9d80fc","event":{"ToolEvent":{"OpenFile":{"fs_file_path":"/Users/nareshr/github/codestory/sidecar/sidecar/src/agentic/symbol/ui_event.rs","editor_url":"http://localhost:42423"}}}},
{"request_id":"c8ac1629-ea37-445b-9d71-db428f9d80fc","event":{"ToolEvent":{"OpenFile":{"fs_file_path":"/Users/nareshr/github/codestory/sidecar/sidecar/src/agentic/symbol/ui_event.rs","editor_url":"http://localhost:42423"}}}},
{"request_id":"c8ac1629-ea37-445b-9d71-db428f9d80fc","event":{"ToolEvent":{"OpenFile":{"fs_file_path":"/Users/nareshr/github/codestory/sidecar/sidecar/src/agentic/symbol/ui_event.rs","editor_url":"http://localhost:42423"}}}},
{"request_id":"c8ac1629-ea37-445b-9d71-db428f9d80fc","event":{"ToolEvent":{"OpenFile":{"fs_file_path":"/Users/nareshr/github/codestory/sidecar/sidecar/src/agentic/symbol/ui_event.rs","editor_url":"http://localhost:42423"}}}},
{"request_id":"c8ac1629-ea37-445b-9d71-db428f9d80fc","event":{"ToolEvent":{"OpenFile":{"fs_file_path":"/Users/nareshr/github/codestory/sidecar/sidecar/src/agentic/symbol/ui_event.rs","editor_url":"http://localhost:42423"}}}},
{"request_id":"c8ac1629-ea37-445b-9d71-db428f9d80fc","event":{"ToolEvent":{"ProbeFilterSnippetsSingleSymbol":{"xml_symbol":"<rerank_list>\n<rerank_entry>\n<id>\n0\n</id>\n<name>\nRequestEvents\n</name>\n<file_path>\n/Users/nareshr/github/codestory/sidecar/sidecar/src/agentic/symbol/ui_event.rs:353-357\n</file_path>\n<content>\n```rust\n#[derive(Debug, serde::Serialize)]\npub enum RequestEvents {\n    ProbingStart,\n    ProbeFinished(RequestEventProbeFinished),\n}\n```\n</content>\n</rerank_entry>\n<rerank_entry>\n<id>\n1\n</id>\n<name>\nRequestEvents\n</name>\n<file_path>\n/Users/nareshr/github/codestory/sidecar/sidecar/src/agentic/symbol/ui_event.rs:353-357\n</file_path>\n<content>\n```rust\n#[derive(Debug, serde::Serialize)]\npub enum RequestEvents {\n    ProbingStart,\n    ProbeFinished(RequestEventProbeFinished),\n}\n```\n</content>\n</rerank_entry>\n\n</rerank_list>","query":"Add comments on RequestEvents","llm":"ClaudeSonnet","provider":{"CodeStory":{"llm_type":null}},"api_key":"CodeStory","root_request_id":"3fec4840-31cf-4875-9bb8-345a770776a4"}}}},
{"request_id":"c8ac1629-ea37-445b-9d71-db428f9d80fc","event":{"ToolEvent":{"ProbeEnoughOrDeeper":{"symbol_name":"RequestEvents","xml_string":"<rerank_list>\n<rerank_entry>\n<id>\n0\n</id>\n<name>\nRequestEvents\n</name>\n<file_path>\n/Users/nareshr/github/codestory/sidecar/sidecar/src/agentic/symbol/ui_event.rs:353-357\n</file_path>\n<content>\n```rust\n#[derive(Debug, serde::Serialize)]\npub enum RequestEvents {\n    ProbingStart,\n    ProbeFinished(RequestEventProbeFinished),\n}\n```\n</content>\n</rerank_entry>\n<rerank_entry>\n<id>\n1\n</id>\n<name>\nRequestEvents\n</name>\n<file_path>\n/Users/nareshr/github/codestory/sidecar/sidecar/src/agentic/symbol/ui_event.rs:353-357\n</file_path>\n<content>\n```rust\n#[derive(Debug, serde::Serialize)]\npub enum RequestEvents {\n    ProbingStart,\n    ProbeFinished(RequestEventProbeFinished),\n}\n```\n</content>\n</rerank_entry>\n\n</rerank_list>","query":"Add comments on RequestEvents","llm_properties":{"llm":"ClaudeSonnet","provider":{"CodeStory":{"llm_type":null}},"api_key":"CodeStory"},"root_request_id":"3fec4840-31cf-4875-9bb8-345a770776a4"}}}},
{"request_id":"c8ac1629-ea37-445b-9d71-db428f9d80fc","event":{"SymbolEventSubStep":{"symbol_identifier":{"symbol_name":"RequestEvents","fs_file_path":"/Users/nareshr/github/codestory/sidecar/sidecar/src/agentic/symbol/ui_event.rs"},"event":{"Probe":{"ProbeAnswer":"failed to answer the user query because of external error"}}}}},
{"request_id":"c8ac1629-ea37-445b-9d71-db428f9d80fc","event":{"RequestEvent":{"ProbeFinished":{"reply":"RequestEvents at /Users/nareshr/github/codestory/sidecar/sidecar/src/agentic/symbol/ui_event.rs\nfailed to look depeer to answer user query"}}}},
]